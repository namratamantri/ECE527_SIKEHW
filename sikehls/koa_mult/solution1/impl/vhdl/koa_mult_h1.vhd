-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity koa_mult_h1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_V : IN STD_LOGIC_VECTOR (447 downto 0);
    b_V : IN STD_LOGIC_VECTOR (447 downto 0);
    c_V : OUT STD_LOGIC_VECTOR (895 downto 0);
    c_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of koa_mult_h1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "koa_mult_h1,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.103455,HLS_SYN_LAT=25,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=192,HLS_SYN_FF=35093,HLS_SYN_LUT=7422,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv224_lc_1 : STD_LOGIC_VECTOR (223 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ah_V_fu_62_p4 : STD_LOGIC_VECTOR (223 downto 0);
    signal ah_V_reg_141 : STD_LOGIC_VECTOR (223 downto 0);
    signal al_V_fu_73_p1 : STD_LOGIC_VECTOR (223 downto 0);
    signal al_V_reg_146 : STD_LOGIC_VECTOR (223 downto 0);
    signal ahl_V_fu_86_p2 : STD_LOGIC_VECTOR (224 downto 0);
    signal ahl_V_reg_151 : STD_LOGIC_VECTOR (224 downto 0);
    signal grp_bc_mult_fu_52_ap_return : STD_LOGIC_VECTOR (447 downto 0);
    signal a0_V_reg_156 : STD_LOGIC_VECTOR (447 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_bc_mult_fu_52_ap_ready : STD_LOGIC;
    signal grp_bc_mult_fu_52_ap_done : STD_LOGIC;
    signal grp_bc_mult_1_fu_57_ap_ready : STD_LOGIC;
    signal grp_bc_mult_1_fu_57_ap_done : STD_LOGIC;
    signal grp_bc_mult_2_fu_47_ap_ready : STD_LOGIC;
    signal grp_bc_mult_2_fu_47_ap_done : STD_LOGIC;
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal grp_bc_mult_1_fu_57_ap_return : STD_LOGIC_VECTOR (447 downto 0);
    signal a2_V_reg_161 : STD_LOGIC_VECTOR (447 downto 0);
    signal grp_fu_101_p2 : STD_LOGIC_VECTOR (450 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_bc_mult_2_fu_47_ap_start : STD_LOGIC;
    signal grp_bc_mult_2_fu_47_ap_idle : STD_LOGIC;
    signal grp_bc_mult_2_fu_47_ap_return : STD_LOGIC_VECTOR (449 downto 0);
    signal grp_bc_mult_fu_52_ap_start : STD_LOGIC;
    signal grp_bc_mult_fu_52_ap_idle : STD_LOGIC;
    signal grp_bc_mult_1_fu_57_ap_start : STD_LOGIC;
    signal grp_bc_mult_1_fu_57_ap_idle : STD_LOGIC;
    signal grp_bc_mult_2_fu_47_ap_start_reg : STD_LOGIC := '0';
    signal grp_bc_mult_fu_52_ap_start_reg : STD_LOGIC := '0';
    signal grp_bc_mult_1_fu_57_ap_start_reg : STD_LOGIC := '0';
    signal grp_fu_134_p2 : STD_LOGIC_VECTOR (895 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sext_ln68_1_fu_82_p1 : STD_LOGIC_VECTOR (224 downto 0);
    signal sext_ln68_fu_78_p1 : STD_LOGIC_VECTOR (224 downto 0);
    signal grp_fu_101_p0 : STD_LOGIC_VECTOR (450 downto 0);
    signal grp_fu_101_p1 : STD_LOGIC_VECTOR (450 downto 0);
    signal grp_fu_110_p1 : STD_LOGIC_VECTOR (450 downto 0);
    signal grp_fu_110_p2 : STD_LOGIC_VECTOR (450 downto 0);
    signal r_V_fu_116_p3 : STD_LOGIC_VECTOR (674 downto 0);
    signal grp_fu_134_p0 : STD_LOGIC_VECTOR (895 downto 0);
    signal grp_fu_134_p1 : STD_LOGIC_VECTOR (895 downto 0);
    signal grp_fu_101_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component bc_mult_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ta_V : IN STD_LOGIC_VECTOR (224 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (449 downto 0) );
    end component;


    component bc_mult IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ta_V : IN STD_LOGIC_VECTOR (223 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (447 downto 0) );
    end component;


    component bc_mult_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ta_V : IN STD_LOGIC_VECTOR (223 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (447 downto 0) );
    end component;


    component koa_mult_h1_sub_4jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (450 downto 0);
        din1 : IN STD_LOGIC_VECTOR (450 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (450 downto 0) );
    end component;


    component koa_mult_h1_add_8kbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (895 downto 0);
        din1 : IN STD_LOGIC_VECTOR (895 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (895 downto 0) );
    end component;



begin
    grp_bc_mult_2_fu_47 : component bc_mult_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_bc_mult_2_fu_47_ap_start,
        ap_done => grp_bc_mult_2_fu_47_ap_done,
        ap_idle => grp_bc_mult_2_fu_47_ap_idle,
        ap_ready => grp_bc_mult_2_fu_47_ap_ready,
        ta_V => ahl_V_reg_151,
        ap_return => grp_bc_mult_2_fu_47_ap_return);

    grp_bc_mult_fu_52 : component bc_mult
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_bc_mult_fu_52_ap_start,
        ap_done => grp_bc_mult_fu_52_ap_done,
        ap_idle => grp_bc_mult_fu_52_ap_idle,
        ap_ready => grp_bc_mult_fu_52_ap_ready,
        ta_V => ah_V_reg_141,
        ap_return => grp_bc_mult_fu_52_ap_return);

    grp_bc_mult_1_fu_57 : component bc_mult_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_bc_mult_1_fu_57_ap_start,
        ap_done => grp_bc_mult_1_fu_57_ap_done,
        ap_idle => grp_bc_mult_1_fu_57_ap_idle,
        ap_ready => grp_bc_mult_1_fu_57_ap_ready,
        ta_V => al_V_reg_146,
        ap_return => grp_bc_mult_1_fu_57_ap_return);

    koa_mult_h1_sub_4jbC_U60 : component koa_mult_h1_sub_4jbC
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 451,
        din1_WIDTH => 451,
        dout_WIDTH => 451)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_101_p0,
        din1 => grp_fu_101_p1,
        ce => grp_fu_101_ce,
        dout => grp_fu_101_p2);

    koa_mult_h1_sub_4jbC_U61 : component koa_mult_h1_sub_4jbC
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 451,
        din1_WIDTH => 451,
        dout_WIDTH => 451)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_101_p2,
        din1 => grp_fu_110_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_110_p2);

    koa_mult_h1_add_8kbM_U62 : component koa_mult_h1_add_8kbM
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 896,
        din1_WIDTH => 896,
        dout_WIDTH => 896)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_134_p0,
        din1 => grp_fu_134_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_134_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_bc_mult_1_fu_57_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_bc_mult_1_fu_57_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_bc_mult_1_fu_57_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_bc_mult_1_fu_57_ap_ready = ap_const_logic_1)) then 
                    grp_bc_mult_1_fu_57_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_bc_mult_2_fu_47_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_bc_mult_2_fu_47_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_bc_mult_2_fu_47_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_bc_mult_2_fu_47_ap_ready = ap_const_logic_1)) then 
                    grp_bc_mult_2_fu_47_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_bc_mult_fu_52_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_bc_mult_fu_52_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_bc_mult_fu_52_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_bc_mult_fu_52_ap_ready = ap_const_logic_1)) then 
                    grp_bc_mult_fu_52_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                a0_V_reg_156 <= grp_bc_mult_fu_52_ap_return;
                a2_V_reg_161 <= grp_bc_mult_1_fu_57_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                ah_V_reg_141 <= a_V(447 downto 224);
                ahl_V_reg_151 <= ahl_V_fu_86_p2;
                al_V_reg_146 <= al_V_fu_73_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ah_V_fu_62_p4 <= a_V(447 downto 224);
    ahl_V_fu_86_p2 <= std_logic_vector(signed(sext_ln68_1_fu_82_p1) + signed(sext_ln68_fu_78_p1));
    al_V_fu_73_p1 <= a_V(224 - 1 downto 0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_block_state2_on_subcall_done_assign_proc : process(grp_bc_mult_fu_52_ap_done, grp_bc_mult_1_fu_57_ap_done, grp_bc_mult_2_fu_47_ap_done)
    begin
                ap_block_state2_on_subcall_done <= ((grp_bc_mult_2_fu_47_ap_done = ap_const_logic_0) or (grp_bc_mult_1_fu_57_ap_done = ap_const_logic_0) or (grp_bc_mult_fu_52_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_V <= grp_fu_134_p2;

    c_V_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            c_V_ap_vld <= ap_const_logic_1;
        else 
            c_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    grp_bc_mult_1_fu_57_ap_start <= grp_bc_mult_1_fu_57_ap_start_reg;
    grp_bc_mult_2_fu_47_ap_start <= grp_bc_mult_2_fu_47_ap_start_reg;
    grp_bc_mult_fu_52_ap_start <= grp_bc_mult_fu_52_ap_start_reg;

    grp_fu_101_ce_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            grp_fu_101_ce <= ap_const_logic_1;
        else 
            grp_fu_101_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_101_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_bc_mult_2_fu_47_ap_return),451));
    grp_fu_101_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_bc_mult_fu_52_ap_return),451));
    grp_fu_110_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a2_V_reg_161),451));
        grp_fu_134_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_fu_116_p3),896));

    grp_fu_134_p1 <= (a0_V_reg_156 & a2_V_reg_161);
    r_V_fu_116_p3 <= (grp_fu_110_p2 & ap_const_lv224_lc_1);
        sext_ln68_1_fu_82_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(al_V_fu_73_p1),225));

        sext_ln68_fu_78_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ah_V_fu_62_p4),225));

end behav;
