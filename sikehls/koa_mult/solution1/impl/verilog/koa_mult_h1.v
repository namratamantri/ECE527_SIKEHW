// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="koa_mult_h1,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.103455,HLS_SYN_LAT=25,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=192,HLS_SYN_FF=35093,HLS_SYN_LUT=7422,HLS_VERSION=2019_1}" *)

module koa_mult_h1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_V,
        b_V,
        c_V,
        c_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [447:0] a_V;
input  [447:0] b_V;
output  [895:0] c_V;
output   c_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg c_V_ap_vld;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [223:0] ah_V_fu_62_p4;
reg   [223:0] ah_V_reg_141;
wire  signed [223:0] al_V_fu_73_p1;
reg   [223:0] al_V_reg_146;
wire   [224:0] ahl_V_fu_86_p2;
reg   [224:0] ahl_V_reg_151;
wire   [447:0] grp_bc_mult_fu_52_ap_return;
reg   [447:0] a0_V_reg_156;
wire    ap_CS_fsm_state2;
wire    grp_bc_mult_fu_52_ap_ready;
wire    grp_bc_mult_fu_52_ap_done;
wire    grp_bc_mult_1_fu_57_ap_ready;
wire    grp_bc_mult_1_fu_57_ap_done;
wire    grp_bc_mult_2_fu_47_ap_ready;
wire    grp_bc_mult_2_fu_47_ap_done;
reg    ap_block_state2_on_subcall_done;
wire   [447:0] grp_bc_mult_1_fu_57_ap_return;
reg   [447:0] a2_V_reg_161;
wire   [450:0] grp_fu_101_p2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    grp_bc_mult_2_fu_47_ap_start;
wire    grp_bc_mult_2_fu_47_ap_idle;
wire   [449:0] grp_bc_mult_2_fu_47_ap_return;
wire    grp_bc_mult_fu_52_ap_start;
wire    grp_bc_mult_fu_52_ap_idle;
wire    grp_bc_mult_1_fu_57_ap_start;
wire    grp_bc_mult_1_fu_57_ap_idle;
reg    grp_bc_mult_2_fu_47_ap_start_reg;
reg    grp_bc_mult_fu_52_ap_start_reg;
reg    grp_bc_mult_1_fu_57_ap_start_reg;
wire   [895:0] grp_fu_134_p2;
wire    ap_CS_fsm_state5;
wire  signed [224:0] sext_ln68_1_fu_82_p1;
wire  signed [224:0] sext_ln68_fu_78_p1;
wire   [450:0] grp_fu_101_p0;
wire   [450:0] grp_fu_101_p1;
wire   [450:0] grp_fu_110_p1;
wire   [450:0] grp_fu_110_p2;
wire   [674:0] r_V_fu_116_p3;
wire  signed [895:0] grp_fu_134_p0;
wire   [895:0] grp_fu_134_p1;
reg    grp_fu_101_ce;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 grp_bc_mult_2_fu_47_ap_start_reg = 1'b0;
#0 grp_bc_mult_fu_52_ap_start_reg = 1'b0;
#0 grp_bc_mult_1_fu_57_ap_start_reg = 1'b0;
end

bc_mult_2 grp_bc_mult_2_fu_47(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_bc_mult_2_fu_47_ap_start),
    .ap_done(grp_bc_mult_2_fu_47_ap_done),
    .ap_idle(grp_bc_mult_2_fu_47_ap_idle),
    .ap_ready(grp_bc_mult_2_fu_47_ap_ready),
    .ta_V(ahl_V_reg_151),
    .ap_return(grp_bc_mult_2_fu_47_ap_return)
);

bc_mult grp_bc_mult_fu_52(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_bc_mult_fu_52_ap_start),
    .ap_done(grp_bc_mult_fu_52_ap_done),
    .ap_idle(grp_bc_mult_fu_52_ap_idle),
    .ap_ready(grp_bc_mult_fu_52_ap_ready),
    .ta_V(ah_V_reg_141),
    .ap_return(grp_bc_mult_fu_52_ap_return)
);

bc_mult_1 grp_bc_mult_1_fu_57(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_bc_mult_1_fu_57_ap_start),
    .ap_done(grp_bc_mult_1_fu_57_ap_done),
    .ap_idle(grp_bc_mult_1_fu_57_ap_idle),
    .ap_ready(grp_bc_mult_1_fu_57_ap_ready),
    .ta_V(al_V_reg_146),
    .ap_return(grp_bc_mult_1_fu_57_ap_return)
);

koa_mult_h1_sub_4jbC #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 451 ),
    .din1_WIDTH( 451 ),
    .dout_WIDTH( 451 ))
koa_mult_h1_sub_4jbC_U60(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_101_p0),
    .din1(grp_fu_101_p1),
    .ce(grp_fu_101_ce),
    .dout(grp_fu_101_p2)
);

koa_mult_h1_sub_4jbC #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 451 ),
    .din1_WIDTH( 451 ),
    .dout_WIDTH( 451 ))
koa_mult_h1_sub_4jbC_U61(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_101_p2),
    .din1(grp_fu_110_p1),
    .ce(1'b1),
    .dout(grp_fu_110_p2)
);

koa_mult_h1_add_8kbM #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 896 ),
    .din1_WIDTH( 896 ),
    .dout_WIDTH( 896 ))
koa_mult_h1_add_8kbM_U62(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_134_p0),
    .din1(grp_fu_134_p1),
    .ce(1'b1),
    .dout(grp_fu_134_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_bc_mult_1_fu_57_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_bc_mult_1_fu_57_ap_start_reg <= 1'b1;
        end else if ((grp_bc_mult_1_fu_57_ap_ready == 1'b1)) begin
            grp_bc_mult_1_fu_57_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_bc_mult_2_fu_47_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_bc_mult_2_fu_47_ap_start_reg <= 1'b1;
        end else if ((grp_bc_mult_2_fu_47_ap_ready == 1'b1)) begin
            grp_bc_mult_2_fu_47_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_bc_mult_fu_52_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_bc_mult_fu_52_ap_start_reg <= 1'b1;
        end else if ((grp_bc_mult_fu_52_ap_ready == 1'b1)) begin
            grp_bc_mult_fu_52_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        a0_V_reg_156 <= grp_bc_mult_fu_52_ap_return;
        a2_V_reg_161 <= grp_bc_mult_1_fu_57_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ah_V_reg_141 <= {{a_V[447:224]}};
        ahl_V_reg_151 <= ahl_V_fu_86_p2;
        al_V_reg_146 <= al_V_fu_73_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        c_V_ap_vld = 1'b1;
    end else begin
        c_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2)))) begin
        grp_fu_101_ce = 1'b1;
    end else begin
        grp_fu_101_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ah_V_fu_62_p4 = {{a_V[447:224]}};

assign ahl_V_fu_86_p2 = ($signed(sext_ln68_1_fu_82_p1) + $signed(sext_ln68_fu_78_p1));

assign al_V_fu_73_p1 = a_V[223:0];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state2_on_subcall_done = ((grp_bc_mult_2_fu_47_ap_done == 1'b0) | (grp_bc_mult_1_fu_57_ap_done == 1'b0) | (grp_bc_mult_fu_52_ap_done == 1'b0));
end

assign c_V = grp_fu_134_p2;

assign grp_bc_mult_1_fu_57_ap_start = grp_bc_mult_1_fu_57_ap_start_reg;

assign grp_bc_mult_2_fu_47_ap_start = grp_bc_mult_2_fu_47_ap_start_reg;

assign grp_bc_mult_fu_52_ap_start = grp_bc_mult_fu_52_ap_start_reg;

assign grp_fu_101_p0 = grp_bc_mult_2_fu_47_ap_return;

assign grp_fu_101_p1 = grp_bc_mult_fu_52_ap_return;

assign grp_fu_110_p1 = a2_V_reg_161;

assign grp_fu_134_p0 = $signed(r_V_fu_116_p3);

assign grp_fu_134_p1 = {{a0_V_reg_156}, {a2_V_reg_161}};

assign r_V_fu_116_p3 = {{grp_fu_110_p2}, {224'd0}};

assign sext_ln68_1_fu_82_p1 = al_V_fu_73_p1;

assign sext_ln68_fu_78_p1 = ah_V_fu_62_p4;

endmodule //koa_mult_h1
