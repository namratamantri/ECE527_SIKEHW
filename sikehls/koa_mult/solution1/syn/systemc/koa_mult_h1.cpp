// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "koa_mult_h1.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic koa_mult_h1::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic koa_mult_h1::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> koa_mult_h1::ap_ST_fsm_state1 = "1";
const sc_lv<5> koa_mult_h1::ap_ST_fsm_state2 = "10";
const sc_lv<5> koa_mult_h1::ap_ST_fsm_state3 = "100";
const sc_lv<5> koa_mult_h1::ap_ST_fsm_state4 = "1000";
const sc_lv<5> koa_mult_h1::ap_ST_fsm_state5 = "10000";
const sc_lv<32> koa_mult_h1::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> koa_mult_h1::ap_const_lv32_1 = "1";
const bool koa_mult_h1::ap_const_boolean_0 = false;
const sc_lv<32> koa_mult_h1::ap_const_lv32_2 = "10";
const sc_lv<32> koa_mult_h1::ap_const_lv32_3 = "11";
const sc_lv<32> koa_mult_h1::ap_const_lv32_4 = "100";
const sc_lv<32> koa_mult_h1::ap_const_lv32_E0 = "11100000";
const sc_lv<32> koa_mult_h1::ap_const_lv32_1BF = "110111111";
const sc_lv<224> koa_mult_h1::ap_const_lv224_lc_1 = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const bool koa_mult_h1::ap_const_boolean_1 = true;

koa_mult_h1::koa_mult_h1(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_bc_mult_2_fu_47 = new bc_mult_2("grp_bc_mult_2_fu_47");
    grp_bc_mult_2_fu_47->ap_clk(ap_clk);
    grp_bc_mult_2_fu_47->ap_rst(ap_rst);
    grp_bc_mult_2_fu_47->ap_start(grp_bc_mult_2_fu_47_ap_start);
    grp_bc_mult_2_fu_47->ap_done(grp_bc_mult_2_fu_47_ap_done);
    grp_bc_mult_2_fu_47->ap_idle(grp_bc_mult_2_fu_47_ap_idle);
    grp_bc_mult_2_fu_47->ap_ready(grp_bc_mult_2_fu_47_ap_ready);
    grp_bc_mult_2_fu_47->ta_V(ahl_V_reg_151);
    grp_bc_mult_2_fu_47->ap_return(grp_bc_mult_2_fu_47_ap_return);
    grp_bc_mult_fu_52 = new bc_mult("grp_bc_mult_fu_52");
    grp_bc_mult_fu_52->ap_clk(ap_clk);
    grp_bc_mult_fu_52->ap_rst(ap_rst);
    grp_bc_mult_fu_52->ap_start(grp_bc_mult_fu_52_ap_start);
    grp_bc_mult_fu_52->ap_done(grp_bc_mult_fu_52_ap_done);
    grp_bc_mult_fu_52->ap_idle(grp_bc_mult_fu_52_ap_idle);
    grp_bc_mult_fu_52->ap_ready(grp_bc_mult_fu_52_ap_ready);
    grp_bc_mult_fu_52->ta_V(ah_V_reg_141);
    grp_bc_mult_fu_52->ap_return(grp_bc_mult_fu_52_ap_return);
    grp_bc_mult_1_fu_57 = new bc_mult_1("grp_bc_mult_1_fu_57");
    grp_bc_mult_1_fu_57->ap_clk(ap_clk);
    grp_bc_mult_1_fu_57->ap_rst(ap_rst);
    grp_bc_mult_1_fu_57->ap_start(grp_bc_mult_1_fu_57_ap_start);
    grp_bc_mult_1_fu_57->ap_done(grp_bc_mult_1_fu_57_ap_done);
    grp_bc_mult_1_fu_57->ap_idle(grp_bc_mult_1_fu_57_ap_idle);
    grp_bc_mult_1_fu_57->ap_ready(grp_bc_mult_1_fu_57_ap_ready);
    grp_bc_mult_1_fu_57->ta_V(al_V_reg_146);
    grp_bc_mult_1_fu_57->ap_return(grp_bc_mult_1_fu_57_ap_return);
    koa_mult_h1_sub_4jbC_U60 = new koa_mult_h1_sub_4jbC<1,2,451,451,451>("koa_mult_h1_sub_4jbC_U60");
    koa_mult_h1_sub_4jbC_U60->clk(ap_clk);
    koa_mult_h1_sub_4jbC_U60->reset(ap_rst);
    koa_mult_h1_sub_4jbC_U60->din0(grp_fu_101_p0);
    koa_mult_h1_sub_4jbC_U60->din1(grp_fu_101_p1);
    koa_mult_h1_sub_4jbC_U60->ce(grp_fu_101_ce);
    koa_mult_h1_sub_4jbC_U60->dout(grp_fu_101_p2);
    koa_mult_h1_sub_4jbC_U61 = new koa_mult_h1_sub_4jbC<1,2,451,451,451>("koa_mult_h1_sub_4jbC_U61");
    koa_mult_h1_sub_4jbC_U61->clk(ap_clk);
    koa_mult_h1_sub_4jbC_U61->reset(ap_rst);
    koa_mult_h1_sub_4jbC_U61->din0(grp_fu_101_p2);
    koa_mult_h1_sub_4jbC_U61->din1(grp_fu_110_p1);
    koa_mult_h1_sub_4jbC_U61->ce(ap_var_for_const0);
    koa_mult_h1_sub_4jbC_U61->dout(grp_fu_110_p2);
    koa_mult_h1_add_8kbM_U62 = new koa_mult_h1_add_8kbM<1,2,896,896,896>("koa_mult_h1_add_8kbM_U62");
    koa_mult_h1_add_8kbM_U62->clk(ap_clk);
    koa_mult_h1_add_8kbM_U62->reset(ap_rst);
    koa_mult_h1_add_8kbM_U62->din0(grp_fu_134_p0);
    koa_mult_h1_add_8kbM_U62->din1(grp_fu_134_p1);
    koa_mult_h1_add_8kbM_U62->ce(ap_var_for_const0);
    koa_mult_h1_add_8kbM_U62->dout(grp_fu_134_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ah_V_fu_62_p4);
    sensitive << ( a_V );

    SC_METHOD(thread_ahl_V_fu_86_p2);
    sensitive << ( sext_ln68_1_fu_82_p1 );
    sensitive << ( sext_ln68_fu_78_p1 );

    SC_METHOD(thread_al_V_fu_73_p1);
    sensitive << ( a_V );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state2_on_subcall_done);
    sensitive << ( grp_bc_mult_fu_52_ap_done );
    sensitive << ( grp_bc_mult_1_fu_57_ap_done );
    sensitive << ( grp_bc_mult_2_fu_47_ap_done );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_c_V);
    sensitive << ( grp_fu_134_p2 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_c_V_ap_vld);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_grp_bc_mult_1_fu_57_ap_start);
    sensitive << ( grp_bc_mult_1_fu_57_ap_start_reg );

    SC_METHOD(thread_grp_bc_mult_2_fu_47_ap_start);
    sensitive << ( grp_bc_mult_2_fu_47_ap_start_reg );

    SC_METHOD(thread_grp_bc_mult_fu_52_ap_start);
    sensitive << ( grp_bc_mult_fu_52_ap_start_reg );

    SC_METHOD(thread_grp_fu_101_ce);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_state2_on_subcall_done );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_grp_fu_101_p0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_bc_mult_2_fu_47_ap_return );

    SC_METHOD(thread_grp_fu_101_p1);
    sensitive << ( grp_bc_mult_fu_52_ap_return );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_grp_fu_110_p1);
    sensitive << ( a2_V_reg_161 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_grp_fu_134_p0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( r_V_fu_116_p3 );

    SC_METHOD(thread_grp_fu_134_p1);
    sensitive << ( a0_V_reg_156 );
    sensitive << ( a2_V_reg_161 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_r_V_fu_116_p3);
    sensitive << ( grp_fu_110_p2 );

    SC_METHOD(thread_sext_ln68_1_fu_82_p1);
    sensitive << ( al_V_fu_73_p1 );

    SC_METHOD(thread_sext_ln68_fu_78_p1);
    sensitive << ( ah_V_fu_62_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_state2_on_subcall_done );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "00001";
    grp_bc_mult_2_fu_47_ap_start_reg = SC_LOGIC_0;
    grp_bc_mult_fu_52_ap_start_reg = SC_LOGIC_0;
    grp_bc_mult_1_fu_57_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "koa_mult_h1_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, a_V, "(port)a_V");
    sc_trace(mVcdFile, b_V, "(port)b_V");
    sc_trace(mVcdFile, c_V, "(port)c_V");
    sc_trace(mVcdFile, c_V_ap_vld, "(port)c_V_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ah_V_fu_62_p4, "ah_V_fu_62_p4");
    sc_trace(mVcdFile, ah_V_reg_141, "ah_V_reg_141");
    sc_trace(mVcdFile, al_V_fu_73_p1, "al_V_fu_73_p1");
    sc_trace(mVcdFile, al_V_reg_146, "al_V_reg_146");
    sc_trace(mVcdFile, ahl_V_fu_86_p2, "ahl_V_fu_86_p2");
    sc_trace(mVcdFile, ahl_V_reg_151, "ahl_V_reg_151");
    sc_trace(mVcdFile, grp_bc_mult_fu_52_ap_return, "grp_bc_mult_fu_52_ap_return");
    sc_trace(mVcdFile, a0_V_reg_156, "a0_V_reg_156");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, grp_bc_mult_fu_52_ap_ready, "grp_bc_mult_fu_52_ap_ready");
    sc_trace(mVcdFile, grp_bc_mult_fu_52_ap_done, "grp_bc_mult_fu_52_ap_done");
    sc_trace(mVcdFile, grp_bc_mult_1_fu_57_ap_ready, "grp_bc_mult_1_fu_57_ap_ready");
    sc_trace(mVcdFile, grp_bc_mult_1_fu_57_ap_done, "grp_bc_mult_1_fu_57_ap_done");
    sc_trace(mVcdFile, grp_bc_mult_2_fu_47_ap_ready, "grp_bc_mult_2_fu_47_ap_ready");
    sc_trace(mVcdFile, grp_bc_mult_2_fu_47_ap_done, "grp_bc_mult_2_fu_47_ap_done");
    sc_trace(mVcdFile, ap_block_state2_on_subcall_done, "ap_block_state2_on_subcall_done");
    sc_trace(mVcdFile, grp_bc_mult_1_fu_57_ap_return, "grp_bc_mult_1_fu_57_ap_return");
    sc_trace(mVcdFile, a2_V_reg_161, "a2_V_reg_161");
    sc_trace(mVcdFile, grp_fu_101_p2, "grp_fu_101_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, grp_bc_mult_2_fu_47_ap_start, "grp_bc_mult_2_fu_47_ap_start");
    sc_trace(mVcdFile, grp_bc_mult_2_fu_47_ap_idle, "grp_bc_mult_2_fu_47_ap_idle");
    sc_trace(mVcdFile, grp_bc_mult_2_fu_47_ap_return, "grp_bc_mult_2_fu_47_ap_return");
    sc_trace(mVcdFile, grp_bc_mult_fu_52_ap_start, "grp_bc_mult_fu_52_ap_start");
    sc_trace(mVcdFile, grp_bc_mult_fu_52_ap_idle, "grp_bc_mult_fu_52_ap_idle");
    sc_trace(mVcdFile, grp_bc_mult_1_fu_57_ap_start, "grp_bc_mult_1_fu_57_ap_start");
    sc_trace(mVcdFile, grp_bc_mult_1_fu_57_ap_idle, "grp_bc_mult_1_fu_57_ap_idle");
    sc_trace(mVcdFile, grp_bc_mult_2_fu_47_ap_start_reg, "grp_bc_mult_2_fu_47_ap_start_reg");
    sc_trace(mVcdFile, grp_bc_mult_fu_52_ap_start_reg, "grp_bc_mult_fu_52_ap_start_reg");
    sc_trace(mVcdFile, grp_bc_mult_1_fu_57_ap_start_reg, "grp_bc_mult_1_fu_57_ap_start_reg");
    sc_trace(mVcdFile, grp_fu_134_p2, "grp_fu_134_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, sext_ln68_1_fu_82_p1, "sext_ln68_1_fu_82_p1");
    sc_trace(mVcdFile, sext_ln68_fu_78_p1, "sext_ln68_fu_78_p1");
    sc_trace(mVcdFile, grp_fu_101_p0, "grp_fu_101_p0");
    sc_trace(mVcdFile, grp_fu_101_p1, "grp_fu_101_p1");
    sc_trace(mVcdFile, grp_fu_110_p1, "grp_fu_110_p1");
    sc_trace(mVcdFile, grp_fu_110_p2, "grp_fu_110_p2");
    sc_trace(mVcdFile, r_V_fu_116_p3, "r_V_fu_116_p3");
    sc_trace(mVcdFile, grp_fu_134_p0, "grp_fu_134_p0");
    sc_trace(mVcdFile, grp_fu_134_p1, "grp_fu_134_p1");
    sc_trace(mVcdFile, grp_fu_101_ce, "grp_fu_101_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("koa_mult_h1.hdltvin.dat");
    mHdltvoutHandle.open("koa_mult_h1.hdltvout.dat");
}

koa_mult_h1::~koa_mult_h1() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete grp_bc_mult_2_fu_47;
    delete grp_bc_mult_fu_52;
    delete grp_bc_mult_1_fu_57;
    delete koa_mult_h1_sub_4jbC_U60;
    delete koa_mult_h1_sub_4jbC_U61;
    delete koa_mult_h1_add_8kbM_U62;
}

void koa_mult_h1::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void koa_mult_h1::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_bc_mult_1_fu_57_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            grp_bc_mult_1_fu_57_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_bc_mult_1_fu_57_ap_ready.read())) {
            grp_bc_mult_1_fu_57_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_bc_mult_2_fu_47_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            grp_bc_mult_2_fu_47_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_bc_mult_2_fu_47_ap_ready.read())) {
            grp_bc_mult_2_fu_47_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_bc_mult_fu_52_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            grp_bc_mult_fu_52_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_bc_mult_fu_52_ap_ready.read())) {
            grp_bc_mult_fu_52_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_block_state2_on_subcall_done.read(), ap_const_boolean_0))) {
        a0_V_reg_156 = grp_bc_mult_fu_52_ap_return.read();
        a2_V_reg_161 = grp_bc_mult_1_fu_57_ap_return.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ah_V_reg_141 = a_V.read().range(447, 224);
        ahl_V_reg_151 = ahl_V_fu_86_p2.read();
        al_V_reg_146 = al_V_fu_73_p1.read();
    }
}

void koa_mult_h1::thread_ah_V_fu_62_p4() {
    ah_V_fu_62_p4 = a_V.read().range(447, 224);
}

void koa_mult_h1::thread_ahl_V_fu_86_p2() {
    ahl_V_fu_86_p2 = (!sext_ln68_1_fu_82_p1.read().is_01() || !sext_ln68_fu_78_p1.read().is_01())? sc_lv<225>(): (sc_bigint<225>(sext_ln68_1_fu_82_p1.read()) + sc_bigint<225>(sext_ln68_fu_78_p1.read()));
}

void koa_mult_h1::thread_al_V_fu_73_p1() {
    al_V_fu_73_p1 = a_V.read().range(224-1, 0);
}

void koa_mult_h1::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void koa_mult_h1::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void koa_mult_h1::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void koa_mult_h1::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void koa_mult_h1::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void koa_mult_h1::thread_ap_block_state2_on_subcall_done() {
    ap_block_state2_on_subcall_done = (esl_seteq<1,1,1>(ap_const_logic_0, grp_bc_mult_fu_52_ap_done.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_bc_mult_1_fu_57_ap_done.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_bc_mult_2_fu_47_ap_done.read()));
}

void koa_mult_h1::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void koa_mult_h1::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void koa_mult_h1::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void koa_mult_h1::thread_c_V() {
    c_V = grp_fu_134_p2.read();
}

void koa_mult_h1::thread_c_V_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        c_V_ap_vld = ap_const_logic_1;
    } else {
        c_V_ap_vld = ap_const_logic_0;
    }
}

void koa_mult_h1::thread_grp_bc_mult_1_fu_57_ap_start() {
    grp_bc_mult_1_fu_57_ap_start = grp_bc_mult_1_fu_57_ap_start_reg.read();
}

void koa_mult_h1::thread_grp_bc_mult_2_fu_47_ap_start() {
    grp_bc_mult_2_fu_47_ap_start = grp_bc_mult_2_fu_47_ap_start_reg.read();
}

void koa_mult_h1::thread_grp_bc_mult_fu_52_ap_start() {
    grp_bc_mult_fu_52_ap_start = grp_bc_mult_fu_52_ap_start_reg.read();
}

void koa_mult_h1::thread_grp_fu_101_ce() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_block_state2_on_subcall_done.read(), ap_const_boolean_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        grp_fu_101_ce = ap_const_logic_1;
    } else {
        grp_fu_101_ce = ap_const_logic_0;
    }
}

void koa_mult_h1::thread_grp_fu_101_p0() {
    grp_fu_101_p0 = esl_zext<451,450>(grp_bc_mult_2_fu_47_ap_return.read());
}

void koa_mult_h1::thread_grp_fu_101_p1() {
    grp_fu_101_p1 = esl_zext<451,448>(grp_bc_mult_fu_52_ap_return.read());
}

void koa_mult_h1::thread_grp_fu_110_p1() {
    grp_fu_110_p1 = esl_zext<451,448>(a2_V_reg_161.read());
}

void koa_mult_h1::thread_grp_fu_134_p0() {
    grp_fu_134_p0 = esl_sext<896,675>(r_V_fu_116_p3.read());
}

void koa_mult_h1::thread_grp_fu_134_p1() {
    grp_fu_134_p1 = esl_concat<448,448>(a0_V_reg_156.read(), a2_V_reg_161.read());
}

void koa_mult_h1::thread_r_V_fu_116_p3() {
    r_V_fu_116_p3 = esl_concat<451,224>(grp_fu_110_p2.read(), ap_const_lv224_lc_1);
}

void koa_mult_h1::thread_sext_ln68_1_fu_82_p1() {
    sext_ln68_1_fu_82_p1 = esl_sext<225,224>(al_V_fu_73_p1.read());
}

void koa_mult_h1::thread_sext_ln68_fu_78_p1() {
    sext_ln68_fu_78_p1 = esl_sext<225,224>(ah_V_fu_62_p4.read());
}

void koa_mult_h1::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_block_state2_on_subcall_done.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXXX";
            break;
    }
}

void koa_mult_h1::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_V\" :  \"" << a_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b_V\" :  \"" << b_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_V\" :  \"" << c_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_V_ap_vld\" :  \"" << c_V_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

