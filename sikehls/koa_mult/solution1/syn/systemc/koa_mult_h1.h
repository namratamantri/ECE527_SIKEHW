// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _koa_mult_h1_HH_
#define _koa_mult_h1_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "bc_mult_2.h"
#include "bc_mult.h"
#include "bc_mult_1.h"
#include "koa_mult_h1_sub_4jbC.h"
#include "koa_mult_h1_add_8kbM.h"

namespace ap_rtl {

struct koa_mult_h1 : public sc_module {
    // Port declarations 10
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<448> > a_V;
    sc_in< sc_lv<448> > b_V;
    sc_out< sc_lv<896> > c_V;
    sc_out< sc_logic > c_V_ap_vld;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    koa_mult_h1(sc_module_name name);
    SC_HAS_PROCESS(koa_mult_h1);

    ~koa_mult_h1();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    bc_mult_2* grp_bc_mult_2_fu_47;
    bc_mult* grp_bc_mult_fu_52;
    bc_mult_1* grp_bc_mult_1_fu_57;
    koa_mult_h1_sub_4jbC<1,2,451,451,451>* koa_mult_h1_sub_4jbC_U60;
    koa_mult_h1_sub_4jbC<1,2,451,451,451>* koa_mult_h1_sub_4jbC_U61;
    koa_mult_h1_add_8kbM<1,2,896,896,896>* koa_mult_h1_add_8kbM_U62;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<224> > ah_V_fu_62_p4;
    sc_signal< sc_lv<224> > ah_V_reg_141;
    sc_signal< sc_lv<224> > al_V_fu_73_p1;
    sc_signal< sc_lv<224> > al_V_reg_146;
    sc_signal< sc_lv<225> > ahl_V_fu_86_p2;
    sc_signal< sc_lv<225> > ahl_V_reg_151;
    sc_signal< sc_lv<448> > grp_bc_mult_fu_52_ap_return;
    sc_signal< sc_lv<448> > a0_V_reg_156;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > grp_bc_mult_fu_52_ap_ready;
    sc_signal< sc_logic > grp_bc_mult_fu_52_ap_done;
    sc_signal< sc_logic > grp_bc_mult_1_fu_57_ap_ready;
    sc_signal< sc_logic > grp_bc_mult_1_fu_57_ap_done;
    sc_signal< sc_logic > grp_bc_mult_2_fu_47_ap_ready;
    sc_signal< sc_logic > grp_bc_mult_2_fu_47_ap_done;
    sc_signal< bool > ap_block_state2_on_subcall_done;
    sc_signal< sc_lv<448> > grp_bc_mult_1_fu_57_ap_return;
    sc_signal< sc_lv<448> > a2_V_reg_161;
    sc_signal< sc_lv<451> > grp_fu_101_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > grp_bc_mult_2_fu_47_ap_start;
    sc_signal< sc_logic > grp_bc_mult_2_fu_47_ap_idle;
    sc_signal< sc_lv<450> > grp_bc_mult_2_fu_47_ap_return;
    sc_signal< sc_logic > grp_bc_mult_fu_52_ap_start;
    sc_signal< sc_logic > grp_bc_mult_fu_52_ap_idle;
    sc_signal< sc_logic > grp_bc_mult_1_fu_57_ap_start;
    sc_signal< sc_logic > grp_bc_mult_1_fu_57_ap_idle;
    sc_signal< sc_logic > grp_bc_mult_2_fu_47_ap_start_reg;
    sc_signal< sc_logic > grp_bc_mult_fu_52_ap_start_reg;
    sc_signal< sc_logic > grp_bc_mult_1_fu_57_ap_start_reg;
    sc_signal< sc_lv<896> > grp_fu_134_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<225> > sext_ln68_1_fu_82_p1;
    sc_signal< sc_lv<225> > sext_ln68_fu_78_p1;
    sc_signal< sc_lv<451> > grp_fu_101_p0;
    sc_signal< sc_lv<451> > grp_fu_101_p1;
    sc_signal< sc_lv<451> > grp_fu_110_p1;
    sc_signal< sc_lv<451> > grp_fu_110_p2;
    sc_signal< sc_lv<675> > r_V_fu_116_p3;
    sc_signal< sc_lv<896> > grp_fu_134_p0;
    sc_signal< sc_lv<896> > grp_fu_134_p1;
    sc_signal< sc_logic > grp_fu_101_ce;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_E0;
    static const sc_lv<32> ap_const_lv32_1BF;
    static const sc_lv<224> ap_const_lv224_lc_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ah_V_fu_62_p4();
    void thread_ahl_V_fu_86_p2();
    void thread_al_V_fu_73_p1();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_state2_on_subcall_done();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_c_V();
    void thread_c_V_ap_vld();
    void thread_grp_bc_mult_1_fu_57_ap_start();
    void thread_grp_bc_mult_2_fu_47_ap_start();
    void thread_grp_bc_mult_fu_52_ap_start();
    void thread_grp_fu_101_ce();
    void thread_grp_fu_101_p0();
    void thread_grp_fu_101_p1();
    void thread_grp_fu_110_p1();
    void thread_grp_fu_134_p0();
    void thread_grp_fu_134_p1();
    void thread_r_V_fu_116_p3();
    void thread_sext_ln68_1_fu_82_p1();
    void thread_sext_ln68_fu_78_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
