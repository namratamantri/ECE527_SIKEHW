// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bc_mult (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ta_V,
        ap_return
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_pp0_stage0 = 7'd2;
parameter    ap_ST_fsm_state8 = 7'd4;
parameter    ap_ST_fsm_state9 = 7'd8;
parameter    ap_ST_fsm_state10 = 7'd16;
parameter    ap_ST_fsm_state11 = 7'd32;
parameter    ap_ST_fsm_state12 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [223:0] ta_V;
output  [447:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[447:0] ap_return;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] i7_0_reg_154;
wire   [63:0] ai_0_V_fu_224_p1;
reg   [63:0] ai_0_V_reg_757;
wire   [63:0] ai_1_V_fu_228_p4;
reg   [63:0] ai_1_V_reg_762;
wire   [63:0] ai_2_V_fu_238_p4;
reg   [63:0] ai_2_V_reg_767;
wire  signed [63:0] ai_3_V_fu_258_p1;
reg  signed [63:0] ai_3_V_reg_772;
wire   [127:0] zext_ln215_fu_262_p1;
reg   [127:0] zext_ln215_reg_777;
wire   [127:0] zext_ln215_10_fu_266_p1;
reg   [127:0] zext_ln215_10_reg_782;
wire   [127:0] zext_ln215_11_fu_270_p1;
reg   [127:0] zext_ln215_11_reg_787;
wire   [127:0] zext_ln215_12_fu_274_p1;
reg   [127:0] zext_ln215_12_reg_792;
wire   [0:0] icmp_ln202_fu_278_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_pp0_stage0_11001;
wire   [2:0] i_3_fu_284_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [1:0] trunc_ln215_fu_290_p1;
reg   [1:0] trunc_ln215_reg_806;
reg   [1:0] trunc_ln215_reg_806_pp0_iter1_reg;
reg   [1:0] trunc_ln215_reg_806_pp0_iter2_reg;
reg   [1:0] trunc_ln215_reg_806_pp0_iter3_reg;
reg   [1:0] trunc_ln215_reg_806_pp0_iter4_reg;
wire   [63:0] tmp_3_fu_294_p6;
reg   [63:0] tmp_3_reg_810;
wire   [127:0] zext_ln215_9_fu_304_p1;
wire   [2:0] i_fu_453_p2;
reg   [2:0] i_reg_826;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln213_fu_447_p2;
wire   [322:0] grp_fu_529_p2;
wire    ap_CS_fsm_state10;
wire   [386:0] grp_fu_561_p2;
wire   [447:0] grp_fu_593_p2;
wire   [447:0] grp_fu_625_p2;
wire    ap_CS_fsm_state11;
wire   [447:0] grp_fu_645_p2;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg   [322:0] sum_V_0_0_reg_165;
wire    ap_CS_fsm_state8;
reg   [386:0] sum_V_1_0_reg_177;
reg   [447:0] sum_V_2_0_reg_189;
reg   [447:0] sum_V_3_0_reg_201;
reg   [2:0] i8_0_reg_213;
reg   [320:0] partial_products_3_25_fu_84;
wire   [320:0] partial_products_0_19_fu_327_p1;
reg   [320:0] partial_products_0_24_fu_88;
wire   [320:0] zext_ln1503_fu_339_p1;
reg   [320:0] partial_products_0_23_fu_92;
wire   [320:0] zext_ln1503_8_fu_351_p1;
reg   [320:0] partial_products_0_s_fu_96;
wire   [320:0] zext_ln1503_9_fu_363_p1;
reg   [320:0] partial_products_3_26_fu_100;
reg   [320:0] partial_products_1_16_fu_104;
reg   [320:0] partial_products_1_15_fu_108;
reg   [320:0] partial_products_1_s_fu_112;
reg   [320:0] partial_products_3_27_fu_116;
reg   [320:0] partial_products_2_16_fu_120;
reg   [320:0] partial_products_2_15_fu_124;
reg   [320:0] partial_products_2_s_fu_128;
reg   [320:0] partial_products_3_28_fu_132;
reg   [320:0] partial_products_3_16_fu_136;
reg   [320:0] partial_products_3_15_fu_140;
reg   [320:0] partial_products_3_s_fu_144;
wire   [31:0] tmp_fu_248_p4;
wire    ap_block_pp0_stage0;
wire   [1:0] tmp_3_fu_294_p5;
wire   [63:0] grp_fu_307_p0;
wire   [63:0] grp_fu_307_p1;
wire   [63:0] grp_fu_312_p0;
wire   [63:0] grp_fu_312_p1;
wire   [63:0] grp_fu_317_p0;
wire   [63:0] grp_fu_317_p1;
wire   [63:0] grp_fu_322_p0;
wire   [63:0] grp_fu_322_p1;
wire   [127:0] grp_fu_307_p2;
wire   [127:0] grp_fu_312_p2;
wire   [191:0] partial_products_0_20_fu_331_p3;
wire   [127:0] grp_fu_317_p2;
wire   [255:0] partial_products_0_21_fu_343_p3;
wire   [127:0] grp_fu_322_p2;
wire   [319:0] partial_products_0_22_fu_355_p3;
wire   [1:0] trunc_ln209_fu_507_p1;
wire   [320:0] tmp_4_fu_511_p6;
wire   [322:0] grp_fu_529_p0;
wire   [320:0] tmp_5_fu_535_p6;
wire   [384:0] shl_ln_fu_549_p3;
wire   [386:0] grp_fu_561_p0;
wire   [320:0] tmp_6_fu_567_p6;
wire   [319:0] trunc_ln1503_fu_581_p1;
wire   [447:0] grp_fu_593_p0;
wire   [320:0] tmp_7_fu_599_p6;
wire   [255:0] trunc_ln1503_2_fu_613_p1;
wire   [447:0] grp_fu_625_p0;
wire   [387:0] grp_fu_639_p0;
wire   [387:0] grp_fu_639_p1;
wire   [387:0] grp_fu_639_p2;
wire   [447:0] grp_fu_655_p1;
wire   [447:0] grp_fu_655_p2;
reg   [447:0] ap_return_preg;
wire    ap_CS_fsm_state12;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_return_preg = 448'd0;
end

koa_mult_h1_mux_4bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
koa_mult_h1_mux_4bkb_U1(
    .din0(ai_0_V_reg_757),
    .din1(ai_1_V_reg_762),
    .din2(ai_2_V_reg_767),
    .din3(ai_3_V_reg_772),
    .din4(tmp_3_fu_294_p5),
    .dout(tmp_3_fu_294_p6)
);

koa_mult_h1_mul_6cud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
koa_mult_h1_mul_6cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_307_p0),
    .din1(grp_fu_307_p1),
    .ce(1'b1),
    .dout(grp_fu_307_p2)
);

koa_mult_h1_mul_6cud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
koa_mult_h1_mul_6cud_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_312_p0),
    .din1(grp_fu_312_p1),
    .ce(1'b1),
    .dout(grp_fu_312_p2)
);

koa_mult_h1_mul_6cud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
koa_mult_h1_mul_6cud_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_317_p0),
    .din1(grp_fu_317_p1),
    .ce(1'b1),
    .dout(grp_fu_317_p2)
);

koa_mult_h1_mul_6cud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
koa_mult_h1_mul_6cud_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_322_p0),
    .din1(grp_fu_322_p1),
    .ce(1'b1),
    .dout(grp_fu_322_p2)
);

koa_mult_h1_mux_4dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 321 ),
    .din1_WIDTH( 321 ),
    .din2_WIDTH( 321 ),
    .din3_WIDTH( 321 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 321 ))
koa_mult_h1_mux_4dEe_U6(
    .din0(partial_products_3_25_fu_84),
    .din1(partial_products_0_24_fu_88),
    .din2(partial_products_0_23_fu_92),
    .din3(partial_products_0_s_fu_96),
    .din4(trunc_ln209_fu_507_p1),
    .dout(tmp_4_fu_511_p6)
);

koa_mult_h1_add_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 323 ),
    .din1_WIDTH( 323 ),
    .dout_WIDTH( 323 ))
koa_mult_h1_add_3eOg_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_529_p0),
    .din1(sum_V_0_0_reg_165),
    .ce(1'b1),
    .dout(grp_fu_529_p2)
);

koa_mult_h1_mux_4dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 321 ),
    .din1_WIDTH( 321 ),
    .din2_WIDTH( 321 ),
    .din3_WIDTH( 321 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 321 ))
koa_mult_h1_mux_4dEe_U8(
    .din0(partial_products_3_26_fu_100),
    .din1(partial_products_1_16_fu_104),
    .din2(partial_products_1_15_fu_108),
    .din3(partial_products_1_s_fu_112),
    .din4(trunc_ln209_fu_507_p1),
    .dout(tmp_5_fu_535_p6)
);

koa_mult_h1_add_3fYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 387 ),
    .din1_WIDTH( 387 ),
    .dout_WIDTH( 387 ))
koa_mult_h1_add_3fYi_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_561_p0),
    .din1(sum_V_1_0_reg_177),
    .ce(1'b1),
    .dout(grp_fu_561_p2)
);

koa_mult_h1_mux_4dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 321 ),
    .din1_WIDTH( 321 ),
    .din2_WIDTH( 321 ),
    .din3_WIDTH( 321 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 321 ))
koa_mult_h1_mux_4dEe_U10(
    .din0(partial_products_3_27_fu_116),
    .din1(partial_products_2_16_fu_120),
    .din2(partial_products_2_15_fu_124),
    .din3(partial_products_2_s_fu_128),
    .din4(trunc_ln209_fu_507_p1),
    .dout(tmp_6_fu_567_p6)
);

koa_mult_h1_add_4g8j #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 448 ),
    .din1_WIDTH( 448 ),
    .dout_WIDTH( 448 ))
koa_mult_h1_add_4g8j_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_593_p0),
    .din1(sum_V_2_0_reg_189),
    .ce(1'b1),
    .dout(grp_fu_593_p2)
);

koa_mult_h1_mux_4dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 321 ),
    .din1_WIDTH( 321 ),
    .din2_WIDTH( 321 ),
    .din3_WIDTH( 321 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 321 ))
koa_mult_h1_mux_4dEe_U12(
    .din0(partial_products_3_28_fu_132),
    .din1(partial_products_3_16_fu_136),
    .din2(partial_products_3_15_fu_140),
    .din3(partial_products_3_s_fu_144),
    .din4(trunc_ln209_fu_507_p1),
    .dout(tmp_7_fu_599_p6)
);

koa_mult_h1_add_4g8j #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 448 ),
    .din1_WIDTH( 448 ),
    .dout_WIDTH( 448 ))
koa_mult_h1_add_4g8j_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_625_p0),
    .din1(sum_V_3_0_reg_201),
    .ce(1'b1),
    .dout(grp_fu_625_p2)
);

koa_mult_h1_add_3hbi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 388 ),
    .din1_WIDTH( 388 ),
    .dout_WIDTH( 388 ))
koa_mult_h1_add_3hbi_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_639_p0),
    .din1(grp_fu_639_p1),
    .ce(1'b1),
    .dout(grp_fu_639_p2)
);

koa_mult_h1_add_4g8j #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 448 ),
    .din1_WIDTH( 448 ),
    .dout_WIDTH( 448 ))
koa_mult_h1_add_4g8j_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_V_2_0_reg_189),
    .din1(sum_V_3_0_reg_201),
    .ce(1'b1),
    .dout(grp_fu_645_p2)
);

koa_mult_h1_add_4g8j #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 448 ),
    .din1_WIDTH( 448 ),
    .dout_WIDTH( 448 ))
koa_mult_h1_add_4g8j_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_645_p2),
    .din1(grp_fu_655_p1),
    .ce(1'b1),
    .dout(grp_fu_655_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 448'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_return_preg <= grp_fu_655_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln202_fu_278_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i7_0_reg_154 <= i_3_fu_284_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i7_0_reg_154 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i8_0_reg_213 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        i8_0_reg_213 <= i_reg_826;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sum_V_0_0_reg_165 <= 323'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        sum_V_0_0_reg_165 <= grp_fu_529_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sum_V_1_0_reg_177 <= 387'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        sum_V_1_0_reg_177 <= grp_fu_561_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sum_V_2_0_reg_189 <= 448'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        sum_V_2_0_reg_189 <= grp_fu_593_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sum_V_3_0_reg_201 <= 448'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        sum_V_3_0_reg_201 <= grp_fu_625_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ai_0_V_reg_757 <= ai_0_V_fu_224_p1;
        ai_1_V_reg_762 <= {{ta_V[127:64]}};
        ai_2_V_reg_767 <= {{ta_V[191:128]}};
        ai_3_V_reg_772 <= ai_3_V_fu_258_p1;
        zext_ln215_10_reg_782[63 : 0] <= zext_ln215_10_fu_266_p1[63 : 0];
        zext_ln215_11_reg_787[63 : 0] <= zext_ln215_11_fu_270_p1[63 : 0];
        zext_ln215_12_reg_792[63 : 0] <= zext_ln215_12_fu_274_p1[63 : 0];
        zext_ln215_reg_777[63 : 0] <= zext_ln215_fu_262_p1[63 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_reg_826 <= i_fu_453_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln215_reg_806_pp0_iter4_reg == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        partial_products_0_23_fu_92[255 : 128] <= zext_ln1503_8_fu_351_p1[255 : 128];
        partial_products_0_24_fu_88[191 : 64] <= zext_ln1503_fu_339_p1[191 : 64];
        partial_products_0_s_fu_96[319 : 192] <= zext_ln1503_9_fu_363_p1[319 : 192];
        partial_products_3_25_fu_84[127 : 0] <= partial_products_0_19_fu_327_p1[127 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln215_reg_806_pp0_iter4_reg == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        partial_products_1_15_fu_108[255 : 128] <= zext_ln1503_8_fu_351_p1[255 : 128];
        partial_products_1_16_fu_104[191 : 64] <= zext_ln1503_fu_339_p1[191 : 64];
        partial_products_1_s_fu_112[319 : 192] <= zext_ln1503_9_fu_363_p1[319 : 192];
        partial_products_3_26_fu_100[127 : 0] <= partial_products_0_19_fu_327_p1[127 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln215_reg_806_pp0_iter4_reg == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        partial_products_2_15_fu_124[255 : 128] <= zext_ln1503_8_fu_351_p1[255 : 128];
        partial_products_2_16_fu_120[191 : 64] <= zext_ln1503_fu_339_p1[191 : 64];
        partial_products_2_s_fu_128[319 : 192] <= zext_ln1503_9_fu_363_p1[319 : 192];
        partial_products_3_27_fu_116[127 : 0] <= partial_products_0_19_fu_327_p1[127 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln215_reg_806_pp0_iter4_reg == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        partial_products_3_15_fu_140[255 : 128] <= zext_ln1503_8_fu_351_p1[255 : 128];
        partial_products_3_16_fu_136[191 : 64] <= zext_ln1503_fu_339_p1[191 : 64];
        partial_products_3_28_fu_132[127 : 0] <= partial_products_0_19_fu_327_p1[127 : 0];
        partial_products_3_s_fu_144[319 : 192] <= zext_ln1503_9_fu_363_p1[319 : 192];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln202_fu_278_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_3_reg_810 <= tmp_3_fu_294_p6;
        trunc_ln215_reg_806 <= trunc_ln215_fu_290_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln215_reg_806_pp0_iter1_reg <= trunc_ln215_reg_806;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        trunc_ln215_reg_806_pp0_iter2_reg <= trunc_ln215_reg_806_pp0_iter1_reg;
        trunc_ln215_reg_806_pp0_iter3_reg <= trunc_ln215_reg_806_pp0_iter2_reg;
        trunc_ln215_reg_806_pp0_iter4_reg <= trunc_ln215_reg_806_pp0_iter3_reg;
    end
end

always @ (*) begin
    if ((icmp_ln202_fu_278_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_return = grp_fu_655_p2;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln202_fu_278_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter5 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln202_fu_278_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln213_fu_447_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ai_0_V_fu_224_p1 = ta_V[63:0];

assign ai_1_V_fu_228_p4 = {{ta_V[127:64]}};

assign ai_2_V_fu_238_p4 = {{ta_V[191:128]}};

assign ai_3_V_fu_258_p1 = $signed(tmp_fu_248_p4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_fu_307_p0 = zext_ln215_reg_777;

assign grp_fu_307_p1 = zext_ln215_9_fu_304_p1;

assign grp_fu_312_p0 = zext_ln215_10_reg_782;

assign grp_fu_312_p1 = zext_ln215_9_fu_304_p1;

assign grp_fu_317_p0 = zext_ln215_11_reg_787;

assign grp_fu_317_p1 = zext_ln215_9_fu_304_p1;

assign grp_fu_322_p0 = zext_ln215_12_reg_792;

assign grp_fu_322_p1 = zext_ln215_9_fu_304_p1;

assign grp_fu_529_p0 = tmp_4_fu_511_p6;

assign grp_fu_561_p0 = shl_ln_fu_549_p3;

assign grp_fu_593_p0 = {{trunc_ln1503_fu_581_p1}, {128'd0}};

assign grp_fu_625_p0 = {{trunc_ln1503_2_fu_613_p1}, {192'd0}};

assign grp_fu_639_p0 = sum_V_1_0_reg_177;

assign grp_fu_639_p1 = sum_V_0_0_reg_165;

assign grp_fu_655_p1 = grp_fu_639_p2;

assign i_3_fu_284_p2 = (i7_0_reg_154 + 3'd1);

assign i_fu_453_p2 = (i8_0_reg_213 + 3'd1);

assign icmp_ln202_fu_278_p2 = ((i7_0_reg_154 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln213_fu_447_p2 = ((i8_0_reg_213 == 3'd4) ? 1'b1 : 1'b0);

assign partial_products_0_19_fu_327_p1 = grp_fu_307_p2;

assign partial_products_0_20_fu_331_p3 = {{grp_fu_312_p2}, {64'd0}};

assign partial_products_0_21_fu_343_p3 = {{grp_fu_317_p2}, {128'd0}};

assign partial_products_0_22_fu_355_p3 = {{grp_fu_322_p2}, {192'd0}};

assign shl_ln_fu_549_p3 = {{tmp_5_fu_535_p6}, {64'd0}};

assign tmp_3_fu_294_p5 = i7_0_reg_154[1:0];

assign tmp_fu_248_p4 = {{ta_V[223:192]}};

assign trunc_ln1503_2_fu_613_p1 = tmp_7_fu_599_p6[255:0];

assign trunc_ln1503_fu_581_p1 = tmp_6_fu_567_p6[319:0];

assign trunc_ln209_fu_507_p1 = i8_0_reg_213[1:0];

assign trunc_ln215_fu_290_p1 = i7_0_reg_154[1:0];

assign zext_ln1503_8_fu_351_p1 = partial_products_0_21_fu_343_p3;

assign zext_ln1503_9_fu_363_p1 = partial_products_0_22_fu_355_p3;

assign zext_ln1503_fu_339_p1 = partial_products_0_20_fu_331_p3;

assign zext_ln215_10_fu_266_p1 = ai_1_V_fu_228_p4;

assign zext_ln215_11_fu_270_p1 = ai_2_V_fu_238_p4;

assign zext_ln215_12_fu_274_p1 = $unsigned(ai_3_V_fu_258_p1);

assign zext_ln215_9_fu_304_p1 = tmp_3_reg_810;

assign zext_ln215_fu_262_p1 = ai_0_V_fu_224_p1;

always @ (posedge ap_clk) begin
    zext_ln215_reg_777[127:64] <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    zext_ln215_10_reg_782[127:64] <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    zext_ln215_11_reg_787[127:64] <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    zext_ln215_12_reg_792[127:64] <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    partial_products_3_25_fu_84[320:128] <= 193'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    partial_products_0_24_fu_88[63:0] <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    partial_products_0_24_fu_88[320:192] <= 129'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    partial_products_0_23_fu_92[127:0] <= 128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    partial_products_0_23_fu_92[320:256] <= 65'b00000000000000000000000000000000000000000000000000000000000000000;
    partial_products_0_s_fu_96[191:0] <= 192'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    partial_products_0_s_fu_96[320] <= 1'b0;
    partial_products_3_26_fu_100[320:128] <= 193'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    partial_products_1_16_fu_104[63:0] <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    partial_products_1_16_fu_104[320:192] <= 129'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    partial_products_1_15_fu_108[127:0] <= 128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    partial_products_1_15_fu_108[320:256] <= 65'b00000000000000000000000000000000000000000000000000000000000000000;
    partial_products_1_s_fu_112[191:0] <= 192'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    partial_products_1_s_fu_112[320] <= 1'b0;
    partial_products_3_27_fu_116[320:128] <= 193'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    partial_products_2_16_fu_120[63:0] <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    partial_products_2_16_fu_120[320:192] <= 129'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    partial_products_2_15_fu_124[127:0] <= 128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    partial_products_2_15_fu_124[320:256] <= 65'b00000000000000000000000000000000000000000000000000000000000000000;
    partial_products_2_s_fu_128[191:0] <= 192'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    partial_products_2_s_fu_128[320] <= 1'b0;
    partial_products_3_28_fu_132[320:128] <= 193'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    partial_products_3_16_fu_136[63:0] <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    partial_products_3_16_fu_136[320:192] <= 129'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    partial_products_3_15_fu_140[127:0] <= 128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    partial_products_3_15_fu_140[320:256] <= 65'b00000000000000000000000000000000000000000000000000000000000000000;
    partial_products_3_s_fu_144[191:0] <= 192'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    partial_products_3_s_fu_144[320] <= 1'b0;
end

endmodule //bc_mult
