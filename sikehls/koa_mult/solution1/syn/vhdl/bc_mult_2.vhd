-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bc_mult_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ta_V : IN STD_LOGIC_VECTOR (224 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (449 downto 0) );
end;


architecture behav of bc_mult_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv323_lc_1 : STD_LOGIC_VECTOR (322 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv387_lc_1 : STD_LOGIC_VECTOR (386 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv450_lc_1 : STD_LOGIC_VECTOR (449 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv192_lc_1 : STD_LOGIC_VECTOR (191 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i7_0_reg_154 : STD_LOGIC_VECTOR (2 downto 0);
    signal ai_0_V_fu_224_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ai_0_V_reg_757 : STD_LOGIC_VECTOR (63 downto 0);
    signal ai_1_V_fu_228_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ai_1_V_reg_762 : STD_LOGIC_VECTOR (63 downto 0);
    signal ai_2_V_fu_238_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ai_2_V_reg_767 : STD_LOGIC_VECTOR (63 downto 0);
    signal ai_3_V_fu_258_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ai_3_V_reg_772 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_fu_262_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln215_reg_777 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln215_2_fu_266_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln215_2_reg_782 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln215_3_fu_270_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln215_3_reg_787 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln215_4_fu_274_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln215_4_reg_792 : STD_LOGIC_VECTOR (127 downto 0);
    signal icmp_ln302_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_1_fu_284_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal trunc_ln215_fu_290_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln215_reg_806 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln215_reg_806_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln215_reg_806_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln215_reg_806_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln215_reg_806_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_294_p6 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_reg_810 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_1_fu_304_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal i_fu_453_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_826 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln313_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_529_p2 : STD_LOGIC_VECTOR (322 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_561_p2 : STD_LOGIC_VECTOR (386 downto 0);
    signal grp_fu_593_p2 : STD_LOGIC_VECTOR (449 downto 0);
    signal grp_fu_625_p2 : STD_LOGIC_VECTOR (449 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_645_p2 : STD_LOGIC_VECTOR (449 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal sum_V_0_0_reg_165 : STD_LOGIC_VECTOR (322 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal sum_V_1_0_reg_177 : STD_LOGIC_VECTOR (386 downto 0);
    signal sum_V_2_0_reg_189 : STD_LOGIC_VECTOR (449 downto 0);
    signal sum_V_3_0_reg_201 : STD_LOGIC_VECTOR (449 downto 0);
    signal i8_0_reg_213 : STD_LOGIC_VECTOR (2 downto 0);
    signal partial_products_3_3_fu_84 : STD_LOGIC_VECTOR (320 downto 0);
    signal partial_products_0_3_fu_327_p1 : STD_LOGIC_VECTOR (320 downto 0);
    signal partial_products_0_2_fu_88 : STD_LOGIC_VECTOR (320 downto 0);
    signal zext_ln1503_fu_339_p1 : STD_LOGIC_VECTOR (320 downto 0);
    signal partial_products_0_1_fu_92 : STD_LOGIC_VECTOR (320 downto 0);
    signal zext_ln1503_1_fu_351_p1 : STD_LOGIC_VECTOR (320 downto 0);
    signal partial_products_0_s_fu_96 : STD_LOGIC_VECTOR (320 downto 0);
    signal zext_ln1503_2_fu_363_p1 : STD_LOGIC_VECTOR (320 downto 0);
    signal partial_products_3_4_fu_100 : STD_LOGIC_VECTOR (320 downto 0);
    signal partial_products_1_2_fu_104 : STD_LOGIC_VECTOR (320 downto 0);
    signal partial_products_1_1_fu_108 : STD_LOGIC_VECTOR (320 downto 0);
    signal partial_products_1_s_fu_112 : STD_LOGIC_VECTOR (320 downto 0);
    signal partial_products_3_5_fu_116 : STD_LOGIC_VECTOR (320 downto 0);
    signal partial_products_2_2_fu_120 : STD_LOGIC_VECTOR (320 downto 0);
    signal partial_products_2_1_fu_124 : STD_LOGIC_VECTOR (320 downto 0);
    signal partial_products_2_s_fu_128 : STD_LOGIC_VECTOR (320 downto 0);
    signal partial_products_3_6_fu_132 : STD_LOGIC_VECTOR (320 downto 0);
    signal partial_products_3_2_fu_136 : STD_LOGIC_VECTOR (320 downto 0);
    signal partial_products_3_1_fu_140 : STD_LOGIC_VECTOR (320 downto 0);
    signal partial_products_3_s_fu_144 : STD_LOGIC_VECTOR (320 downto 0);
    signal tmp_fu_248_p4 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_2_fu_294_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_307_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_307_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_312_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_312_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_317_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_317_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_322_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_322_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_307_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_fu_312_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal partial_products_0_4_fu_331_p3 : STD_LOGIC_VECTOR (191 downto 0);
    signal grp_fu_317_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal partial_products_0_5_fu_343_p3 : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_fu_322_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal partial_products_0_6_fu_355_p3 : STD_LOGIC_VECTOR (319 downto 0);
    signal trunc_ln209_fu_507_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_511_p6 : STD_LOGIC_VECTOR (320 downto 0);
    signal grp_fu_529_p0 : STD_LOGIC_VECTOR (322 downto 0);
    signal tmp_4_fu_535_p6 : STD_LOGIC_VECTOR (320 downto 0);
    signal shl_ln_fu_549_p3 : STD_LOGIC_VECTOR (384 downto 0);
    signal grp_fu_561_p0 : STD_LOGIC_VECTOR (386 downto 0);
    signal tmp_5_fu_567_p6 : STD_LOGIC_VECTOR (320 downto 0);
    signal shl_ln1503_1_fu_581_p3 : STD_LOGIC_VECTOR (448 downto 0);
    signal grp_fu_593_p0 : STD_LOGIC_VECTOR (449 downto 0);
    signal tmp_6_fu_599_p6 : STD_LOGIC_VECTOR (320 downto 0);
    signal trunc_ln1503_fu_613_p1 : STD_LOGIC_VECTOR (257 downto 0);
    signal grp_fu_625_p0 : STD_LOGIC_VECTOR (449 downto 0);
    signal grp_fu_639_p0 : STD_LOGIC_VECTOR (387 downto 0);
    signal grp_fu_639_p1 : STD_LOGIC_VECTOR (387 downto 0);
    signal grp_fu_639_p2 : STD_LOGIC_VECTOR (387 downto 0);
    signal grp_fu_655_p1 : STD_LOGIC_VECTOR (449 downto 0);
    signal grp_fu_655_p2 : STD_LOGIC_VECTOR (449 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (449 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component koa_mult_h1_mux_4bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component koa_mult_h1_mul_6cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component koa_mult_h1_mux_4dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (320 downto 0);
        din1 : IN STD_LOGIC_VECTOR (320 downto 0);
        din2 : IN STD_LOGIC_VECTOR (320 downto 0);
        din3 : IN STD_LOGIC_VECTOR (320 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (320 downto 0) );
    end component;


    component koa_mult_h1_add_3eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (322 downto 0);
        din1 : IN STD_LOGIC_VECTOR (322 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (322 downto 0) );
    end component;


    component koa_mult_h1_add_3fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (386 downto 0);
        din1 : IN STD_LOGIC_VECTOR (386 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (386 downto 0) );
    end component;


    component koa_mult_h1_add_4ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (449 downto 0);
        din1 : IN STD_LOGIC_VECTOR (449 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (449 downto 0) );
    end component;


    component koa_mult_h1_add_3hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (387 downto 0);
        din1 : IN STD_LOGIC_VECTOR (387 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (387 downto 0) );
    end component;



begin
    koa_mult_h1_mux_4bkb_U42 : component koa_mult_h1_mux_4bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 2,
        dout_WIDTH => 64)
    port map (
        din0 => ai_0_V_reg_757,
        din1 => ai_1_V_reg_762,
        din2 => ai_2_V_reg_767,
        din3 => ai_3_V_reg_772,
        din4 => tmp_2_fu_294_p5,
        dout => tmp_2_fu_294_p6);

    koa_mult_h1_mul_6cud_U43 : component koa_mult_h1_mul_6cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 128)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_307_p0,
        din1 => grp_fu_307_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_307_p2);

    koa_mult_h1_mul_6cud_U44 : component koa_mult_h1_mul_6cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 128)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_312_p0,
        din1 => grp_fu_312_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_312_p2);

    koa_mult_h1_mul_6cud_U45 : component koa_mult_h1_mul_6cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 128)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_317_p0,
        din1 => grp_fu_317_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_317_p2);

    koa_mult_h1_mul_6cud_U46 : component koa_mult_h1_mul_6cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 128)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_322_p0,
        din1 => grp_fu_322_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_322_p2);

    koa_mult_h1_mux_4dEe_U47 : component koa_mult_h1_mux_4dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 321,
        din1_WIDTH => 321,
        din2_WIDTH => 321,
        din3_WIDTH => 321,
        din4_WIDTH => 2,
        dout_WIDTH => 321)
    port map (
        din0 => partial_products_3_3_fu_84,
        din1 => partial_products_0_2_fu_88,
        din2 => partial_products_0_1_fu_92,
        din3 => partial_products_0_s_fu_96,
        din4 => trunc_ln209_fu_507_p1,
        dout => tmp_3_fu_511_p6);

    koa_mult_h1_add_3eOg_U48 : component koa_mult_h1_add_3eOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 323,
        din1_WIDTH => 323,
        dout_WIDTH => 323)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_529_p0,
        din1 => sum_V_0_0_reg_165,
        ce => ap_const_logic_1,
        dout => grp_fu_529_p2);

    koa_mult_h1_mux_4dEe_U49 : component koa_mult_h1_mux_4dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 321,
        din1_WIDTH => 321,
        din2_WIDTH => 321,
        din3_WIDTH => 321,
        din4_WIDTH => 2,
        dout_WIDTH => 321)
    port map (
        din0 => partial_products_3_4_fu_100,
        din1 => partial_products_1_2_fu_104,
        din2 => partial_products_1_1_fu_108,
        din3 => partial_products_1_s_fu_112,
        din4 => trunc_ln209_fu_507_p1,
        dout => tmp_4_fu_535_p6);

    koa_mult_h1_add_3fYi_U50 : component koa_mult_h1_add_3fYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 387,
        din1_WIDTH => 387,
        dout_WIDTH => 387)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_561_p0,
        din1 => sum_V_1_0_reg_177,
        ce => ap_const_logic_1,
        dout => grp_fu_561_p2);

    koa_mult_h1_mux_4dEe_U51 : component koa_mult_h1_mux_4dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 321,
        din1_WIDTH => 321,
        din2_WIDTH => 321,
        din3_WIDTH => 321,
        din4_WIDTH => 2,
        dout_WIDTH => 321)
    port map (
        din0 => partial_products_3_5_fu_116,
        din1 => partial_products_2_2_fu_120,
        din2 => partial_products_2_1_fu_124,
        din3 => partial_products_2_s_fu_128,
        din4 => trunc_ln209_fu_507_p1,
        dout => tmp_5_fu_567_p6);

    koa_mult_h1_add_4ibs_U52 : component koa_mult_h1_add_4ibs
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 450,
        din1_WIDTH => 450,
        dout_WIDTH => 450)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_593_p0,
        din1 => sum_V_2_0_reg_189,
        ce => ap_const_logic_1,
        dout => grp_fu_593_p2);

    koa_mult_h1_mux_4dEe_U53 : component koa_mult_h1_mux_4dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 321,
        din1_WIDTH => 321,
        din2_WIDTH => 321,
        din3_WIDTH => 321,
        din4_WIDTH => 2,
        dout_WIDTH => 321)
    port map (
        din0 => partial_products_3_6_fu_132,
        din1 => partial_products_3_2_fu_136,
        din2 => partial_products_3_1_fu_140,
        din3 => partial_products_3_s_fu_144,
        din4 => trunc_ln209_fu_507_p1,
        dout => tmp_6_fu_599_p6);

    koa_mult_h1_add_4ibs_U54 : component koa_mult_h1_add_4ibs
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 450,
        din1_WIDTH => 450,
        dout_WIDTH => 450)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_625_p0,
        din1 => sum_V_3_0_reg_201,
        ce => ap_const_logic_1,
        dout => grp_fu_625_p2);

    koa_mult_h1_add_3hbi_U55 : component koa_mult_h1_add_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 388,
        din1_WIDTH => 388,
        dout_WIDTH => 388)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_639_p0,
        din1 => grp_fu_639_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_639_p2);

    koa_mult_h1_add_4ibs_U56 : component koa_mult_h1_add_4ibs
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 450,
        din1_WIDTH => 450,
        dout_WIDTH => 450)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_V_2_0_reg_189,
        din1 => sum_V_3_0_reg_201,
        ce => ap_const_logic_1,
        dout => grp_fu_645_p2);

    koa_mult_h1_add_4ibs_U57 : component koa_mult_h1_add_4ibs
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 450,
        din1_WIDTH => 450,
        dout_WIDTH => 450)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_645_p2,
        din1 => grp_fu_655_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_655_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv450_lc_1;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_return_preg <= grp_fu_655_p2;
                end if; 
            end if;
        end if;
    end process;


    i7_0_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln302_fu_278_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i7_0_reg_154 <= i_1_fu_284_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i7_0_reg_154 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i8_0_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i8_0_reg_213 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i8_0_reg_213 <= i_reg_826;
            end if; 
        end if;
    end process;

    sum_V_0_0_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                sum_V_0_0_reg_165 <= ap_const_lv323_lc_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                sum_V_0_0_reg_165 <= grp_fu_529_p2;
            end if; 
        end if;
    end process;

    sum_V_1_0_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                sum_V_1_0_reg_177 <= ap_const_lv387_lc_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                sum_V_1_0_reg_177 <= grp_fu_561_p2;
            end if; 
        end if;
    end process;

    sum_V_2_0_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                sum_V_2_0_reg_189 <= ap_const_lv450_lc_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                sum_V_2_0_reg_189 <= grp_fu_593_p2;
            end if; 
        end if;
    end process;

    sum_V_3_0_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                sum_V_3_0_reg_201 <= ap_const_lv450_lc_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                sum_V_3_0_reg_201 <= grp_fu_625_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                ai_0_V_reg_757 <= ai_0_V_fu_224_p1;
                ai_1_V_reg_762 <= ta_V(127 downto 64);
                ai_2_V_reg_767 <= ta_V(191 downto 128);
                ai_3_V_reg_772 <= ai_3_V_fu_258_p1;
                    zext_ln215_2_reg_782(63 downto 0) <= zext_ln215_2_fu_266_p1(63 downto 0);
                    zext_ln215_3_reg_787(63 downto 0) <= zext_ln215_3_fu_270_p1(63 downto 0);
                    zext_ln215_4_reg_792(63 downto 0) <= zext_ln215_4_fu_274_p1(63 downto 0);
                    zext_ln215_reg_777(63 downto 0) <= zext_ln215_fu_262_p1(63 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                i_reg_826 <= i_fu_453_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln215_reg_806_pp0_iter4_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                    partial_products_0_1_fu_92(255 downto 128) <= zext_ln1503_1_fu_351_p1(255 downto 128);
                    partial_products_0_2_fu_88(191 downto 64) <= zext_ln1503_fu_339_p1(191 downto 64);
                    partial_products_0_s_fu_96(319 downto 192) <= zext_ln1503_2_fu_363_p1(319 downto 192);
                    partial_products_3_3_fu_84(127 downto 0) <= partial_products_0_3_fu_327_p1(127 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln215_reg_806_pp0_iter4_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                    partial_products_1_1_fu_108(255 downto 128) <= zext_ln1503_1_fu_351_p1(255 downto 128);
                    partial_products_1_2_fu_104(191 downto 64) <= zext_ln1503_fu_339_p1(191 downto 64);
                    partial_products_1_s_fu_112(319 downto 192) <= zext_ln1503_2_fu_363_p1(319 downto 192);
                    partial_products_3_4_fu_100(127 downto 0) <= partial_products_0_3_fu_327_p1(127 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln215_reg_806_pp0_iter4_reg = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                    partial_products_2_1_fu_124(255 downto 128) <= zext_ln1503_1_fu_351_p1(255 downto 128);
                    partial_products_2_2_fu_120(191 downto 64) <= zext_ln1503_fu_339_p1(191 downto 64);
                    partial_products_2_s_fu_128(319 downto 192) <= zext_ln1503_2_fu_363_p1(319 downto 192);
                    partial_products_3_5_fu_116(127 downto 0) <= partial_products_0_3_fu_327_p1(127 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln215_reg_806_pp0_iter4_reg = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                    partial_products_3_1_fu_140(255 downto 128) <= zext_ln1503_1_fu_351_p1(255 downto 128);
                    partial_products_3_2_fu_136(191 downto 64) <= zext_ln1503_fu_339_p1(191 downto 64);
                    partial_products_3_6_fu_132(127 downto 0) <= partial_products_0_3_fu_327_p1(127 downto 0);
                    partial_products_3_s_fu_144(319 downto 192) <= zext_ln1503_2_fu_363_p1(319 downto 192);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln302_fu_278_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_2_reg_810 <= tmp_2_fu_294_p6;
                trunc_ln215_reg_806 <= trunc_ln215_fu_290_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln215_reg_806_pp0_iter1_reg <= trunc_ln215_reg_806;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                trunc_ln215_reg_806_pp0_iter2_reg <= trunc_ln215_reg_806_pp0_iter1_reg;
                trunc_ln215_reg_806_pp0_iter3_reg <= trunc_ln215_reg_806_pp0_iter2_reg;
                trunc_ln215_reg_806_pp0_iter4_reg <= trunc_ln215_reg_806_pp0_iter3_reg;
            end if;
        end if;
    end process;
    zext_ln215_reg_777(127 downto 64) <= "0000000000000000000000000000000000000000000000000000000000000000";
    zext_ln215_2_reg_782(127 downto 64) <= "0000000000000000000000000000000000000000000000000000000000000000";
    zext_ln215_3_reg_787(127 downto 64) <= "0000000000000000000000000000000000000000000000000000000000000000";
    zext_ln215_4_reg_792(127 downto 64) <= "0000000000000000000000000000000000000000000000000000000000000000";
    partial_products_3_3_fu_84(320 downto 128) <= "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_0_2_fu_88(63 downto 0) <= "0000000000000000000000000000000000000000000000000000000000000000";
    partial_products_0_2_fu_88(320 downto 192) <= "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_0_1_fu_92(127 downto 0) <= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_0_1_fu_92(320 downto 256) <= "00000000000000000000000000000000000000000000000000000000000000000";
    partial_products_0_s_fu_96(191 downto 0) <= "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_0_s_fu_96(320) <= '0';
    partial_products_3_4_fu_100(320 downto 128) <= "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_1_2_fu_104(63 downto 0) <= "0000000000000000000000000000000000000000000000000000000000000000";
    partial_products_1_2_fu_104(320 downto 192) <= "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_1_1_fu_108(127 downto 0) <= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_1_1_fu_108(320 downto 256) <= "00000000000000000000000000000000000000000000000000000000000000000";
    partial_products_1_s_fu_112(191 downto 0) <= "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_1_s_fu_112(320) <= '0';
    partial_products_3_5_fu_116(320 downto 128) <= "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_2_2_fu_120(63 downto 0) <= "0000000000000000000000000000000000000000000000000000000000000000";
    partial_products_2_2_fu_120(320 downto 192) <= "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_2_1_fu_124(127 downto 0) <= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_2_1_fu_124(320 downto 256) <= "00000000000000000000000000000000000000000000000000000000000000000";
    partial_products_2_s_fu_128(191 downto 0) <= "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_2_s_fu_128(320) <= '0';
    partial_products_3_6_fu_132(320 downto 128) <= "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_3_2_fu_136(63 downto 0) <= "0000000000000000000000000000000000000000000000000000000000000000";
    partial_products_3_2_fu_136(320 downto 192) <= "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_3_1_fu_140(127 downto 0) <= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_3_1_fu_140(320 downto 256) <= "00000000000000000000000000000000000000000000000000000000000000000";
    partial_products_3_s_fu_144(191 downto 0) <= "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_3_s_fu_144(320) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln302_fu_278_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state9, icmp_ln313_fu_447_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln302_fu_278_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln302_fu_278_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln313_fu_447_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ai_0_V_fu_224_p1 <= ta_V(64 - 1 downto 0);
    ai_1_V_fu_228_p4 <= ta_V(127 downto 64);
    ai_2_V_fu_238_p4 <= ta_V(191 downto 128);
        ai_3_V_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_248_p4),64));

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(4);
    ap_CS_fsm_state11 <= ap_CS_fsm(5);
    ap_CS_fsm_state12 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(2);
    ap_CS_fsm_state9 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln302_fu_278_p2)
    begin
        if ((icmp_ln302_fu_278_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(grp_fu_655_p2, ap_return_preg, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_return <= grp_fu_655_p2;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    grp_fu_307_p0 <= zext_ln215_reg_777(64 - 1 downto 0);
    grp_fu_307_p1 <= zext_ln215_1_fu_304_p1(64 - 1 downto 0);
    grp_fu_312_p0 <= zext_ln215_2_reg_782(64 - 1 downto 0);
    grp_fu_312_p1 <= zext_ln215_1_fu_304_p1(64 - 1 downto 0);
    grp_fu_317_p0 <= zext_ln215_3_reg_787(64 - 1 downto 0);
    grp_fu_317_p1 <= zext_ln215_1_fu_304_p1(64 - 1 downto 0);
    grp_fu_322_p0 <= zext_ln215_4_reg_792(64 - 1 downto 0);
    grp_fu_322_p1 <= zext_ln215_1_fu_304_p1(64 - 1 downto 0);
    grp_fu_529_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_511_p6),323));
    grp_fu_561_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_549_p3),387));
    grp_fu_593_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1503_1_fu_581_p3),450));
    grp_fu_625_p0 <= (trunc_ln1503_fu_613_p1 & ap_const_lv192_lc_1);
    grp_fu_639_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_V_1_0_reg_177),388));
    grp_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_V_0_0_reg_165),388));
    grp_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_639_p2),450));
    i_1_fu_284_p2 <= std_logic_vector(unsigned(i7_0_reg_154) + unsigned(ap_const_lv3_1));
    i_fu_453_p2 <= std_logic_vector(unsigned(i8_0_reg_213) + unsigned(ap_const_lv3_1));
    icmp_ln302_fu_278_p2 <= "1" when (i7_0_reg_154 = ap_const_lv3_4) else "0";
    icmp_ln313_fu_447_p2 <= "1" when (i8_0_reg_213 = ap_const_lv3_4) else "0";
    partial_products_0_3_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_307_p2),321));
    partial_products_0_4_fu_331_p3 <= (grp_fu_312_p2 & ap_const_lv64_0);
    partial_products_0_5_fu_343_p3 <= (grp_fu_317_p2 & ap_const_lv128_lc_1);
    partial_products_0_6_fu_355_p3 <= (grp_fu_322_p2 & ap_const_lv192_lc_1);
    shl_ln1503_1_fu_581_p3 <= (tmp_5_fu_567_p6 & ap_const_lv128_lc_1);
    shl_ln_fu_549_p3 <= (tmp_4_fu_535_p6 & ap_const_lv64_0);
    tmp_2_fu_294_p5 <= i7_0_reg_154(2 - 1 downto 0);
    tmp_fu_248_p4 <= ta_V(224 downto 192);
    trunc_ln1503_fu_613_p1 <= tmp_6_fu_599_p6(258 - 1 downto 0);
    trunc_ln209_fu_507_p1 <= i8_0_reg_213(2 - 1 downto 0);
    trunc_ln215_fu_290_p1 <= i7_0_reg_154(2 - 1 downto 0);
    zext_ln1503_1_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(partial_products_0_5_fu_343_p3),321));
    zext_ln1503_2_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(partial_products_0_6_fu_355_p3),321));
    zext_ln1503_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(partial_products_0_4_fu_331_p3),321));
    zext_ln215_1_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_810),128));
    zext_ln215_2_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ai_1_V_fu_228_p4),128));
    zext_ln215_3_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ai_2_V_fu_238_p4),128));
    zext_ln215_4_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ai_3_V_fu_258_p1),128));
    zext_ln215_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ai_0_V_fu_224_p1),128));
end behav;
