// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _mp_mul_HH_
#define _mp_mul_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "bc_mult_448.h"

namespace ap_rtl {

struct mp_mul : public sc_module {
    // Port declarations 9
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<448> > a_V;
    sc_in< sc_lv<448> > b_V;
    sc_out< sc_lv<835> > ap_return;


    // Module declarations
    mp_mul(sc_module_name name);
    SC_HAS_PROCESS(mp_mul);

    ~mp_mul();

    sc_trace_file* mVcdFile;

    bc_mult_448* grp_bc_mult_448_fu_20;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<448> > b_V_read_reg_28;
    sc_signal< sc_lv<448> > a_V_read_reg_33;
    sc_signal< sc_logic > grp_bc_mult_448_fu_20_ap_start;
    sc_signal< sc_logic > grp_bc_mult_448_fu_20_ap_done;
    sc_signal< sc_logic > grp_bc_mult_448_fu_20_ap_idle;
    sc_signal< sc_logic > grp_bc_mult_448_fu_20_ap_ready;
    sc_signal< sc_lv<835> > grp_bc_mult_448_fu_20_ap_return;
    sc_signal< sc_logic > grp_bc_mult_448_fu_20_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<835> > ap_return_preg;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<835> ap_const_lv835_lc_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_grp_bc_mult_448_fu_20_ap_start();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
