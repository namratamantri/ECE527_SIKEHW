// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _mp2_add_HH_
#define _mp2_add_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "eval_4_isog_add_4fYi.h"

namespace ap_rtl {

struct mp2_add : public sc_module {
    // Port declarations 18
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<448> > a_0_V_read;
    sc_in< sc_lv<448> > a_1_V_read;
    sc_in< sc_lv<448> > b_0_V_read;
    sc_in< sc_lv<448> > b_1_V_read;
    sc_out< sc_lv<1> > c_V_address0;
    sc_out< sc_logic > c_V_ce0;
    sc_out< sc_logic > c_V_we0;
    sc_out< sc_lv<448> > c_V_d0;
    sc_out< sc_lv<1> > c_V_address1;
    sc_out< sc_logic > c_V_ce1;
    sc_out< sc_logic > c_V_we1;
    sc_out< sc_lv<448> > c_V_d1;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    mp2_add(sc_module_name name);
    SC_HAS_PROCESS(mp2_add);

    ~mp2_add();

    sc_trace_file* mVcdFile;

    eval_4_isog_add_4fYi<1,2,448,448,448>* eval_4_isog_add_4fYi_U43;
    eval_4_isog_add_4fYi<1,2,448,448,448>* eval_4_isog_add_4fYi_U44;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<448> > grp_fu_67_p2;
    sc_signal< sc_lv<448> > grp_fu_74_p2;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<64> ap_const_lv64_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_c_V_address0();
    void thread_c_V_address1();
    void thread_c_V_ce0();
    void thread_c_V_ce1();
    void thread_c_V_d0();
    void thread_c_V_d1();
    void thread_c_V_we0();
    void thread_c_V_we1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
