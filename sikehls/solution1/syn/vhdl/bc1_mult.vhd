-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bc1_mult is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_V : IN STD_LOGIC_VECTOR (111 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (223 downto 0) );
end;


architecture behav of bc1_mult is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv224_lc_1 : STD_LOGIC_VECTOR (223 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ai_0_V_fu_243_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ai_0_V_reg_689 : STD_LOGIC_VECTOR (15 downto 0);
    signal ai_1_V_reg_695 : STD_LOGIC_VECTOR (15 downto 0);
    signal ai_2_V_reg_701 : STD_LOGIC_VECTOR (15 downto 0);
    signal ai_3_V_fu_267_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ai_3_V_reg_707 : STD_LOGIC_VECTOR (15 downto 0);
    signal ai_4_V_reg_712 : STD_LOGIC_VECTOR (15 downto 0);
    signal ai_5_V_reg_718 : STD_LOGIC_VECTOR (15 downto 0);
    signal ai_6_V_reg_724 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln215_36_fu_307_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln215_36_reg_730 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_322_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_738 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_s_fu_328_p9 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_reg_743 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln320_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln68_fu_341_p2 : STD_LOGIC_VECTOR (223 downto 0);
    signal add_ln68_reg_748 : STD_LOGIC_VECTOR (223 downto 0);
    signal add_ln68_46_fu_347_p2 : STD_LOGIC_VECTOR (223 downto 0);
    signal add_ln68_46_reg_753 : STD_LOGIC_VECTOR (223 downto 0);
    signal add_ln68_47_fu_353_p2 : STD_LOGIC_VECTOR (223 downto 0);
    signal add_ln68_47_reg_758 : STD_LOGIC_VECTOR (223 downto 0);
    signal zext_ln215_33_fu_359_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln215_33_reg_763 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln1352_fu_362_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln1352_reg_770 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln161_fu_366_p1 : STD_LOGIC_VECTOR (223 downto 0);
    signal zext_ln161_reg_778 : STD_LOGIC_VECTOR (223 downto 0);
    signal icmp_ln215_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln215_reg_783 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal mul_ln1352_fu_667_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1352_reg_790 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln325_fu_389_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln325_reg_795 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln215_17_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln215_17_reg_800 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln1352_25_fu_672_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1352_25_reg_807 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln325_1_fu_420_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln325_1_reg_812 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln215_18_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln215_18_reg_817 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln1352_26_fu_677_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1352_26_reg_824 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln325_2_fu_451_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln325_2_reg_829 : STD_LOGIC_VECTOR (3 downto 0);
    signal sum_0_V_fu_487_p2 : STD_LOGIC_VECTOR (223 downto 0);
    signal sum_0_V_reg_834 : STD_LOGIC_VECTOR (223 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sum_1_V_fu_520_p2 : STD_LOGIC_VECTOR (223 downto 0);
    signal sum_1_V_reg_840 : STD_LOGIC_VECTOR (223 downto 0);
    signal sum_2_V_fu_553_p2 : STD_LOGIC_VECTOR (223 downto 0);
    signal sum_2_V_reg_846 : STD_LOGIC_VECTOR (223 downto 0);
    signal sum_4_V_17_fu_559_p3 : STD_LOGIC_VECTOR (223 downto 0);
    signal sum_4_V_17_reg_852 : STD_LOGIC_VECTOR (223 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal sum_4_V_18_fu_565_p3 : STD_LOGIC_VECTOR (223 downto 0);
    signal sum_4_V_18_reg_858 : STD_LOGIC_VECTOR (223 downto 0);
    signal sum_5_V_17_fu_571_p3 : STD_LOGIC_VECTOR (223 downto 0);
    signal sum_5_V_17_reg_864 : STD_LOGIC_VECTOR (223 downto 0);
    signal sum_5_V_18_fu_577_p3 : STD_LOGIC_VECTOR (223 downto 0);
    signal sum_5_V_18_reg_870 : STD_LOGIC_VECTOR (223 downto 0);
    signal sum_6_V_17_fu_583_p3 : STD_LOGIC_VECTOR (223 downto 0);
    signal sum_6_V_17_reg_876 : STD_LOGIC_VECTOR (223 downto 0);
    signal sum_6_V_18_fu_589_p3 : STD_LOGIC_VECTOR (223 downto 0);
    signal sum_6_V_18_reg_882 : STD_LOGIC_VECTOR (223 downto 0);
    signal add_ln325_3_fu_611_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln325_3_reg_891 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln322_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln322_fu_616_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln322_reg_896 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_3_V_fu_638_p2 : STD_LOGIC_VECTOR (223 downto 0);
    signal sum_3_V_reg_901 : STD_LOGIC_VECTOR (223 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln68_45_fu_648_p2 : STD_LOGIC_VECTOR (223 downto 0);
    signal add_ln68_45_reg_906 : STD_LOGIC_VECTOR (223 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln68_48_fu_653_p2 : STD_LOGIC_VECTOR (223 downto 0);
    signal add_ln68_48_reg_911 : STD_LOGIC_VECTOR (223 downto 0);
    signal sum_V_0_0_reg_78 : STD_LOGIC_VECTOR (223 downto 0);
    signal sum_V_1_0_reg_90 : STD_LOGIC_VECTOR (223 downto 0);
    signal sum_V_2_0_reg_102 : STD_LOGIC_VECTOR (223 downto 0);
    signal sum_V_4_0_reg_114 : STD_LOGIC_VECTOR (223 downto 0);
    signal sum_V_5_0_reg_126 : STD_LOGIC_VECTOR (223 downto 0);
    signal sum_V_6_0_reg_138 : STD_LOGIC_VECTOR (223 downto 0);
    signal i3_0_reg_150 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_0_0_reg_162 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal sum_V_0_1_reg_174 : STD_LOGIC_VECTOR (223 downto 0);
    signal sum_V_1_1_reg_185 : STD_LOGIC_VECTOR (223 downto 0);
    signal sum_V_2_1_reg_196 : STD_LOGIC_VECTOR (223 downto 0);
    signal sum_V_4_1_reg_207 : STD_LOGIC_VECTOR (223 downto 0);
    signal sum_V_5_1_reg_218 : STD_LOGIC_VECTOR (223 downto 0);
    signal sum_V_6_1_reg_229 : STD_LOGIC_VECTOR (223 downto 0);
    signal sum_3_V_9_fu_68 : STD_LOGIC_VECTOR (223 downto 0);
    signal mul_ln1352_27_fu_661_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln215_fu_375_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln325_1_fu_385_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln215_fu_394_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln215_17_fu_406_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln325_2_fu_416_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln215_5_fu_425_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln215_18_fu_437_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln325_3_fu_447_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_459_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln325_fu_456_p1 : STD_LOGIC_VECTOR (191 downto 0);
    signal zext_ln1503_fu_466_p1 : STD_LOGIC_VECTOR (191 downto 0);
    signal shl_ln1503_fu_470_p2 : STD_LOGIC_VECTOR (191 downto 0);
    signal zext_ln1503_8_fu_476_p1 : STD_LOGIC_VECTOR (223 downto 0);
    signal select_ln700_fu_480_p3 : STD_LOGIC_VECTOR (223 downto 0);
    signal shl_ln325_1_fu_496_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln161_1_fu_493_p1 : STD_LOGIC_VECTOR (223 downto 0);
    signal zext_ln1503_1_fu_503_p1 : STD_LOGIC_VECTOR (223 downto 0);
    signal shl_ln1503_1_fu_507_p2 : STD_LOGIC_VECTOR (223 downto 0);
    signal select_ln700_67_fu_513_p3 : STD_LOGIC_VECTOR (223 downto 0);
    signal shl_ln325_2_fu_529_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln161_2_fu_526_p1 : STD_LOGIC_VECTOR (223 downto 0);
    signal zext_ln1503_2_fu_536_p1 : STD_LOGIC_VECTOR (223 downto 0);
    signal shl_ln1503_2_fu_540_p2 : STD_LOGIC_VECTOR (223 downto 0);
    signal select_ln700_70_fu_546_p3 : STD_LOGIC_VECTOR (223 downto 0);
    signal or_ln322_fu_595_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln325_4_fu_607_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln325_3_fu_622_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1503_3_fu_629_p1 : STD_LOGIC_VECTOR (223 downto 0);
    signal shl_ln1503_3_fu_633_p2 : STD_LOGIC_VECTOR (223 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal mul_ln1352_27_fu_661_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1352_27_fu_661_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1352_fu_667_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1352_fu_667_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1352_25_fu_672_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1352_25_fu_672_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1352_26_fu_677_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1352_26_fu_677_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1352_25_fu_672_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1352_26_fu_677_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1352_27_fu_661_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1352_fu_667_p00 : STD_LOGIC_VECTOR (31 downto 0);

    component mp_mul_mux_73_16_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component mp_mul_mul_mul_16cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mp_mul_mux_73_16_bkb_U23 : component mp_mul_mux_73_16_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 3,
        dout_WIDTH => 16)
    port map (
        din0 => ai_0_V_reg_689,
        din1 => ai_1_V_reg_695,
        din2 => ai_2_V_reg_701,
        din3 => ai_3_V_reg_707,
        din4 => ai_4_V_reg_712,
        din5 => ai_5_V_reg_718,
        din6 => ai_6_V_reg_724,
        din7 => i3_0_reg_150,
        dout => tmp_s_fu_328_p9);

    mp_mul_mul_mul_16cud_U24 : component mp_mul_mul_mul_16cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln1352_27_fu_661_p0,
        din1 => mul_ln1352_27_fu_661_p1,
        dout => mul_ln1352_27_fu_661_p2);

    mp_mul_mul_mul_16cud_U25 : component mp_mul_mul_mul_16cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln1352_fu_667_p0,
        din1 => mul_ln1352_fu_667_p1,
        dout => mul_ln1352_fu_667_p2);

    mp_mul_mul_mul_16cud_U26 : component mp_mul_mul_mul_16cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln1352_25_fu_672_p0,
        din1 => mul_ln1352_25_fu_672_p1,
        dout => mul_ln1352_25_fu_672_p2);

    mp_mul_mul_mul_16cud_U27 : component mp_mul_mul_mul_16cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln1352_26_fu_677_p0,
        din1 => mul_ln1352_26_fu_677_p1,
        dout => mul_ln1352_26_fu_677_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i3_0_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln322_fu_601_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i3_0_reg_150 <= i_reg_738;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i3_0_reg_150 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_0_0_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j_0_0_reg_162 <= xor_ln322_reg_896;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                j_0_0_reg_162 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    sum_3_V_9_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                sum_3_V_9_fu_68 <= sum_3_V_reg_901;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sum_3_V_9_fu_68 <= ap_const_lv224_lc_1;
            end if; 
        end if;
    end process;

    sum_V_0_0_reg_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln322_fu_601_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                sum_V_0_0_reg_78 <= sum_4_V_17_fu_559_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sum_V_0_0_reg_78 <= ap_const_lv224_lc_1;
            end if; 
        end if;
    end process;

    sum_V_0_1_reg_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                sum_V_0_1_reg_174 <= sum_4_V_17_reg_852;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                sum_V_0_1_reg_174 <= sum_V_0_0_reg_78;
            end if; 
        end if;
    end process;

    sum_V_1_0_reg_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln322_fu_601_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                sum_V_1_0_reg_90 <= sum_5_V_17_fu_571_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sum_V_1_0_reg_90 <= ap_const_lv224_lc_1;
            end if; 
        end if;
    end process;

    sum_V_1_1_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                sum_V_1_1_reg_185 <= sum_5_V_17_reg_864;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                sum_V_1_1_reg_185 <= sum_V_1_0_reg_90;
            end if; 
        end if;
    end process;

    sum_V_2_0_reg_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln322_fu_601_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                sum_V_2_0_reg_102 <= sum_6_V_17_fu_583_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sum_V_2_0_reg_102 <= ap_const_lv224_lc_1;
            end if; 
        end if;
    end process;

    sum_V_2_1_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                sum_V_2_1_reg_196 <= sum_6_V_17_reg_876;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                sum_V_2_1_reg_196 <= sum_V_2_0_reg_102;
            end if; 
        end if;
    end process;

    sum_V_4_0_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln322_fu_601_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                sum_V_4_0_reg_114 <= sum_4_V_18_fu_565_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sum_V_4_0_reg_114 <= ap_const_lv224_lc_1;
            end if; 
        end if;
    end process;

    sum_V_4_1_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                sum_V_4_1_reg_207 <= sum_4_V_18_reg_858;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                sum_V_4_1_reg_207 <= sum_V_4_0_reg_114;
            end if; 
        end if;
    end process;

    sum_V_5_0_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln322_fu_601_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                sum_V_5_0_reg_126 <= sum_5_V_18_fu_577_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sum_V_5_0_reg_126 <= ap_const_lv224_lc_1;
            end if; 
        end if;
    end process;

    sum_V_5_1_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                sum_V_5_1_reg_218 <= sum_5_V_18_reg_870;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                sum_V_5_1_reg_218 <= sum_V_5_0_reg_126;
            end if; 
        end if;
    end process;

    sum_V_6_0_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln322_fu_601_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                sum_V_6_0_reg_138 <= sum_6_V_18_fu_589_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sum_V_6_0_reg_138 <= ap_const_lv224_lc_1;
            end if; 
        end if;
    end process;

    sum_V_6_1_reg_229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                sum_V_6_1_reg_229 <= sum_6_V_18_reg_882;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                sum_V_6_1_reg_229 <= sum_V_6_0_reg_138;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln325_1_reg_812 <= add_ln325_1_fu_420_p2;
                add_ln325_2_reg_829 <= add_ln325_2_fu_451_p2;
                add_ln325_reg_795 <= add_ln325_fu_389_p2;
                icmp_ln215_17_reg_800 <= icmp_ln215_17_fu_400_p2;
                icmp_ln215_18_reg_817 <= icmp_ln215_18_fu_431_p2;
                icmp_ln215_reg_783 <= icmp_ln215_fu_369_p2;
                mul_ln1352_25_reg_807 <= mul_ln1352_25_fu_672_p2;
                mul_ln1352_26_reg_824 <= mul_ln1352_26_fu_677_p2;
                mul_ln1352_reg_790 <= mul_ln1352_fu_667_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln322_fu_601_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                add_ln325_3_reg_891 <= add_ln325_3_fu_611_p2;
                xor_ln322_reg_896 <= xor_ln322_fu_616_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln68_45_reg_906 <= add_ln68_45_fu_648_p2;
                add_ln68_48_reg_911 <= add_ln68_48_fu_653_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln320_fu_316_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                add_ln68_46_reg_753 <= add_ln68_46_fu_347_p2;
                add_ln68_47_reg_758 <= add_ln68_47_fu_353_p2;
                add_ln68_reg_748 <= add_ln68_fu_341_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                ai_0_V_reg_689 <= ai_0_V_fu_243_p1;
                ai_1_V_reg_695 <= a_V(31 downto 16);
                ai_2_V_reg_701 <= a_V(47 downto 32);
                ai_3_V_reg_707 <= a_V(63 downto 48);
                ai_4_V_reg_712 <= a_V(79 downto 64);
                ai_5_V_reg_718 <= a_V(95 downto 80);
                ai_6_V_reg_724 <= a_V(111 downto 96);
                    zext_ln215_36_reg_730(15 downto 0) <= zext_ln215_36_fu_307_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_738 <= i_fu_322_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                sum_0_V_reg_834 <= sum_0_V_fu_487_p2;
                sum_1_V_reg_840 <= sum_1_V_fu_520_p2;
                sum_2_V_reg_846 <= sum_2_V_fu_553_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                sum_3_V_reg_901 <= sum_3_V_fu_638_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                sum_4_V_17_reg_852 <= sum_4_V_17_fu_559_p3;
                sum_4_V_18_reg_858 <= sum_4_V_18_fu_565_p3;
                sum_5_V_17_reg_864 <= sum_5_V_17_fu_571_p3;
                sum_5_V_18_reg_870 <= sum_5_V_18_fu_577_p3;
                sum_6_V_17_reg_876 <= sum_6_V_17_fu_583_p3;
                sum_6_V_18_reg_882 <= sum_6_V_18_fu_589_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln320_fu_316_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_s_reg_743 <= tmp_s_fu_328_p9;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    zext_ln1352_reg_770(2 downto 0) <= zext_ln1352_fu_362_p1(2 downto 0);
                    zext_ln161_reg_778(31 downto 0) <= zext_ln161_fu_366_p1(31 downto 0);
                    zext_ln215_33_reg_763(15 downto 0) <= zext_ln215_33_fu_359_p1(15 downto 0);
            end if;
        end if;
    end process;
    zext_ln215_36_reg_730(31 downto 16) <= "0000000000000000";
    zext_ln215_33_reg_763(31 downto 16) <= "0000000000000000";
    zext_ln1352_reg_770(3) <= '0';
    zext_ln161_reg_778(223 downto 32) <= "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln320_fu_316_p2, ap_CS_fsm_state6, icmp_ln322_fu_601_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln320_fu_316_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln322_fu_601_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln325_1_fu_420_p2 <= std_logic_vector(unsigned(zext_ln325_2_fu_416_p1) + unsigned(zext_ln1352_reg_770));
    add_ln325_2_fu_451_p2 <= std_logic_vector(unsigned(zext_ln325_3_fu_447_p1) + unsigned(zext_ln1352_reg_770));
    add_ln325_3_fu_611_p2 <= std_logic_vector(unsigned(zext_ln1352_reg_770) + unsigned(zext_ln325_4_fu_607_p1));
    add_ln325_fu_389_p2 <= std_logic_vector(unsigned(zext_ln325_1_fu_385_p1) + unsigned(zext_ln1352_reg_770));
    add_ln68_45_fu_648_p2 <= std_logic_vector(unsigned(add_ln68_reg_748) + unsigned(sum_V_1_0_reg_90));
    add_ln68_46_fu_347_p2 <= std_logic_vector(unsigned(sum_3_V_9_fu_68) + unsigned(sum_V_4_0_reg_114));
    add_ln68_47_fu_353_p2 <= std_logic_vector(unsigned(sum_V_5_0_reg_126) + unsigned(sum_V_6_0_reg_138));
    add_ln68_48_fu_653_p2 <= std_logic_vector(unsigned(add_ln68_47_reg_758) + unsigned(add_ln68_46_reg_753));
    add_ln68_fu_341_p2 <= std_logic_vector(unsigned(sum_V_0_0_reg_78) + unsigned(sum_V_2_0_reg_102));
    ai_0_V_fu_243_p1 <= a_V(16 - 1 downto 0);
    ai_3_V_fu_267_p4 <= a_V(63 downto 48);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(unsigned(add_ln68_48_reg_911) + unsigned(add_ln68_45_reg_906));
    i_fu_322_p2 <= std_logic_vector(unsigned(i3_0_reg_150) + unsigned(ap_const_lv3_1));
    icmp_ln215_17_fu_400_p2 <= "1" when (or_ln215_fu_394_p2 = ap_const_lv3_1) else "0";
    icmp_ln215_18_fu_431_p2 <= "1" when (or_ln215_5_fu_425_p2 = ap_const_lv3_2) else "0";
    icmp_ln215_fu_369_p2 <= "1" when (j_0_0_reg_162 = ap_const_lv3_0) else "0";
    icmp_ln320_fu_316_p2 <= "1" when (i3_0_reg_150 = ap_const_lv3_7) else "0";
    icmp_ln322_fu_601_p2 <= "1" when (or_ln322_fu_595_p2 = ap_const_lv3_7) else "0";
    mul_ln1352_25_fu_672_p0 <= mul_ln1352_25_fu_672_p00(16 - 1 downto 0);
    mul_ln1352_25_fu_672_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln215_17_fu_406_p3),32));
    mul_ln1352_25_fu_672_p1 <= zext_ln215_33_reg_763(16 - 1 downto 0);
    mul_ln1352_26_fu_677_p0 <= mul_ln1352_26_fu_677_p00(16 - 1 downto 0);
    mul_ln1352_26_fu_677_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln215_18_fu_437_p3),32));
    mul_ln1352_26_fu_677_p1 <= zext_ln215_33_reg_763(16 - 1 downto 0);
    mul_ln1352_27_fu_661_p0 <= zext_ln215_36_reg_730(16 - 1 downto 0);
    mul_ln1352_27_fu_661_p1 <= mul_ln1352_27_fu_661_p10(16 - 1 downto 0);
    mul_ln1352_27_fu_661_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_743),32));
    mul_ln1352_fu_667_p0 <= mul_ln1352_fu_667_p00(16 - 1 downto 0);
    mul_ln1352_fu_667_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln215_fu_375_p3),32));
    mul_ln1352_fu_667_p1 <= zext_ln215_33_reg_763(16 - 1 downto 0);
    or_ln215_5_fu_425_p2 <= (j_0_0_reg_162 or ap_const_lv3_2);
    or_ln215_fu_394_p2 <= (j_0_0_reg_162 or ap_const_lv3_1);
    or_ln322_fu_595_p2 <= (j_0_0_reg_162 or ap_const_lv3_3);
    select_ln215_17_fu_406_p3 <= 
        ai_1_V_reg_695 when (icmp_ln215_17_fu_400_p2(0) = '1') else 
        ai_5_V_reg_718;
    select_ln215_18_fu_437_p3 <= 
        ai_2_V_reg_701 when (icmp_ln215_18_fu_431_p2(0) = '1') else 
        ai_6_V_reg_724;
    select_ln215_fu_375_p3 <= 
        ai_0_V_reg_689 when (icmp_ln215_fu_369_p2(0) = '1') else 
        ai_4_V_reg_712;
    select_ln700_67_fu_513_p3 <= 
        sum_V_1_1_reg_185 when (icmp_ln215_17_reg_800(0) = '1') else 
        sum_V_5_1_reg_218;
    select_ln700_70_fu_546_p3 <= 
        sum_V_2_1_reg_196 when (icmp_ln215_18_reg_817(0) = '1') else 
        sum_V_6_1_reg_229;
    select_ln700_fu_480_p3 <= 
        sum_V_0_1_reg_174 when (icmp_ln215_reg_783(0) = '1') else 
        sum_V_4_1_reg_207;
    shl_ln1503_1_fu_507_p2 <= std_logic_vector(shift_left(unsigned(zext_ln161_1_fu_493_p1),to_integer(unsigned('0' & zext_ln1503_1_fu_503_p1(31-1 downto 0)))));
    shl_ln1503_2_fu_540_p2 <= std_logic_vector(shift_left(unsigned(zext_ln161_2_fu_526_p1),to_integer(unsigned('0' & zext_ln1503_2_fu_536_p1(31-1 downto 0)))));
    shl_ln1503_3_fu_633_p2 <= std_logic_vector(shift_left(unsigned(zext_ln161_reg_778),to_integer(unsigned('0' & zext_ln1503_3_fu_629_p1(31-1 downto 0)))));
    shl_ln1503_fu_470_p2 <= std_logic_vector(shift_left(unsigned(zext_ln325_fu_456_p1),to_integer(unsigned('0' & zext_ln1503_fu_466_p1(31-1 downto 0)))));
    shl_ln325_1_fu_496_p3 <= (add_ln325_1_reg_812 & ap_const_lv4_0);
    shl_ln325_2_fu_529_p3 <= (add_ln325_2_reg_829 & ap_const_lv4_0);
    shl_ln325_3_fu_622_p3 <= (add_ln325_3_reg_891 & ap_const_lv4_0);
    shl_ln_fu_459_p3 <= (add_ln325_reg_795 & ap_const_lv4_0);
    sum_0_V_fu_487_p2 <= std_logic_vector(unsigned(zext_ln1503_8_fu_476_p1) + unsigned(select_ln700_fu_480_p3));
    sum_1_V_fu_520_p2 <= std_logic_vector(unsigned(shl_ln1503_1_fu_507_p2) + unsigned(select_ln700_67_fu_513_p3));
    sum_2_V_fu_553_p2 <= std_logic_vector(unsigned(shl_ln1503_2_fu_540_p2) + unsigned(select_ln700_70_fu_546_p3));
    sum_3_V_fu_638_p2 <= std_logic_vector(unsigned(sum_3_V_9_fu_68) + unsigned(shl_ln1503_3_fu_633_p2));
    sum_4_V_17_fu_559_p3 <= 
        sum_0_V_reg_834 when (icmp_ln215_reg_783(0) = '1') else 
        sum_V_0_1_reg_174;
    sum_4_V_18_fu_565_p3 <= 
        sum_V_4_1_reg_207 when (icmp_ln215_reg_783(0) = '1') else 
        sum_0_V_reg_834;
    sum_5_V_17_fu_571_p3 <= 
        sum_1_V_reg_840 when (icmp_ln215_17_reg_800(0) = '1') else 
        sum_V_1_1_reg_185;
    sum_5_V_18_fu_577_p3 <= 
        sum_V_5_1_reg_218 when (icmp_ln215_17_reg_800(0) = '1') else 
        sum_1_V_reg_840;
    sum_6_V_17_fu_583_p3 <= 
        sum_2_V_reg_846 when (icmp_ln215_18_reg_817(0) = '1') else 
        sum_V_2_1_reg_196;
    sum_6_V_18_fu_589_p3 <= 
        sum_V_6_1_reg_229 when (icmp_ln215_18_reg_817(0) = '1') else 
        sum_2_V_reg_846;
    xor_ln322_fu_616_p2 <= (j_0_0_reg_162 xor ap_const_lv3_4);
    zext_ln1352_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_0_reg_150),4));
    zext_ln1503_1_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln325_1_fu_496_p3),224));
    zext_ln1503_2_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln325_2_fu_529_p3),224));
    zext_ln1503_3_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln325_3_fu_622_p3),224));
    zext_ln1503_8_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1503_fu_470_p2),224));
    zext_ln1503_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_459_p3),192));
    zext_ln161_1_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln1352_25_reg_807),224));
    zext_ln161_2_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln1352_26_reg_824),224));
    zext_ln161_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln1352_27_fu_661_p2),224));
    zext_ln215_33_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_743),32));
    zext_ln215_36_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ai_3_V_fu_267_p4),32));
    zext_ln325_1_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_0_reg_162),4));
    zext_ln325_2_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln215_fu_394_p2),4));
    zext_ln325_3_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln215_5_fu_425_p2),4));
    zext_ln325_4_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln322_fu_595_p2),4));
    zext_ln325_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln1352_reg_790),192));
end behav;
