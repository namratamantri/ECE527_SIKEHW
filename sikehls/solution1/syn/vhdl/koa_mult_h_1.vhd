-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity koa_mult_h_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_V : IN STD_LOGIC_VECTOR (223 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (447 downto 0) );
end;


architecture behav of koa_mult_h_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv224_lc_1 : STD_LOGIC_VECTOR (223 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv112_0 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv448_lc_1 : STD_LOGIC_VECTOR (447 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ah_V_fu_45_p4 : STD_LOGIC_VECTOR (111 downto 0);
    signal ah_V_reg_129 : STD_LOGIC_VECTOR (111 downto 0);
    signal al_V_fu_56_p1 : STD_LOGIC_VECTOR (111 downto 0);
    signal al_V_reg_134 : STD_LOGIC_VECTOR (111 downto 0);
    signal ahl_V_fu_69_p2 : STD_LOGIC_VECTOR (112 downto 0);
    signal ahl_V_reg_139 : STD_LOGIC_VECTOR (112 downto 0);
    signal grp_bc1_mult_fu_35_ap_return : STD_LOGIC_VECTOR (223 downto 0);
    signal a0_V_reg_144 : STD_LOGIC_VECTOR (223 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_bc1_mult_fu_35_ap_ready : STD_LOGIC;
    signal grp_bc1_mult_fu_35_ap_done : STD_LOGIC;
    signal grp_bc1_mult1_fu_40_ap_ready : STD_LOGIC;
    signal grp_bc1_mult1_fu_40_ap_done : STD_LOGIC;
    signal grp_bc1_mult_1_fu_30_ap_ready : STD_LOGIC;
    signal grp_bc1_mult_1_fu_30_ap_done : STD_LOGIC;
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal grp_bc1_mult1_fu_40_ap_return : STD_LOGIC_VECTOR (223 downto 0);
    signal a2_V_reg_150 : STD_LOGIC_VECTOR (223 downto 0);
    signal grp_bc1_mult_1_fu_30_ap_return : STD_LOGIC_VECTOR (225 downto 0);
    signal a1_V_reg_156 : STD_LOGIC_VECTOR (225 downto 0);
    signal ret_V_fu_82_p2 : STD_LOGIC_VECTOR (226 downto 0);
    signal ret_V_reg_161 : STD_LOGIC_VECTOR (226 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ret_V_6_fu_98_p2 : STD_LOGIC_VECTOR (226 downto 0);
    signal ret_V_6_reg_171 : STD_LOGIC_VECTOR (226 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_106_p2 : STD_LOGIC_VECTOR (447 downto 0);
    signal grp_bc1_mult_1_fu_30_ap_start : STD_LOGIC;
    signal grp_bc1_mult_1_fu_30_ap_idle : STD_LOGIC;
    signal grp_bc1_mult_fu_35_ap_start : STD_LOGIC;
    signal grp_bc1_mult_fu_35_ap_idle : STD_LOGIC;
    signal grp_bc1_mult1_fu_40_ap_start : STD_LOGIC;
    signal grp_bc1_mult1_fu_40_ap_idle : STD_LOGIC;
    signal grp_bc1_mult_1_fu_30_ap_start_reg : STD_LOGIC := '0';
    signal grp_bc1_mult_fu_35_ap_start_reg : STD_LOGIC := '0';
    signal grp_bc1_mult1_fu_40_ap_start_reg : STD_LOGIC := '0';
    signal sext_ln68_1_fu_65_p1 : STD_LOGIC_VECTOR (112 downto 0);
    signal sext_ln68_fu_61_p1 : STD_LOGIC_VECTOR (112 downto 0);
    signal lhs_V_fu_76_p1 : STD_LOGIC_VECTOR (226 downto 0);
    signal rhs_V_fu_79_p1 : STD_LOGIC_VECTOR (226 downto 0);
    signal sext_ln215_fu_95_p1 : STD_LOGIC_VECTOR (226 downto 0);
    signal grp_fu_106_p0 : STD_LOGIC_VECTOR (447 downto 0);
    signal grp_fu_106_p1 : STD_LOGIC_VECTOR (447 downto 0);
    signal r_V_5_fu_112_p3 : STD_LOGIC_VECTOR (338 downto 0);
    signal grp_fu_123_p1 : STD_LOGIC_VECTOR (447 downto 0);
    signal grp_fu_123_p2 : STD_LOGIC_VECTOR (447 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (447 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component bc1_mult_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ta_V : IN STD_LOGIC_VECTOR (112 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (225 downto 0) );
    end component;


    component bc1_mult IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_V : IN STD_LOGIC_VECTOR (111 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (223 downto 0) );
    end component;


    component bc1_mult1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_V : IN STD_LOGIC_VECTOR (111 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (223 downto 0) );
    end component;


    component mp_mul_add_448ns_fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (447 downto 0);
        din1 : IN STD_LOGIC_VECTOR (447 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (447 downto 0) );
    end component;



begin
    grp_bc1_mult_1_fu_30 : component bc1_mult_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_bc1_mult_1_fu_30_ap_start,
        ap_done => grp_bc1_mult_1_fu_30_ap_done,
        ap_idle => grp_bc1_mult_1_fu_30_ap_idle,
        ap_ready => grp_bc1_mult_1_fu_30_ap_ready,
        ta_V => ahl_V_reg_139,
        ap_return => grp_bc1_mult_1_fu_30_ap_return);

    grp_bc1_mult_fu_35 : component bc1_mult
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_bc1_mult_fu_35_ap_start,
        ap_done => grp_bc1_mult_fu_35_ap_done,
        ap_idle => grp_bc1_mult_fu_35_ap_idle,
        ap_ready => grp_bc1_mult_fu_35_ap_ready,
        a_V => ah_V_reg_129,
        ap_return => grp_bc1_mult_fu_35_ap_return);

    grp_bc1_mult1_fu_40 : component bc1_mult1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_bc1_mult1_fu_40_ap_start,
        ap_done => grp_bc1_mult1_fu_40_ap_done,
        ap_idle => grp_bc1_mult1_fu_40_ap_idle,
        ap_ready => grp_bc1_mult1_fu_40_ap_ready,
        a_V => al_V_reg_134,
        ap_return => grp_bc1_mult1_fu_40_ap_return);

    mp_mul_add_448ns_fYi_U41 : component mp_mul_add_448ns_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 448,
        din1_WIDTH => 448,
        dout_WIDTH => 448)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_106_p0,
        din1 => grp_fu_106_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_106_p2);

    mp_mul_add_448ns_fYi_U42 : component mp_mul_add_448ns_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 448,
        din1_WIDTH => 448,
        dout_WIDTH => 448)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_106_p2,
        din1 => grp_fu_123_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_123_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv448_lc_1;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_return_preg <= grp_fu_123_p2;
                end if; 
            end if;
        end if;
    end process;


    grp_bc1_mult1_fu_40_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_bc1_mult1_fu_40_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_bc1_mult1_fu_40_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_bc1_mult1_fu_40_ap_ready = ap_const_logic_1)) then 
                    grp_bc1_mult1_fu_40_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_bc1_mult_1_fu_30_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_bc1_mult_1_fu_30_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_bc1_mult_1_fu_30_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_bc1_mult_1_fu_30_ap_ready = ap_const_logic_1)) then 
                    grp_bc1_mult_1_fu_30_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_bc1_mult_fu_35_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_bc1_mult_fu_35_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_bc1_mult_fu_35_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_bc1_mult_fu_35_ap_ready = ap_const_logic_1)) then 
                    grp_bc1_mult_fu_35_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                a0_V_reg_144 <= grp_bc1_mult_fu_35_ap_return;
                a1_V_reg_156 <= grp_bc1_mult_1_fu_30_ap_return;
                a2_V_reg_150 <= grp_bc1_mult1_fu_40_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                ah_V_reg_129 <= a_V(223 downto 112);
                ahl_V_reg_139 <= ahl_V_fu_69_p2;
                al_V_reg_134 <= al_V_fu_56_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                ret_V_6_reg_171 <= ret_V_6_fu_98_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                ret_V_reg_161 <= ret_V_fu_82_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ah_V_fu_45_p4 <= a_V(223 downto 112);
    ahl_V_fu_69_p2 <= std_logic_vector(signed(sext_ln68_1_fu_65_p1) + signed(sext_ln68_fu_61_p1));
    al_V_fu_56_p1 <= a_V(112 - 1 downto 0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_block_state2_on_subcall_done_assign_proc : process(grp_bc1_mult_fu_35_ap_done, grp_bc1_mult1_fu_40_ap_done, grp_bc1_mult_1_fu_30_ap_done)
    begin
                ap_block_state2_on_subcall_done <= ((grp_bc1_mult_1_fu_30_ap_done = ap_const_logic_0) or (grp_bc1_mult1_fu_40_ap_done = ap_const_logic_0) or (grp_bc1_mult_fu_35_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(grp_fu_123_p2, ap_return_preg, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_return <= grp_fu_123_p2;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    grp_bc1_mult1_fu_40_ap_start <= grp_bc1_mult1_fu_40_ap_start_reg;
    grp_bc1_mult_1_fu_30_ap_start <= grp_bc1_mult_1_fu_30_ap_start_reg;
    grp_bc1_mult_fu_35_ap_start <= grp_bc1_mult_fu_35_ap_start_reg;
    grp_fu_106_p0 <= (a0_V_reg_144 & ap_const_lv224_lc_1);
        grp_fu_106_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a2_V_reg_150),448));

        grp_fu_123_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_5_fu_112_p3),448));

        lhs_V_fu_76_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a1_V_reg_156),227));

    r_V_5_fu_112_p3 <= (ret_V_6_reg_171 & ap_const_lv112_0);
    ret_V_6_fu_98_p2 <= std_logic_vector(unsigned(ret_V_reg_161) - unsigned(sext_ln215_fu_95_p1));
    ret_V_fu_82_p2 <= std_logic_vector(signed(lhs_V_fu_76_p1) - signed(rhs_V_fu_79_p1));
        rhs_V_fu_79_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a0_V_reg_144),227));

        sext_ln215_fu_95_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a2_V_reg_150),227));

        sext_ln68_1_fu_65_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(al_V_fu_56_p1),113));

        sext_ln68_fu_61_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ah_V_fu_45_p4),113));

end behav;
