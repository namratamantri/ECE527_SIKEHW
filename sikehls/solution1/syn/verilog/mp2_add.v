// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mp2_add (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_0_V_read,
        a_1_V_read,
        b_0_V_read,
        b_1_V_read,
        c_V_address0,
        c_V_ce0,
        c_V_we0,
        c_V_d0,
        c_V_address1,
        c_V_ce1,
        c_V_we1,
        c_V_d1
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [447:0] a_0_V_read;
input  [447:0] a_1_V_read;
input  [447:0] b_0_V_read;
input  [447:0] b_1_V_read;
output  [0:0] c_V_address0;
output   c_V_ce0;
output   c_V_we0;
output  [447:0] c_V_d0;
output  [0:0] c_V_address1;
output   c_V_ce1;
output   c_V_we1;
output  [447:0] c_V_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg c_V_ce0;
reg c_V_we0;
reg c_V_ce1;
reg c_V_we1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
wire   [447:0] grp_fu_67_p2;
wire   [447:0] grp_fu_74_p2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

eval_4_isog_add_4fYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 448 ),
    .din1_WIDTH( 448 ),
    .dout_WIDTH( 448 ))
eval_4_isog_add_4fYi_U43(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_0_V_read),
    .din1(a_0_V_read),
    .ce(1'b1),
    .dout(grp_fu_67_p2)
);

eval_4_isog_add_4fYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 448 ),
    .din1_WIDTH( 448 ),
    .dout_WIDTH( 448 ))
eval_4_isog_add_4fYi_U44(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_1_V_read),
    .din1(a_1_V_read),
    .ce(1'b1),
    .dout(grp_fu_74_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        c_V_ce0 = 1'b1;
    end else begin
        c_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        c_V_ce1 = 1'b1;
    end else begin
        c_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        c_V_we0 = 1'b1;
    end else begin
        c_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        c_V_we1 = 1'b1;
    end else begin
        c_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign c_V_address0 = 64'd0;

assign c_V_address1 = 64'd1;

assign c_V_d0 = grp_fu_67_p2;

assign c_V_d1 = grp_fu_74_p2;

endmodule //mp2_add
