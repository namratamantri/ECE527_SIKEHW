// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module koa_mult_h_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_V,
        ap_return
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [223:0] a_V;
output  [447:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[447:0] ap_return;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [111:0] ah_V_fu_45_p4;
reg   [111:0] ah_V_reg_129;
wire  signed [111:0] al_V_fu_56_p1;
reg   [111:0] al_V_reg_134;
wire   [112:0] ahl_V_fu_69_p2;
reg   [112:0] ahl_V_reg_139;
wire   [223:0] grp_bc1_mult_fu_35_ap_return;
reg  signed [223:0] a0_V_reg_144;
wire    ap_CS_fsm_state2;
wire    grp_bc1_mult_fu_35_ap_ready;
wire    grp_bc1_mult_fu_35_ap_done;
wire    grp_bc1_mult1_fu_40_ap_ready;
wire    grp_bc1_mult1_fu_40_ap_done;
wire    grp_bc1_mult_1_fu_30_ap_ready;
wire    grp_bc1_mult_1_fu_30_ap_done;
reg    ap_block_state2_on_subcall_done;
wire   [223:0] grp_bc1_mult1_fu_40_ap_return;
reg  signed [223:0] a2_V_reg_150;
wire   [225:0] grp_bc1_mult_1_fu_30_ap_return;
reg   [225:0] a1_V_reg_156;
wire   [226:0] ret_V_fu_82_p2;
reg   [226:0] ret_V_reg_161;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire   [226:0] ret_V_6_fu_98_p2;
reg   [226:0] ret_V_6_reg_171;
wire    ap_CS_fsm_state5;
wire   [447:0] grp_fu_106_p2;
wire    grp_bc1_mult_1_fu_30_ap_start;
wire    grp_bc1_mult_1_fu_30_ap_idle;
wire    grp_bc1_mult_fu_35_ap_start;
wire    grp_bc1_mult_fu_35_ap_idle;
wire    grp_bc1_mult1_fu_40_ap_start;
wire    grp_bc1_mult1_fu_40_ap_idle;
reg    grp_bc1_mult_1_fu_30_ap_start_reg;
reg    grp_bc1_mult_fu_35_ap_start_reg;
reg    grp_bc1_mult1_fu_40_ap_start_reg;
wire  signed [112:0] sext_ln68_1_fu_65_p1;
wire  signed [112:0] sext_ln68_fu_61_p1;
wire  signed [226:0] lhs_V_fu_76_p1;
wire  signed [226:0] rhs_V_fu_79_p1;
wire  signed [226:0] sext_ln215_fu_95_p1;
wire   [447:0] grp_fu_106_p0;
wire  signed [447:0] grp_fu_106_p1;
wire   [338:0] r_V_5_fu_112_p3;
wire  signed [447:0] grp_fu_123_p1;
wire   [447:0] grp_fu_123_p2;
reg   [447:0] ap_return_preg;
wire    ap_CS_fsm_state6;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 grp_bc1_mult_1_fu_30_ap_start_reg = 1'b0;
#0 grp_bc1_mult_fu_35_ap_start_reg = 1'b0;
#0 grp_bc1_mult1_fu_40_ap_start_reg = 1'b0;
#0 ap_return_preg = 448'd0;
end

bc1_mult_1 grp_bc1_mult_1_fu_30(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_bc1_mult_1_fu_30_ap_start),
    .ap_done(grp_bc1_mult_1_fu_30_ap_done),
    .ap_idle(grp_bc1_mult_1_fu_30_ap_idle),
    .ap_ready(grp_bc1_mult_1_fu_30_ap_ready),
    .ta_V(ahl_V_reg_139),
    .ap_return(grp_bc1_mult_1_fu_30_ap_return)
);

bc1_mult grp_bc1_mult_fu_35(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_bc1_mult_fu_35_ap_start),
    .ap_done(grp_bc1_mult_fu_35_ap_done),
    .ap_idle(grp_bc1_mult_fu_35_ap_idle),
    .ap_ready(grp_bc1_mult_fu_35_ap_ready),
    .a_V(ah_V_reg_129),
    .ap_return(grp_bc1_mult_fu_35_ap_return)
);

bc1_mult1 grp_bc1_mult1_fu_40(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_bc1_mult1_fu_40_ap_start),
    .ap_done(grp_bc1_mult1_fu_40_ap_done),
    .ap_idle(grp_bc1_mult1_fu_40_ap_idle),
    .ap_ready(grp_bc1_mult1_fu_40_ap_ready),
    .a_V(al_V_reg_134),
    .ap_return(grp_bc1_mult1_fu_40_ap_return)
);

mp_mul_add_448ns_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 448 ),
    .din1_WIDTH( 448 ),
    .dout_WIDTH( 448 ))
mp_mul_add_448ns_fYi_U41(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_106_p0),
    .din1(grp_fu_106_p1),
    .ce(1'b1),
    .dout(grp_fu_106_p2)
);

mp_mul_add_448ns_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 448 ),
    .din1_WIDTH( 448 ),
    .dout_WIDTH( 448 ))
mp_mul_add_448ns_fYi_U42(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_106_p2),
    .din1(grp_fu_123_p1),
    .ce(1'b1),
    .dout(grp_fu_123_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 448'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_return_preg <= grp_fu_123_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_bc1_mult1_fu_40_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_bc1_mult1_fu_40_ap_start_reg <= 1'b1;
        end else if ((grp_bc1_mult1_fu_40_ap_ready == 1'b1)) begin
            grp_bc1_mult1_fu_40_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_bc1_mult_1_fu_30_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_bc1_mult_1_fu_30_ap_start_reg <= 1'b1;
        end else if ((grp_bc1_mult_1_fu_30_ap_ready == 1'b1)) begin
            grp_bc1_mult_1_fu_30_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_bc1_mult_fu_35_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_bc1_mult_fu_35_ap_start_reg <= 1'b1;
        end else if ((grp_bc1_mult_fu_35_ap_ready == 1'b1)) begin
            grp_bc1_mult_fu_35_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        a0_V_reg_144 <= grp_bc1_mult_fu_35_ap_return;
        a1_V_reg_156 <= grp_bc1_mult_1_fu_30_ap_return;
        a2_V_reg_150 <= grp_bc1_mult1_fu_40_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ah_V_reg_129 <= {{a_V[223:112]}};
        ahl_V_reg_139 <= ahl_V_fu_69_p2;
        al_V_reg_134 <= al_V_fu_56_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ret_V_6_reg_171 <= ret_V_6_fu_98_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ret_V_reg_161 <= ret_V_fu_82_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_return = grp_fu_123_p2;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ah_V_fu_45_p4 = {{a_V[223:112]}};

assign ahl_V_fu_69_p2 = ($signed(sext_ln68_1_fu_65_p1) + $signed(sext_ln68_fu_61_p1));

assign al_V_fu_56_p1 = a_V[111:0];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state2_on_subcall_done = ((grp_bc1_mult_1_fu_30_ap_done == 1'b0) | (grp_bc1_mult1_fu_40_ap_done == 1'b0) | (grp_bc1_mult_fu_35_ap_done == 1'b0));
end

assign grp_bc1_mult1_fu_40_ap_start = grp_bc1_mult1_fu_40_ap_start_reg;

assign grp_bc1_mult_1_fu_30_ap_start = grp_bc1_mult_1_fu_30_ap_start_reg;

assign grp_bc1_mult_fu_35_ap_start = grp_bc1_mult_fu_35_ap_start_reg;

assign grp_fu_106_p0 = {{a0_V_reg_144}, {224'd0}};

assign grp_fu_106_p1 = a2_V_reg_150;

assign grp_fu_123_p1 = $signed(r_V_5_fu_112_p3);

assign lhs_V_fu_76_p1 = $signed(a1_V_reg_156);

assign r_V_5_fu_112_p3 = {{ret_V_6_reg_171}, {112'd0}};

assign ret_V_6_fu_98_p2 = ($signed(ret_V_reg_161) - $signed(sext_ln215_fu_95_p1));

assign ret_V_fu_82_p2 = ($signed(lhs_V_fu_76_p1) - $signed(rhs_V_fu_79_p1));

assign rhs_V_fu_79_p1 = a0_V_reg_144;

assign sext_ln215_fu_95_p1 = a2_V_reg_150;

assign sext_ln68_1_fu_65_p1 = al_V_fu_56_p1;

assign sext_ln68_fu_61_p1 = ah_V_fu_45_p4;

endmodule //koa_mult_h_1
