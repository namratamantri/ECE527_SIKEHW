// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mp_mul,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.315500,HLS_SYN_LAT=88,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=36,HLS_SYN_FF=71008,HLS_SYN_LUT=74736,HLS_VERSION=2019_1}" *)

module mp_mul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_V,
        b_V,
        c_V,
        c_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [447:0] a_V;
input  [447:0] b_V;
output  [895:0] c_V;
output   c_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg c_V_ap_vld;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [223:0] al_V_fu_126_p1;
reg   [223:0] al_V_reg_374;
reg   [111:0] ah_V_1_reg_379;
reg   [111:0] al_V_3_reg_385;
reg   [111:0] ah_V_2_reg_391;
wire  signed [112:0] al_V_4_fu_188_p2;
reg   [112:0] al_V_4_reg_397;
wire   [112:0] ahl_V_2_fu_200_p2;
reg   [112:0] ahl_V_2_reg_403;
wire    ap_CS_fsm_state2;
wire   [113:0] ahl_V_3_fu_213_p2;
reg   [113:0] ahl_V_3_reg_408;
wire   [223:0] grp_bc_mult_fu_101_ap_return;
reg  signed [223:0] a0_V_reg_413;
wire    ap_CS_fsm_state3;
wire    grp_bc_mult_fu_101_ap_ready;
wire    grp_bc_mult_fu_101_ap_done;
wire    grp_bc_mult1_fu_106_ap_ready;
wire    grp_bc_mult1_fu_106_ap_done;
wire    grp_bc_mult_1_fu_91_ap_ready;
wire    grp_bc_mult_1_fu_91_ap_done;
wire    grp_koa_mult_h_1_fu_81_ap_ready;
wire    grp_koa_mult_h_1_fu_81_ap_done;
wire    grp_bc2_mult_fu_111_ap_ready;
wire    grp_bc2_mult_fu_111_ap_done;
wire    grp_bc2_mult_1_fu_96_ap_ready;
wire    grp_bc2_mult_1_fu_96_ap_done;
wire    grp_bc_mult_2_fu_86_ap_ready;
wire    grp_bc_mult_2_fu_86_ap_done;
reg    ap_block_state3_on_subcall_done;
wire   [223:0] grp_bc_mult1_fu_106_ap_return;
reg  signed [223:0] a2_V_reg_419;
wire   [225:0] grp_bc_mult_1_fu_91_ap_return;
reg   [225:0] a1_V_reg_425;
wire   [447:0] grp_koa_mult_h_1_fu_81_ap_return;
reg   [447:0] a2_V_1_reg_430;
wire   [223:0] grp_bc2_mult_fu_111_ap_return;
reg  signed [223:0] a0_V_2_reg_436;
wire   [225:0] grp_bc2_mult_1_fu_96_ap_return;
reg  signed [225:0] a2_V_2_reg_442;
wire   [227:0] grp_bc_mult_2_fu_86_ap_return;
reg   [227:0] a1_V_1_reg_448;
wire   [226:0] ret_V_fu_226_p2;
reg   [226:0] ret_V_reg_453;
wire    ap_CS_fsm_state4;
wire   [228:0] ret_V_2_fu_238_p2;
reg   [228:0] ret_V_2_reg_458;
wire   [226:0] ret_V_1_fu_247_p2;
reg   [226:0] ret_V_1_reg_463;
wire    ap_CS_fsm_state5;
wire   [228:0] ret_V_3_fu_255_p2;
reg   [228:0] ret_V_3_reg_468;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire   [447:0] grp_fu_303_p2;
reg   [447:0] a0_V_1_reg_513;
wire    ap_CS_fsm_state8;
wire   [450:0] grp_fu_334_p2;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    grp_koa_mult_h_1_fu_81_ap_start;
wire    grp_koa_mult_h_1_fu_81_ap_idle;
wire    grp_bc_mult_2_fu_86_ap_start;
wire    grp_bc_mult_2_fu_86_ap_idle;
wire    grp_bc_mult_1_fu_91_ap_start;
wire    grp_bc_mult_1_fu_91_ap_idle;
wire    grp_bc2_mult_1_fu_96_ap_start;
wire    grp_bc2_mult_1_fu_96_ap_idle;
wire    grp_bc_mult_fu_101_ap_start;
wire    grp_bc_mult_fu_101_ap_idle;
wire    grp_bc_mult1_fu_106_ap_start;
wire    grp_bc_mult1_fu_106_ap_idle;
wire    grp_bc2_mult_fu_111_ap_start;
wire    grp_bc2_mult_fu_111_ap_idle;
reg    grp_koa_mult_h_1_fu_81_ap_start_reg;
reg    grp_bc_mult_2_fu_86_ap_start_reg;
reg    grp_bc_mult_1_fu_91_ap_start_reg;
reg    grp_bc2_mult_1_fu_96_ap_start_reg;
reg    grp_bc_mult_fu_101_ap_start_reg;
reg    grp_bc_mult1_fu_106_ap_start_reg;
reg    grp_bc2_mult_fu_111_ap_start_reg;
wire   [895:0] grp_fu_367_p2;
wire    ap_CS_fsm_state11;
wire   [223:0] ah_V_fu_116_p4;
wire  signed [224:0] sext_ln68_fu_130_p1;
wire  signed [224:0] sext_ln68_1_fu_134_p1;
wire   [224:0] ahl_V_fu_152_p2;
wire   [112:0] trunc_ln68_fu_148_p1;
wire   [112:0] tmp_fu_138_p4;
wire  signed [112:0] sext_ln68_2_fu_194_p1;
wire  signed [112:0] sext_ln68_3_fu_197_p1;
wire  signed [113:0] sext_ln68_5_fu_210_p1;
wire  signed [113:0] sext_ln68_4_fu_207_p1;
wire  signed [226:0] lhs_V_fu_220_p1;
wire  signed [226:0] rhs_V_fu_223_p1;
wire  signed [228:0] lhs_V_1_fu_232_p1;
wire  signed [228:0] rhs_V_1_fu_235_p1;
wire  signed [226:0] sext_ln215_fu_244_p1;
wire  signed [228:0] sext_ln215_3_fu_252_p1;
wire   [338:0] grp_fu_270_p0;
wire  signed [338:0] grp_fu_270_p1;
wire   [341:0] grp_fu_286_p0;
wire  signed [341:0] grp_fu_286_p1;
wire   [338:0] grp_fu_270_p2;
wire  signed [447:0] grp_fu_303_p0;
wire   [447:0] grp_fu_303_p1;
wire   [341:0] grp_fu_286_p2;
wire  signed [449:0] grp_fu_320_p0;
wire   [449:0] grp_fu_320_p1;
wire   [449:0] grp_fu_320_p2;
wire   [450:0] grp_fu_334_p0;
wire   [450:0] grp_fu_334_p1;
wire   [450:0] grp_fu_343_p1;
wire   [450:0] grp_fu_343_p2;
wire   [674:0] r_V_4_fu_349_p3;
wire   [895:0] grp_fu_367_p0;
wire  signed [895:0] grp_fu_367_p1;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 grp_koa_mult_h_1_fu_81_ap_start_reg = 1'b0;
#0 grp_bc_mult_2_fu_86_ap_start_reg = 1'b0;
#0 grp_bc_mult_1_fu_91_ap_start_reg = 1'b0;
#0 grp_bc2_mult_1_fu_96_ap_start_reg = 1'b0;
#0 grp_bc_mult_fu_101_ap_start_reg = 1'b0;
#0 grp_bc_mult1_fu_106_ap_start_reg = 1'b0;
#0 grp_bc2_mult_fu_111_ap_start_reg = 1'b0;
end

koa_mult_h_1 grp_koa_mult_h_1_fu_81(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_koa_mult_h_1_fu_81_ap_start),
    .ap_done(grp_koa_mult_h_1_fu_81_ap_done),
    .ap_idle(grp_koa_mult_h_1_fu_81_ap_idle),
    .ap_ready(grp_koa_mult_h_1_fu_81_ap_ready),
    .a_V(al_V_reg_374),
    .ap_return(grp_koa_mult_h_1_fu_81_ap_return)
);

bc_mult_2 grp_bc_mult_2_fu_86(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_bc_mult_2_fu_86_ap_start),
    .ap_done(grp_bc_mult_2_fu_86_ap_done),
    .ap_idle(grp_bc_mult_2_fu_86_ap_idle),
    .ap_ready(grp_bc_mult_2_fu_86_ap_ready),
    .ta_V(ahl_V_3_reg_408),
    .ap_return(grp_bc_mult_2_fu_86_ap_return)
);

bc_mult_1 grp_bc_mult_1_fu_91(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_bc_mult_1_fu_91_ap_start),
    .ap_done(grp_bc_mult_1_fu_91_ap_done),
    .ap_idle(grp_bc_mult_1_fu_91_ap_idle),
    .ap_ready(grp_bc_mult_1_fu_91_ap_ready),
    .ta_V(ahl_V_2_reg_403),
    .ap_return(grp_bc_mult_1_fu_91_ap_return)
);

bc2_mult_1 grp_bc2_mult_1_fu_96(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_bc2_mult_1_fu_96_ap_start),
    .ap_done(grp_bc2_mult_1_fu_96_ap_done),
    .ap_idle(grp_bc2_mult_1_fu_96_ap_idle),
    .ap_ready(grp_bc2_mult_1_fu_96_ap_ready),
    .ta_V(al_V_4_reg_397),
    .ap_return(grp_bc2_mult_1_fu_96_ap_return)
);

bc_mult grp_bc_mult_fu_101(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_bc_mult_fu_101_ap_start),
    .ap_done(grp_bc_mult_fu_101_ap_done),
    .ap_idle(grp_bc_mult_fu_101_ap_idle),
    .ap_ready(grp_bc_mult_fu_101_ap_ready),
    .a_V(ah_V_1_reg_379),
    .ap_return(grp_bc_mult_fu_101_ap_return)
);

bc_mult1 grp_bc_mult1_fu_106(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_bc_mult1_fu_106_ap_start),
    .ap_done(grp_bc_mult1_fu_106_ap_done),
    .ap_idle(grp_bc_mult1_fu_106_ap_idle),
    .ap_ready(grp_bc_mult1_fu_106_ap_ready),
    .a_V(al_V_3_reg_385),
    .ap_return(grp_bc_mult1_fu_106_ap_return)
);

bc2_mult grp_bc2_mult_fu_111(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_bc2_mult_fu_111_ap_start),
    .ap_done(grp_bc2_mult_fu_111_ap_done),
    .ap_idle(grp_bc2_mult_fu_111_ap_idle),
    .ap_ready(grp_bc2_mult_fu_111_ap_ready),
    .a_V(ah_V_2_reg_391),
    .ap_return(grp_bc2_mult_fu_111_ap_return)
);

mp_mul_add_339ns_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 339 ),
    .din1_WIDTH( 339 ),
    .dout_WIDTH( 339 ))
mp_mul_add_339ns_g8j_U63(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_270_p0),
    .din1(grp_fu_270_p1),
    .ce(1'b1),
    .dout(grp_fu_270_p2)
);

mp_mul_add_342ns_hbi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 342 ),
    .din1_WIDTH( 342 ),
    .dout_WIDTH( 342 ))
mp_mul_add_342ns_hbi_U64(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_286_p0),
    .din1(grp_fu_286_p1),
    .ce(1'b1),
    .dout(grp_fu_286_p2)
);

mp_mul_add_448s_4ibs #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 448 ),
    .din1_WIDTH( 448 ),
    .dout_WIDTH( 448 ))
mp_mul_add_448s_4ibs_U65(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_303_p0),
    .din1(grp_fu_303_p1),
    .ce(1'b1),
    .dout(grp_fu_303_p2)
);

mp_mul_add_450s_4jbC #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 450 ),
    .din1_WIDTH( 450 ),
    .dout_WIDTH( 450 ))
mp_mul_add_450s_4jbC_U66(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_320_p0),
    .din1(grp_fu_320_p1),
    .ce(1'b1),
    .dout(grp_fu_320_p2)
);

mp_mul_sub_451ns_kbM #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 451 ),
    .din1_WIDTH( 451 ),
    .dout_WIDTH( 451 ))
mp_mul_sub_451ns_kbM_U67(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_334_p0),
    .din1(grp_fu_334_p1),
    .ce(1'b1),
    .dout(grp_fu_334_p2)
);

mp_mul_sub_451ns_kbM #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 451 ),
    .din1_WIDTH( 451 ),
    .dout_WIDTH( 451 ))
mp_mul_sub_451ns_kbM_U68(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_334_p2),
    .din1(grp_fu_343_p1),
    .ce(1'b1),
    .dout(grp_fu_343_p2)
);

mp_mul_add_896ns_lbW #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 896 ),
    .din1_WIDTH( 896 ),
    .dout_WIDTH( 896 ))
mp_mul_add_896ns_lbW_U69(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_367_p0),
    .din1(grp_fu_367_p1),
    .ce(1'b1),
    .dout(grp_fu_367_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_bc2_mult_1_fu_96_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_bc2_mult_1_fu_96_ap_start_reg <= 1'b1;
        end else if ((grp_bc2_mult_1_fu_96_ap_ready == 1'b1)) begin
            grp_bc2_mult_1_fu_96_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_bc2_mult_fu_111_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_bc2_mult_fu_111_ap_start_reg <= 1'b1;
        end else if ((grp_bc2_mult_fu_111_ap_ready == 1'b1)) begin
            grp_bc2_mult_fu_111_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_bc_mult1_fu_106_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_bc_mult1_fu_106_ap_start_reg <= 1'b1;
        end else if ((grp_bc_mult1_fu_106_ap_ready == 1'b1)) begin
            grp_bc_mult1_fu_106_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_bc_mult_1_fu_91_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_bc_mult_1_fu_91_ap_start_reg <= 1'b1;
        end else if ((grp_bc_mult_1_fu_91_ap_ready == 1'b1)) begin
            grp_bc_mult_1_fu_91_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_bc_mult_2_fu_86_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_bc_mult_2_fu_86_ap_start_reg <= 1'b1;
        end else if ((grp_bc_mult_2_fu_86_ap_ready == 1'b1)) begin
            grp_bc_mult_2_fu_86_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_bc_mult_fu_101_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_bc_mult_fu_101_ap_start_reg <= 1'b1;
        end else if ((grp_bc_mult_fu_101_ap_ready == 1'b1)) begin
            grp_bc_mult_fu_101_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_koa_mult_h_1_fu_81_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_koa_mult_h_1_fu_81_ap_start_reg <= 1'b1;
        end else if ((grp_koa_mult_h_1_fu_81_ap_ready == 1'b1)) begin
            grp_koa_mult_h_1_fu_81_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        a0_V_1_reg_513 <= grp_fu_303_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
        a0_V_2_reg_436 <= grp_bc2_mult_fu_111_ap_return;
        a0_V_reg_413 <= grp_bc_mult_fu_101_ap_return;
        a1_V_1_reg_448 <= grp_bc_mult_2_fu_86_ap_return;
        a1_V_reg_425 <= grp_bc_mult_1_fu_91_ap_return;
        a2_V_1_reg_430 <= grp_koa_mult_h_1_fu_81_ap_return;
        a2_V_2_reg_442 <= grp_bc2_mult_1_fu_96_ap_return;
        a2_V_reg_419 <= grp_bc_mult1_fu_106_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ah_V_1_reg_379 <= {{a_V[447:336]}};
        ah_V_2_reg_391 <= {{ahl_V_fu_152_p2[224:113]}};
        al_V_3_reg_385 <= {{a_V[335:224]}};
        al_V_4_reg_397 <= al_V_4_fu_188_p2;
        al_V_reg_374 <= al_V_fu_126_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ahl_V_2_reg_403 <= ahl_V_2_fu_200_p2;
        ahl_V_3_reg_408 <= ahl_V_3_fu_213_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ret_V_1_reg_463 <= ret_V_1_fu_247_p2;
        ret_V_3_reg_468 <= ret_V_3_fu_255_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ret_V_2_reg_458 <= ret_V_2_fu_238_p2;
        ret_V_reg_453 <= ret_V_fu_226_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        c_V_ap_vld = 1'b1;
    end else begin
        c_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ah_V_fu_116_p4 = {{a_V[447:224]}};

assign ahl_V_2_fu_200_p2 = ($signed(sext_ln68_2_fu_194_p1) + $signed(sext_ln68_3_fu_197_p1));

assign ahl_V_3_fu_213_p2 = ($signed(sext_ln68_5_fu_210_p1) + $signed(sext_ln68_4_fu_207_p1));

assign ahl_V_fu_152_p2 = ($signed(sext_ln68_fu_130_p1) + $signed(sext_ln68_1_fu_134_p1));

assign al_V_4_fu_188_p2 = (trunc_ln68_fu_148_p1 + tmp_fu_138_p4);

assign al_V_fu_126_p1 = a_V[223:0];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state3_on_subcall_done = ((grp_bc_mult_2_fu_86_ap_done == 1'b0) | (grp_bc2_mult_1_fu_96_ap_done == 1'b0) | (grp_bc2_mult_fu_111_ap_done == 1'b0) | (grp_koa_mult_h_1_fu_81_ap_done == 1'b0) | (grp_bc_mult_1_fu_91_ap_done == 1'b0) | (grp_bc_mult1_fu_106_ap_done == 1'b0) | (grp_bc_mult_fu_101_ap_done == 1'b0));
end

assign c_V = grp_fu_367_p2;

assign grp_bc2_mult_1_fu_96_ap_start = grp_bc2_mult_1_fu_96_ap_start_reg;

assign grp_bc2_mult_fu_111_ap_start = grp_bc2_mult_fu_111_ap_start_reg;

assign grp_bc_mult1_fu_106_ap_start = grp_bc_mult1_fu_106_ap_start_reg;

assign grp_bc_mult_1_fu_91_ap_start = grp_bc_mult_1_fu_91_ap_start_reg;

assign grp_bc_mult_2_fu_86_ap_start = grp_bc_mult_2_fu_86_ap_start_reg;

assign grp_bc_mult_fu_101_ap_start = grp_bc_mult_fu_101_ap_start_reg;

assign grp_fu_270_p0 = {{ret_V_1_reg_463}, {112'd0}};

assign grp_fu_270_p1 = a2_V_reg_419;

assign grp_fu_286_p0 = {{ret_V_3_reg_468}, {113'd0}};

assign grp_fu_286_p1 = a2_V_2_reg_442;

assign grp_fu_303_p0 = $signed(grp_fu_270_p2);

assign grp_fu_303_p1 = {{a0_V_reg_413}, {224'd0}};

assign grp_fu_320_p0 = $signed(grp_fu_286_p2);

assign grp_fu_320_p1 = {{a0_V_2_reg_436}, {226'd0}};

assign grp_fu_334_p0 = grp_fu_320_p2;

assign grp_fu_334_p1 = grp_fu_303_p2;

assign grp_fu_343_p1 = a2_V_1_reg_430;

assign grp_fu_367_p0 = {{a0_V_1_reg_513}, {a2_V_1_reg_430}};

assign grp_fu_367_p1 = $signed(r_V_4_fu_349_p3);

assign grp_koa_mult_h_1_fu_81_ap_start = grp_koa_mult_h_1_fu_81_ap_start_reg;

assign lhs_V_1_fu_232_p1 = $signed(a1_V_1_reg_448);

assign lhs_V_fu_220_p1 = $signed(a1_V_reg_425);

assign r_V_4_fu_349_p3 = {{grp_fu_343_p2}, {224'd0}};

assign ret_V_1_fu_247_p2 = ($signed(ret_V_reg_453) - $signed(sext_ln215_fu_244_p1));

assign ret_V_2_fu_238_p2 = ($signed(lhs_V_1_fu_232_p1) - $signed(rhs_V_1_fu_235_p1));

assign ret_V_3_fu_255_p2 = ($signed(ret_V_2_reg_458) - $signed(sext_ln215_3_fu_252_p1));

assign ret_V_fu_226_p2 = ($signed(lhs_V_fu_220_p1) - $signed(rhs_V_fu_223_p1));

assign rhs_V_1_fu_235_p1 = a0_V_2_reg_436;

assign rhs_V_fu_223_p1 = a0_V_reg_413;

assign sext_ln215_3_fu_252_p1 = a2_V_2_reg_442;

assign sext_ln215_fu_244_p1 = a2_V_reg_419;

assign sext_ln68_1_fu_134_p1 = al_V_fu_126_p1;

assign sext_ln68_2_fu_194_p1 = $signed(ah_V_1_reg_379);

assign sext_ln68_3_fu_197_p1 = $signed(al_V_3_reg_385);

assign sext_ln68_4_fu_207_p1 = $signed(ah_V_2_reg_391);

assign sext_ln68_5_fu_210_p1 = $signed(al_V_4_reg_397);

assign sext_ln68_fu_130_p1 = $signed(ah_V_fu_116_p4);

assign tmp_fu_138_p4 = {{a_V[336:224]}};

assign trunc_ln68_fu_148_p1 = a_V[112:0];

endmodule //mp_mul
