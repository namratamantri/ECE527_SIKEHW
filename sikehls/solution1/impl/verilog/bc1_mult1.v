// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bc1_mult1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_V,
        ap_return
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [111:0] a_V;
output  [223:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [15:0] ai_0_V_fu_243_p1;
reg   [15:0] ai_0_V_reg_689;
reg   [15:0] ai_1_V_reg_695;
reg   [15:0] ai_2_V_reg_701;
wire   [15:0] ai_3_V_fu_267_p4;
reg   [15:0] ai_3_V_reg_707;
reg   [15:0] ai_4_V_reg_712;
reg   [15:0] ai_5_V_reg_718;
reg   [15:0] ai_6_V_reg_724;
wire   [31:0] zext_ln215_32_fu_307_p1;
reg   [31:0] zext_ln215_32_reg_730;
wire   [2:0] i_fu_322_p2;
reg   [2:0] i_reg_738;
wire    ap_CS_fsm_state2;
wire   [15:0] tmp_s_fu_328_p9;
reg   [15:0] tmp_s_reg_743;
wire   [0:0] icmp_ln283_fu_316_p2;
wire   [223:0] add_ln68_fu_341_p2;
reg   [223:0] add_ln68_reg_748;
wire   [223:0] add_ln68_41_fu_347_p2;
reg   [223:0] add_ln68_41_reg_753;
wire   [223:0] add_ln68_42_fu_353_p2;
reg   [223:0] add_ln68_42_reg_758;
wire   [31:0] zext_ln215_29_fu_359_p1;
reg   [31:0] zext_ln215_29_reg_763;
wire    ap_CS_fsm_state3;
wire   [3:0] zext_ln1352_fu_362_p1;
reg   [3:0] zext_ln1352_reg_770;
wire   [223:0] zext_ln161_fu_366_p1;
reg   [223:0] zext_ln161_reg_778;
wire   [0:0] icmp_ln215_fu_369_p2;
reg   [0:0] icmp_ln215_reg_783;
wire    ap_CS_fsm_state4;
wire   [31:0] mul_ln1352_fu_667_p2;
reg   [31:0] mul_ln1352_reg_790;
wire   [3:0] add_ln288_fu_389_p2;
reg   [3:0] add_ln288_reg_795;
wire   [0:0] icmp_ln215_15_fu_400_p2;
reg   [0:0] icmp_ln215_15_reg_800;
wire   [31:0] mul_ln1352_22_fu_672_p2;
reg   [31:0] mul_ln1352_22_reg_807;
wire   [3:0] add_ln288_1_fu_420_p2;
reg   [3:0] add_ln288_1_reg_812;
wire   [0:0] icmp_ln215_16_fu_431_p2;
reg   [0:0] icmp_ln215_16_reg_817;
wire   [31:0] mul_ln1352_23_fu_677_p2;
reg   [31:0] mul_ln1352_23_reg_824;
wire   [3:0] add_ln288_2_fu_451_p2;
reg   [3:0] add_ln288_2_reg_829;
wire   [223:0] sum_0_V_fu_487_p2;
reg   [223:0] sum_0_V_reg_834;
wire    ap_CS_fsm_state5;
wire   [223:0] sum_1_V_fu_520_p2;
reg   [223:0] sum_1_V_reg_840;
wire   [223:0] sum_2_V_fu_553_p2;
reg   [223:0] sum_2_V_reg_846;
wire   [223:0] sum_4_V_15_fu_559_p3;
reg   [223:0] sum_4_V_15_reg_852;
wire    ap_CS_fsm_state6;
wire   [223:0] sum_4_V_16_fu_565_p3;
reg   [223:0] sum_4_V_16_reg_858;
wire   [223:0] sum_5_V_15_fu_571_p3;
reg   [223:0] sum_5_V_15_reg_864;
wire   [223:0] sum_5_V_16_fu_577_p3;
reg   [223:0] sum_5_V_16_reg_870;
wire   [223:0] sum_6_V_15_fu_583_p3;
reg   [223:0] sum_6_V_15_reg_876;
wire   [223:0] sum_6_V_16_fu_589_p3;
reg   [223:0] sum_6_V_16_reg_882;
wire   [3:0] add_ln288_3_fu_611_p2;
reg   [3:0] add_ln288_3_reg_891;
wire   [0:0] icmp_ln285_fu_601_p2;
wire   [2:0] xor_ln285_fu_616_p2;
reg   [2:0] xor_ln285_reg_896;
wire   [223:0] sum_3_V_fu_638_p2;
reg   [223:0] sum_3_V_reg_901;
wire    ap_CS_fsm_state7;
wire   [223:0] add_ln68_40_fu_648_p2;
reg   [223:0] add_ln68_40_reg_906;
wire    ap_CS_fsm_state9;
wire   [223:0] add_ln68_43_fu_653_p2;
reg   [223:0] add_ln68_43_reg_911;
reg   [223:0] sum_V_0_0_reg_78;
reg   [223:0] sum_V_1_0_reg_90;
reg   [223:0] sum_V_2_0_reg_102;
reg   [223:0] sum_V_4_0_reg_114;
reg   [223:0] sum_V_5_0_reg_126;
reg   [223:0] sum_V_6_0_reg_138;
reg   [2:0] i3_0_reg_150;
reg   [2:0] j_0_0_reg_162;
wire    ap_CS_fsm_state8;
reg   [223:0] sum_V_0_1_reg_174;
reg   [223:0] sum_V_1_1_reg_185;
reg   [223:0] sum_V_2_1_reg_196;
reg   [223:0] sum_V_4_1_reg_207;
reg   [223:0] sum_V_5_1_reg_218;
reg   [223:0] sum_V_6_1_reg_229;
reg   [223:0] sum_3_V_8_fu_68;
wire   [31:0] mul_ln1352_24_fu_661_p2;
wire   [15:0] select_ln215_fu_375_p3;
wire   [3:0] zext_ln288_1_fu_385_p1;
wire   [2:0] or_ln215_fu_394_p2;
wire   [15:0] select_ln215_15_fu_406_p3;
wire   [3:0] zext_ln288_2_fu_416_p1;
wire   [2:0] or_ln215_4_fu_425_p2;
wire   [15:0] select_ln215_16_fu_437_p3;
wire   [3:0] zext_ln288_3_fu_447_p1;
wire   [7:0] shl_ln_fu_459_p3;
wire   [191:0] zext_ln288_fu_456_p1;
wire   [191:0] zext_ln1503_fu_466_p1;
wire   [191:0] shl_ln1503_fu_470_p2;
wire   [223:0] zext_ln1503_7_fu_476_p1;
wire   [223:0] select_ln700_fu_480_p3;
wire   [7:0] shl_ln288_1_fu_496_p3;
wire   [223:0] zext_ln161_1_fu_493_p1;
wire   [223:0] zext_ln1503_1_fu_503_p1;
wire   [223:0] shl_ln1503_1_fu_507_p2;
wire   [223:0] select_ln700_59_fu_513_p3;
wire   [7:0] shl_ln288_2_fu_529_p3;
wire   [223:0] zext_ln161_2_fu_526_p1;
wire   [223:0] zext_ln1503_2_fu_536_p1;
wire   [223:0] shl_ln1503_2_fu_540_p2;
wire   [223:0] select_ln700_62_fu_546_p3;
wire   [2:0] or_ln285_fu_595_p2;
wire   [3:0] zext_ln288_4_fu_607_p1;
wire   [7:0] shl_ln288_3_fu_622_p3;
wire   [223:0] zext_ln1503_3_fu_629_p1;
wire   [223:0] shl_ln1503_3_fu_633_p2;
wire    ap_CS_fsm_state10;
wire   [15:0] mul_ln1352_24_fu_661_p0;
wire   [15:0] mul_ln1352_24_fu_661_p1;
wire   [15:0] mul_ln1352_fu_667_p0;
wire   [15:0] mul_ln1352_fu_667_p1;
wire   [15:0] mul_ln1352_22_fu_672_p0;
wire   [15:0] mul_ln1352_22_fu_672_p1;
wire   [15:0] mul_ln1352_23_fu_677_p0;
wire   [15:0] mul_ln1352_23_fu_677_p1;
reg   [9:0] ap_NS_fsm;
wire   [31:0] mul_ln1352_22_fu_672_p00;
wire   [31:0] mul_ln1352_23_fu_677_p00;
wire   [31:0] mul_ln1352_24_fu_661_p10;
wire   [31:0] mul_ln1352_fu_667_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

mp_mul_mux_73_16_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 3 ),
    .dout_WIDTH( 16 ))
mp_mul_mux_73_16_bkb_U29(
    .din0(ai_0_V_reg_689),
    .din1(ai_1_V_reg_695),
    .din2(ai_2_V_reg_701),
    .din3(ai_3_V_reg_707),
    .din4(ai_4_V_reg_712),
    .din5(ai_5_V_reg_718),
    .din6(ai_6_V_reg_724),
    .din7(i3_0_reg_150),
    .dout(tmp_s_fu_328_p9)
);

mp_mul_mul_mul_16cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mp_mul_mul_mul_16cud_U30(
    .din0(mul_ln1352_24_fu_661_p0),
    .din1(mul_ln1352_24_fu_661_p1),
    .dout(mul_ln1352_24_fu_661_p2)
);

mp_mul_mul_mul_16cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mp_mul_mul_mul_16cud_U31(
    .din0(mul_ln1352_fu_667_p0),
    .din1(mul_ln1352_fu_667_p1),
    .dout(mul_ln1352_fu_667_p2)
);

mp_mul_mul_mul_16cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mp_mul_mul_mul_16cud_U32(
    .din0(mul_ln1352_22_fu_672_p0),
    .din1(mul_ln1352_22_fu_672_p1),
    .dout(mul_ln1352_22_fu_672_p2)
);

mp_mul_mul_mul_16cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mp_mul_mul_mul_16cud_U33(
    .din0(mul_ln1352_23_fu_677_p0),
    .din1(mul_ln1352_23_fu_677_p1),
    .dout(mul_ln1352_23_fu_677_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln285_fu_601_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        i3_0_reg_150 <= i_reg_738;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i3_0_reg_150 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        j_0_0_reg_162 <= xor_ln285_reg_896;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        j_0_0_reg_162 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sum_3_V_8_fu_68 <= sum_3_V_reg_901;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sum_3_V_8_fu_68 <= 224'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln285_fu_601_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        sum_V_0_0_reg_78 <= sum_4_V_15_fu_559_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sum_V_0_0_reg_78 <= 224'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sum_V_0_1_reg_174 <= sum_4_V_15_reg_852;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sum_V_0_1_reg_174 <= sum_V_0_0_reg_78;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln285_fu_601_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        sum_V_1_0_reg_90 <= sum_5_V_15_fu_571_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sum_V_1_0_reg_90 <= 224'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sum_V_1_1_reg_185 <= sum_5_V_15_reg_864;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sum_V_1_1_reg_185 <= sum_V_1_0_reg_90;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln285_fu_601_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        sum_V_2_0_reg_102 <= sum_6_V_15_fu_583_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sum_V_2_0_reg_102 <= 224'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sum_V_2_1_reg_196 <= sum_6_V_15_reg_876;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sum_V_2_1_reg_196 <= sum_V_2_0_reg_102;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln285_fu_601_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        sum_V_4_0_reg_114 <= sum_4_V_16_fu_565_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sum_V_4_0_reg_114 <= 224'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sum_V_4_1_reg_207 <= sum_4_V_16_reg_858;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sum_V_4_1_reg_207 <= sum_V_4_0_reg_114;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln285_fu_601_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        sum_V_5_0_reg_126 <= sum_5_V_16_fu_577_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sum_V_5_0_reg_126 <= 224'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sum_V_5_1_reg_218 <= sum_5_V_16_reg_870;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sum_V_5_1_reg_218 <= sum_V_5_0_reg_126;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln285_fu_601_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        sum_V_6_0_reg_138 <= sum_6_V_16_fu_589_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sum_V_6_0_reg_138 <= 224'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sum_V_6_1_reg_229 <= sum_6_V_16_reg_882;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sum_V_6_1_reg_229 <= sum_V_6_0_reg_138;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln288_1_reg_812 <= add_ln288_1_fu_420_p2;
        add_ln288_2_reg_829 <= add_ln288_2_fu_451_p2;
        add_ln288_reg_795 <= add_ln288_fu_389_p2;
        icmp_ln215_15_reg_800 <= icmp_ln215_15_fu_400_p2;
        icmp_ln215_16_reg_817 <= icmp_ln215_16_fu_431_p2;
        icmp_ln215_reg_783 <= icmp_ln215_fu_369_p2;
        mul_ln1352_22_reg_807 <= mul_ln1352_22_fu_672_p2;
        mul_ln1352_23_reg_824 <= mul_ln1352_23_fu_677_p2;
        mul_ln1352_reg_790 <= mul_ln1352_fu_667_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln285_fu_601_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        add_ln288_3_reg_891 <= add_ln288_3_fu_611_p2;
        xor_ln285_reg_896 <= xor_ln285_fu_616_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        add_ln68_40_reg_906 <= add_ln68_40_fu_648_p2;
        add_ln68_43_reg_911 <= add_ln68_43_fu_653_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln283_fu_316_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln68_41_reg_753 <= add_ln68_41_fu_347_p2;
        add_ln68_42_reg_758 <= add_ln68_42_fu_353_p2;
        add_ln68_reg_748 <= add_ln68_fu_341_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ai_0_V_reg_689 <= ai_0_V_fu_243_p1;
        ai_1_V_reg_695 <= {{a_V[31:16]}};
        ai_2_V_reg_701 <= {{a_V[47:32]}};
        ai_3_V_reg_707 <= {{a_V[63:48]}};
        ai_4_V_reg_712 <= {{a_V[79:64]}};
        ai_5_V_reg_718 <= {{a_V[95:80]}};
        ai_6_V_reg_724 <= {{a_V[111:96]}};
        zext_ln215_32_reg_730[15 : 0] <= zext_ln215_32_fu_307_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_738 <= i_fu_322_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sum_0_V_reg_834 <= sum_0_V_fu_487_p2;
        sum_1_V_reg_840 <= sum_1_V_fu_520_p2;
        sum_2_V_reg_846 <= sum_2_V_fu_553_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sum_3_V_reg_901 <= sum_3_V_fu_638_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sum_4_V_15_reg_852 <= sum_4_V_15_fu_559_p3;
        sum_4_V_16_reg_858 <= sum_4_V_16_fu_565_p3;
        sum_5_V_15_reg_864 <= sum_5_V_15_fu_571_p3;
        sum_5_V_16_reg_870 <= sum_5_V_16_fu_577_p3;
        sum_6_V_15_reg_876 <= sum_6_V_15_fu_583_p3;
        sum_6_V_16_reg_882 <= sum_6_V_16_fu_589_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln283_fu_316_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_s_reg_743 <= tmp_s_fu_328_p9;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        zext_ln1352_reg_770[2 : 0] <= zext_ln1352_fu_362_p1[2 : 0];
        zext_ln161_reg_778[31 : 0] <= zext_ln161_fu_366_p1[31 : 0];
        zext_ln215_29_reg_763[15 : 0] <= zext_ln215_29_fu_359_p1[15 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln283_fu_316_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln285_fu_601_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln288_1_fu_420_p2 = (zext_ln288_2_fu_416_p1 + zext_ln1352_reg_770);

assign add_ln288_2_fu_451_p2 = (zext_ln288_3_fu_447_p1 + zext_ln1352_reg_770);

assign add_ln288_3_fu_611_p2 = (zext_ln1352_reg_770 + zext_ln288_4_fu_607_p1);

assign add_ln288_fu_389_p2 = (zext_ln288_1_fu_385_p1 + zext_ln1352_reg_770);

assign add_ln68_40_fu_648_p2 = (add_ln68_reg_748 + sum_V_1_0_reg_90);

assign add_ln68_41_fu_347_p2 = (sum_3_V_8_fu_68 + sum_V_4_0_reg_114);

assign add_ln68_42_fu_353_p2 = (sum_V_5_0_reg_126 + sum_V_6_0_reg_138);

assign add_ln68_43_fu_653_p2 = (add_ln68_42_reg_758 + add_ln68_41_reg_753);

assign add_ln68_fu_341_p2 = (sum_V_0_0_reg_78 + sum_V_2_0_reg_102);

assign ai_0_V_fu_243_p1 = a_V[15:0];

assign ai_3_V_fu_267_p4 = {{a_V[63:48]}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = (add_ln68_43_reg_911 + add_ln68_40_reg_906);

assign i_fu_322_p2 = (i3_0_reg_150 + 3'd1);

assign icmp_ln215_15_fu_400_p2 = ((or_ln215_fu_394_p2 == 3'd1) ? 1'b1 : 1'b0);

assign icmp_ln215_16_fu_431_p2 = ((or_ln215_4_fu_425_p2 == 3'd2) ? 1'b1 : 1'b0);

assign icmp_ln215_fu_369_p2 = ((j_0_0_reg_162 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln283_fu_316_p2 = ((i3_0_reg_150 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln285_fu_601_p2 = ((or_ln285_fu_595_p2 == 3'd7) ? 1'b1 : 1'b0);

assign mul_ln1352_22_fu_672_p0 = mul_ln1352_22_fu_672_p00;

assign mul_ln1352_22_fu_672_p00 = select_ln215_15_fu_406_p3;

assign mul_ln1352_22_fu_672_p1 = zext_ln215_29_reg_763;

assign mul_ln1352_23_fu_677_p0 = mul_ln1352_23_fu_677_p00;

assign mul_ln1352_23_fu_677_p00 = select_ln215_16_fu_437_p3;

assign mul_ln1352_23_fu_677_p1 = zext_ln215_29_reg_763;

assign mul_ln1352_24_fu_661_p0 = zext_ln215_32_reg_730;

assign mul_ln1352_24_fu_661_p1 = mul_ln1352_24_fu_661_p10;

assign mul_ln1352_24_fu_661_p10 = tmp_s_reg_743;

assign mul_ln1352_fu_667_p0 = mul_ln1352_fu_667_p00;

assign mul_ln1352_fu_667_p00 = select_ln215_fu_375_p3;

assign mul_ln1352_fu_667_p1 = zext_ln215_29_reg_763;

assign or_ln215_4_fu_425_p2 = (j_0_0_reg_162 | 3'd2);

assign or_ln215_fu_394_p2 = (j_0_0_reg_162 | 3'd1);

assign or_ln285_fu_595_p2 = (j_0_0_reg_162 | 3'd3);

assign select_ln215_15_fu_406_p3 = ((icmp_ln215_15_fu_400_p2[0:0] === 1'b1) ? ai_1_V_reg_695 : ai_5_V_reg_718);

assign select_ln215_16_fu_437_p3 = ((icmp_ln215_16_fu_431_p2[0:0] === 1'b1) ? ai_2_V_reg_701 : ai_6_V_reg_724);

assign select_ln215_fu_375_p3 = ((icmp_ln215_fu_369_p2[0:0] === 1'b1) ? ai_0_V_reg_689 : ai_4_V_reg_712);

assign select_ln700_59_fu_513_p3 = ((icmp_ln215_15_reg_800[0:0] === 1'b1) ? sum_V_1_1_reg_185 : sum_V_5_1_reg_218);

assign select_ln700_62_fu_546_p3 = ((icmp_ln215_16_reg_817[0:0] === 1'b1) ? sum_V_2_1_reg_196 : sum_V_6_1_reg_229);

assign select_ln700_fu_480_p3 = ((icmp_ln215_reg_783[0:0] === 1'b1) ? sum_V_0_1_reg_174 : sum_V_4_1_reg_207);

assign shl_ln1503_1_fu_507_p2 = zext_ln161_1_fu_493_p1 << zext_ln1503_1_fu_503_p1;

assign shl_ln1503_2_fu_540_p2 = zext_ln161_2_fu_526_p1 << zext_ln1503_2_fu_536_p1;

assign shl_ln1503_3_fu_633_p2 = zext_ln161_reg_778 << zext_ln1503_3_fu_629_p1;

assign shl_ln1503_fu_470_p2 = zext_ln288_fu_456_p1 << zext_ln1503_fu_466_p1;

assign shl_ln288_1_fu_496_p3 = {{add_ln288_1_reg_812}, {4'd0}};

assign shl_ln288_2_fu_529_p3 = {{add_ln288_2_reg_829}, {4'd0}};

assign shl_ln288_3_fu_622_p3 = {{add_ln288_3_reg_891}, {4'd0}};

assign shl_ln_fu_459_p3 = {{add_ln288_reg_795}, {4'd0}};

assign sum_0_V_fu_487_p2 = (zext_ln1503_7_fu_476_p1 + select_ln700_fu_480_p3);

assign sum_1_V_fu_520_p2 = (shl_ln1503_1_fu_507_p2 + select_ln700_59_fu_513_p3);

assign sum_2_V_fu_553_p2 = (shl_ln1503_2_fu_540_p2 + select_ln700_62_fu_546_p3);

assign sum_3_V_fu_638_p2 = (sum_3_V_8_fu_68 + shl_ln1503_3_fu_633_p2);

assign sum_4_V_15_fu_559_p3 = ((icmp_ln215_reg_783[0:0] === 1'b1) ? sum_0_V_reg_834 : sum_V_0_1_reg_174);

assign sum_4_V_16_fu_565_p3 = ((icmp_ln215_reg_783[0:0] === 1'b1) ? sum_V_4_1_reg_207 : sum_0_V_reg_834);

assign sum_5_V_15_fu_571_p3 = ((icmp_ln215_15_reg_800[0:0] === 1'b1) ? sum_1_V_reg_840 : sum_V_1_1_reg_185);

assign sum_5_V_16_fu_577_p3 = ((icmp_ln215_15_reg_800[0:0] === 1'b1) ? sum_V_5_1_reg_218 : sum_1_V_reg_840);

assign sum_6_V_15_fu_583_p3 = ((icmp_ln215_16_reg_817[0:0] === 1'b1) ? sum_2_V_reg_846 : sum_V_2_1_reg_196);

assign sum_6_V_16_fu_589_p3 = ((icmp_ln215_16_reg_817[0:0] === 1'b1) ? sum_V_6_1_reg_229 : sum_2_V_reg_846);

assign xor_ln285_fu_616_p2 = (j_0_0_reg_162 ^ 3'd4);

assign zext_ln1352_fu_362_p1 = i3_0_reg_150;

assign zext_ln1503_1_fu_503_p1 = shl_ln288_1_fu_496_p3;

assign zext_ln1503_2_fu_536_p1 = shl_ln288_2_fu_529_p3;

assign zext_ln1503_3_fu_629_p1 = shl_ln288_3_fu_622_p3;

assign zext_ln1503_7_fu_476_p1 = shl_ln1503_fu_470_p2;

assign zext_ln1503_fu_466_p1 = shl_ln_fu_459_p3;

assign zext_ln161_1_fu_493_p1 = mul_ln1352_22_reg_807;

assign zext_ln161_2_fu_526_p1 = mul_ln1352_23_reg_824;

assign zext_ln161_fu_366_p1 = mul_ln1352_24_fu_661_p2;

assign zext_ln215_29_fu_359_p1 = tmp_s_reg_743;

assign zext_ln215_32_fu_307_p1 = ai_3_V_fu_267_p4;

assign zext_ln288_1_fu_385_p1 = j_0_0_reg_162;

assign zext_ln288_2_fu_416_p1 = or_ln215_fu_394_p2;

assign zext_ln288_3_fu_447_p1 = or_ln215_4_fu_425_p2;

assign zext_ln288_4_fu_607_p1 = or_ln285_fu_595_p2;

assign zext_ln288_fu_456_p1 = mul_ln1352_reg_790;

always @ (posedge ap_clk) begin
    zext_ln215_32_reg_730[31:16] <= 16'b0000000000000000;
    zext_ln215_29_reg_763[31:16] <= 16'b0000000000000000;
    zext_ln1352_reg_770[3] <= 1'b0;
    zext_ln161_reg_778[223:32] <= 192'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
end

endmodule //bc1_mult1
