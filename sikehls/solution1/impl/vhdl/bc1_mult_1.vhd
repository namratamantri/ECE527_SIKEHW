-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bc1_mult_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ta_V : IN STD_LOGIC_VECTOR (112 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (225 downto 0) );
end;


architecture behav of bc1_mult_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv226_lc_1 : STD_LOGIC_VECTOR (225 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ai_0_V_fu_242_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ai_0_V_reg_700 : STD_LOGIC_VECTOR (16 downto 0);
    signal ai_1_V_reg_706 : STD_LOGIC_VECTOR (16 downto 0);
    signal ai_2_V_reg_712 : STD_LOGIC_VECTOR (16 downto 0);
    signal ai_3_V_fu_266_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal ai_3_V_reg_718 : STD_LOGIC_VECTOR (16 downto 0);
    signal ai_4_V_reg_723 : STD_LOGIC_VECTOR (16 downto 0);
    signal ai_5_V_reg_729 : STD_LOGIC_VECTOR (16 downto 0);
    signal ai_6_V_fu_306_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ai_6_V_reg_735 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln215_28_fu_310_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln215_28_reg_741 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln137_fu_319_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln137_reg_746 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_329_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_757 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_335_p9 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_1_reg_762 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln137_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln68_fu_348_p2 : STD_LOGIC_VECTOR (225 downto 0);
    signal add_ln68_reg_767 : STD_LOGIC_VECTOR (225 downto 0);
    signal add_ln68_36_fu_354_p2 : STD_LOGIC_VECTOR (225 downto 0);
    signal add_ln68_36_reg_772 : STD_LOGIC_VECTOR (225 downto 0);
    signal add_ln68_37_fu_360_p2 : STD_LOGIC_VECTOR (225 downto 0);
    signal add_ln68_37_reg_777 : STD_LOGIC_VECTOR (225 downto 0);
    signal zext_ln215_25_fu_366_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln215_25_reg_782 : STD_LOGIC_VECTOR (33 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln78_fu_369_p1 : STD_LOGIC_VECTOR (223 downto 0);
    signal zext_ln78_reg_789 : STD_LOGIC_VECTOR (223 downto 0);
    signal icmp_ln215_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln215_reg_794 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal mul_ln1352_fu_678_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln1352_reg_801 : STD_LOGIC_VECTOR (33 downto 0);
    signal add_ln142_fu_392_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln142_reg_806 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln215_13_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln215_13_reg_812 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln1352_19_fu_683_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln1352_19_reg_819 : STD_LOGIC_VECTOR (33 downto 0);
    signal add_ln142_1_fu_423_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln142_1_reg_824 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln215_14_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln215_14_reg_830 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln1352_20_fu_688_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln1352_20_reg_837 : STD_LOGIC_VECTOR (33 downto 0);
    signal add_ln142_2_fu_454_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln142_2_reg_842 : STD_LOGIC_VECTOR (3 downto 0);
    signal sum_0_V_fu_489_p2 : STD_LOGIC_VECTOR (225 downto 0);
    signal sum_0_V_reg_848 : STD_LOGIC_VECTOR (225 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sum_1_V_fu_525_p2 : STD_LOGIC_VECTOR (225 downto 0);
    signal sum_1_V_reg_854 : STD_LOGIC_VECTOR (225 downto 0);
    signal sum_2_V_fu_561_p2 : STD_LOGIC_VECTOR (225 downto 0);
    signal sum_2_V_reg_860 : STD_LOGIC_VECTOR (225 downto 0);
    signal sum_4_V_13_fu_567_p3 : STD_LOGIC_VECTOR (225 downto 0);
    signal sum_4_V_13_reg_866 : STD_LOGIC_VECTOR (225 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal sum_4_V_14_fu_573_p3 : STD_LOGIC_VECTOR (225 downto 0);
    signal sum_4_V_14_reg_872 : STD_LOGIC_VECTOR (225 downto 0);
    signal sum_5_V_13_fu_579_p3 : STD_LOGIC_VECTOR (225 downto 0);
    signal sum_5_V_13_reg_878 : STD_LOGIC_VECTOR (225 downto 0);
    signal sum_5_V_14_fu_585_p3 : STD_LOGIC_VECTOR (225 downto 0);
    signal sum_5_V_14_reg_884 : STD_LOGIC_VECTOR (225 downto 0);
    signal sum_6_V_13_fu_591_p3 : STD_LOGIC_VECTOR (225 downto 0);
    signal sum_6_V_13_reg_890 : STD_LOGIC_VECTOR (225 downto 0);
    signal sum_6_V_14_fu_597_p3 : STD_LOGIC_VECTOR (225 downto 0);
    signal sum_6_V_14_reg_896 : STD_LOGIC_VECTOR (225 downto 0);
    signal add_ln142_3_fu_619_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln142_3_reg_905 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln139_fu_613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln139_fu_624_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln139_reg_911 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_3_V_fu_649_p2 : STD_LOGIC_VECTOR (225 downto 0);
    signal sum_3_V_reg_916 : STD_LOGIC_VECTOR (225 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln68_35_fu_659_p2 : STD_LOGIC_VECTOR (225 downto 0);
    signal add_ln68_35_reg_921 : STD_LOGIC_VECTOR (225 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln68_38_fu_664_p2 : STD_LOGIC_VECTOR (225 downto 0);
    signal add_ln68_38_reg_926 : STD_LOGIC_VECTOR (225 downto 0);
    signal sum_V_0_0_reg_78 : STD_LOGIC_VECTOR (225 downto 0);
    signal sum_V_1_0_reg_90 : STD_LOGIC_VECTOR (225 downto 0);
    signal sum_V_2_0_reg_102 : STD_LOGIC_VECTOR (225 downto 0);
    signal sum_V_4_0_reg_114 : STD_LOGIC_VECTOR (225 downto 0);
    signal sum_V_5_0_reg_126 : STD_LOGIC_VECTOR (225 downto 0);
    signal sum_V_6_0_reg_138 : STD_LOGIC_VECTOR (225 downto 0);
    signal i4_0_reg_150 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_0_0_reg_161 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal sum_V_0_1_reg_173 : STD_LOGIC_VECTOR (225 downto 0);
    signal sum_V_1_1_reg_184 : STD_LOGIC_VECTOR (225 downto 0);
    signal sum_V_2_1_reg_195 : STD_LOGIC_VECTOR (225 downto 0);
    signal sum_V_4_1_reg_206 : STD_LOGIC_VECTOR (225 downto 0);
    signal sum_V_5_1_reg_217 : STD_LOGIC_VECTOR (225 downto 0);
    signal sum_V_6_1_reg_228 : STD_LOGIC_VECTOR (225 downto 0);
    signal sum_3_V_7_fu_68 : STD_LOGIC_VECTOR (225 downto 0);
    signal tmp_fu_296_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln1352_21_fu_672_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal select_ln215_fu_382_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln139_fu_372_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln139_fu_397_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln215_13_fu_413_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln139_1_fu_403_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln139_1_fu_428_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln215_14_fu_444_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln139_2_fu_434_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln142_4_fu_462_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln142_fu_459_p1 : STD_LOGIC_VECTOR (203 downto 0);
    signal zext_ln1503_fu_468_p1 : STD_LOGIC_VECTOR (203 downto 0);
    signal shl_ln1503_fu_472_p2 : STD_LOGIC_VECTOR (203 downto 0);
    signal select_ln700_fu_482_p3 : STD_LOGIC_VECTOR (225 downto 0);
    signal zext_ln700_fu_478_p1 : STD_LOGIC_VECTOR (225 downto 0);
    signal add_ln142_5_fu_498_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln78_1_fu_495_p1 : STD_LOGIC_VECTOR (223 downto 0);
    signal zext_ln1503_1_fu_504_p1 : STD_LOGIC_VECTOR (223 downto 0);
    signal shl_ln1503_1_fu_508_p2 : STD_LOGIC_VECTOR (223 downto 0);
    signal select_ln700_51_fu_518_p3 : STD_LOGIC_VECTOR (225 downto 0);
    signal sext_ln700_1_fu_514_p1 : STD_LOGIC_VECTOR (225 downto 0);
    signal add_ln142_6_fu_534_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln78_2_fu_531_p1 : STD_LOGIC_VECTOR (223 downto 0);
    signal zext_ln1503_2_fu_540_p1 : STD_LOGIC_VECTOR (223 downto 0);
    signal shl_ln1503_2_fu_544_p2 : STD_LOGIC_VECTOR (223 downto 0);
    signal select_ln700_54_fu_554_p3 : STD_LOGIC_VECTOR (225 downto 0);
    signal sext_ln700_2_fu_550_p1 : STD_LOGIC_VECTOR (225 downto 0);
    signal or_ln139_2_fu_603_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln139_3_fu_609_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln142_7_fu_630_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1503_3_fu_636_p1 : STD_LOGIC_VECTOR (223 downto 0);
    signal shl_ln1503_3_fu_640_p2 : STD_LOGIC_VECTOR (223 downto 0);
    signal sext_ln700_fu_645_p1 : STD_LOGIC_VECTOR (225 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal mul_ln1352_21_fu_672_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1352_21_fu_672_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1352_fu_678_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1352_fu_678_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1352_19_fu_683_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1352_19_fu_683_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1352_20_fu_688_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1352_20_fu_688_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1352_19_fu_683_p00 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln1352_20_fu_688_p10 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln1352_21_fu_672_p10 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln1352_fu_678_p00 : STD_LOGIC_VECTOR (33 downto 0);

    component mp_mul_mux_73_17_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        din2 : IN STD_LOGIC_VECTOR (16 downto 0);
        din3 : IN STD_LOGIC_VECTOR (16 downto 0);
        din4 : IN STD_LOGIC_VECTOR (16 downto 0);
        din5 : IN STD_LOGIC_VECTOR (16 downto 0);
        din6 : IN STD_LOGIC_VECTOR (16 downto 0);
        din7 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component mp_mul_mul_mul_17eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (33 downto 0) );
    end component;



begin
    mp_mul_mux_73_17_dEe_U35 : component mp_mul_mux_73_17_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        din2_WIDTH => 17,
        din3_WIDTH => 17,
        din4_WIDTH => 17,
        din5_WIDTH => 17,
        din6_WIDTH => 17,
        din7_WIDTH => 3,
        dout_WIDTH => 17)
    port map (
        din0 => ai_0_V_reg_700,
        din1 => ai_1_V_reg_706,
        din2 => ai_2_V_reg_712,
        din3 => ai_3_V_reg_718,
        din4 => ai_4_V_reg_723,
        din5 => ai_5_V_reg_729,
        din6 => ai_6_V_reg_735,
        din7 => i4_0_reg_150,
        dout => tmp_1_fu_335_p9);

    mp_mul_mul_mul_17eOg_U36 : component mp_mul_mul_mul_17eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln1352_21_fu_672_p0,
        din1 => mul_ln1352_21_fu_672_p1,
        dout => mul_ln1352_21_fu_672_p2);

    mp_mul_mul_mul_17eOg_U37 : component mp_mul_mul_mul_17eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln1352_fu_678_p0,
        din1 => mul_ln1352_fu_678_p1,
        dout => mul_ln1352_fu_678_p2);

    mp_mul_mul_mul_17eOg_U38 : component mp_mul_mul_mul_17eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln1352_19_fu_683_p0,
        din1 => mul_ln1352_19_fu_683_p1,
        dout => mul_ln1352_19_fu_683_p2);

    mp_mul_mul_mul_17eOg_U39 : component mp_mul_mul_mul_17eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln1352_20_fu_688_p0,
        din1 => mul_ln1352_20_fu_688_p1,
        dout => mul_ln1352_20_fu_688_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i4_0_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln139_fu_613_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i4_0_reg_150 <= i_reg_757;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i4_0_reg_150 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_0_0_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j_0_0_reg_161 <= xor_ln139_reg_911;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                j_0_0_reg_161 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    sum_3_V_7_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                sum_3_V_7_fu_68 <= sum_3_V_reg_916;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sum_3_V_7_fu_68 <= ap_const_lv226_lc_1;
            end if; 
        end if;
    end process;

    sum_V_0_0_reg_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln139_fu_613_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                sum_V_0_0_reg_78 <= sum_4_V_13_fu_567_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sum_V_0_0_reg_78 <= ap_const_lv226_lc_1;
            end if; 
        end if;
    end process;

    sum_V_0_1_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                sum_V_0_1_reg_173 <= sum_4_V_13_reg_866;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                sum_V_0_1_reg_173 <= sum_V_0_0_reg_78;
            end if; 
        end if;
    end process;

    sum_V_1_0_reg_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln139_fu_613_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                sum_V_1_0_reg_90 <= sum_5_V_13_fu_579_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sum_V_1_0_reg_90 <= ap_const_lv226_lc_1;
            end if; 
        end if;
    end process;

    sum_V_1_1_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                sum_V_1_1_reg_184 <= sum_5_V_13_reg_878;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                sum_V_1_1_reg_184 <= sum_V_1_0_reg_90;
            end if; 
        end if;
    end process;

    sum_V_2_0_reg_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln139_fu_613_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                sum_V_2_0_reg_102 <= sum_6_V_13_fu_591_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sum_V_2_0_reg_102 <= ap_const_lv226_lc_1;
            end if; 
        end if;
    end process;

    sum_V_2_1_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                sum_V_2_1_reg_195 <= sum_6_V_13_reg_890;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                sum_V_2_1_reg_195 <= sum_V_2_0_reg_102;
            end if; 
        end if;
    end process;

    sum_V_4_0_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln139_fu_613_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                sum_V_4_0_reg_114 <= sum_4_V_14_fu_573_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sum_V_4_0_reg_114 <= ap_const_lv226_lc_1;
            end if; 
        end if;
    end process;

    sum_V_4_1_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                sum_V_4_1_reg_206 <= sum_4_V_14_reg_872;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                sum_V_4_1_reg_206 <= sum_V_4_0_reg_114;
            end if; 
        end if;
    end process;

    sum_V_5_0_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln139_fu_613_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                sum_V_5_0_reg_126 <= sum_5_V_14_fu_585_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sum_V_5_0_reg_126 <= ap_const_lv226_lc_1;
            end if; 
        end if;
    end process;

    sum_V_5_1_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                sum_V_5_1_reg_217 <= sum_5_V_14_reg_884;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                sum_V_5_1_reg_217 <= sum_V_5_0_reg_126;
            end if; 
        end if;
    end process;

    sum_V_6_0_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln139_fu_613_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                sum_V_6_0_reg_138 <= sum_6_V_14_fu_597_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sum_V_6_0_reg_138 <= ap_const_lv226_lc_1;
            end if; 
        end if;
    end process;

    sum_V_6_1_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                sum_V_6_1_reg_228 <= sum_6_V_14_reg_896;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                sum_V_6_1_reg_228 <= sum_V_6_0_reg_138;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln142_1_reg_824 <= add_ln142_1_fu_423_p2;
                add_ln142_2_reg_842 <= add_ln142_2_fu_454_p2;
                add_ln142_reg_806 <= add_ln142_fu_392_p2;
                icmp_ln215_13_reg_812 <= icmp_ln215_13_fu_407_p2;
                icmp_ln215_14_reg_830 <= icmp_ln215_14_fu_438_p2;
                icmp_ln215_reg_794 <= icmp_ln215_fu_376_p2;
                mul_ln1352_19_reg_819 <= mul_ln1352_19_fu_683_p2;
                mul_ln1352_20_reg_837 <= mul_ln1352_20_fu_688_p2;
                mul_ln1352_reg_801 <= mul_ln1352_fu_678_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln139_fu_613_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                add_ln142_3_reg_905 <= add_ln142_3_fu_619_p2;
                xor_ln139_reg_911 <= xor_ln139_fu_624_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln68_35_reg_921 <= add_ln68_35_fu_659_p2;
                add_ln68_38_reg_926 <= add_ln68_38_fu_664_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln137_fu_323_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                add_ln68_36_reg_772 <= add_ln68_36_fu_354_p2;
                add_ln68_37_reg_777 <= add_ln68_37_fu_360_p2;
                add_ln68_reg_767 <= add_ln68_fu_348_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                ai_0_V_reg_700 <= ai_0_V_fu_242_p1;
                ai_1_V_reg_706 <= ta_V(33 downto 17);
                ai_2_V_reg_712 <= ta_V(50 downto 34);
                ai_3_V_reg_718 <= ta_V(67 downto 51);
                ai_4_V_reg_723 <= ta_V(84 downto 68);
                ai_5_V_reg_729 <= ta_V(101 downto 85);
                ai_6_V_reg_735 <= ai_6_V_fu_306_p1;
                    zext_ln215_28_reg_741(16 downto 0) <= zext_ln215_28_fu_310_p1(16 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_757 <= i_fu_329_p2;
                    zext_ln137_reg_746(2 downto 0) <= zext_ln137_fu_319_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                sum_0_V_reg_848 <= sum_0_V_fu_489_p2;
                sum_1_V_reg_854 <= sum_1_V_fu_525_p2;
                sum_2_V_reg_860 <= sum_2_V_fu_561_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                sum_3_V_reg_916 <= sum_3_V_fu_649_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                sum_4_V_13_reg_866 <= sum_4_V_13_fu_567_p3;
                sum_4_V_14_reg_872 <= sum_4_V_14_fu_573_p3;
                sum_5_V_13_reg_878 <= sum_5_V_13_fu_579_p3;
                sum_5_V_14_reg_884 <= sum_5_V_14_fu_585_p3;
                sum_6_V_13_reg_890 <= sum_6_V_13_fu_591_p3;
                sum_6_V_14_reg_896 <= sum_6_V_14_fu_597_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln137_fu_323_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_1_reg_762 <= tmp_1_fu_335_p9;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    zext_ln215_25_reg_782(16 downto 0) <= zext_ln215_25_fu_366_p1(16 downto 0);
                    zext_ln78_reg_789(33 downto 0) <= zext_ln78_fu_369_p1(33 downto 0);
            end if;
        end if;
    end process;
    zext_ln215_28_reg_741(33 downto 17) <= "00000000000000000";
    zext_ln137_reg_746(3) <= '0';
    zext_ln215_25_reg_782(33 downto 17) <= "00000000000000000";
    zext_ln78_reg_789(223 downto 34) <= "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln137_fu_323_p2, ap_CS_fsm_state6, icmp_ln139_fu_613_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln137_fu_323_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln139_fu_613_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln142_1_fu_423_p2 <= std_logic_vector(unsigned(zext_ln137_reg_746) + unsigned(zext_ln139_1_fu_403_p1));
    add_ln142_2_fu_454_p2 <= std_logic_vector(unsigned(zext_ln139_2_fu_434_p1) + unsigned(zext_ln137_reg_746));
    add_ln142_3_fu_619_p2 <= std_logic_vector(unsigned(zext_ln137_reg_746) + unsigned(zext_ln139_3_fu_609_p1));
    add_ln142_4_fu_462_p3 <= (add_ln142_reg_806 & add_ln142_reg_806);
    add_ln142_5_fu_498_p3 <= (add_ln142_1_reg_824 & add_ln142_1_reg_824);
    add_ln142_6_fu_534_p3 <= (add_ln142_2_reg_842 & add_ln142_2_reg_842);
    add_ln142_7_fu_630_p3 <= (add_ln142_3_reg_905 & add_ln142_3_reg_905);
    add_ln142_fu_392_p2 <= std_logic_vector(unsigned(zext_ln137_reg_746) + unsigned(zext_ln139_fu_372_p1));
    add_ln68_35_fu_659_p2 <= std_logic_vector(unsigned(add_ln68_reg_767) + unsigned(sum_V_1_0_reg_90));
    add_ln68_36_fu_354_p2 <= std_logic_vector(unsigned(sum_3_V_7_fu_68) + unsigned(sum_V_4_0_reg_114));
    add_ln68_37_fu_360_p2 <= std_logic_vector(unsigned(sum_V_5_0_reg_126) + unsigned(sum_V_6_0_reg_138));
    add_ln68_38_fu_664_p2 <= std_logic_vector(unsigned(add_ln68_37_reg_777) + unsigned(add_ln68_36_reg_772));
    add_ln68_fu_348_p2 <= std_logic_vector(unsigned(sum_V_0_0_reg_78) + unsigned(sum_V_2_0_reg_102));
    ai_0_V_fu_242_p1 <= ta_V(17 - 1 downto 0);
    ai_3_V_fu_266_p4 <= ta_V(67 downto 51);
        ai_6_V_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_296_p4),17));

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(unsigned(add_ln68_38_reg_926) + unsigned(add_ln68_35_reg_921));
    i_fu_329_p2 <= std_logic_vector(unsigned(i4_0_reg_150) + unsigned(ap_const_lv3_1));
    icmp_ln137_fu_323_p2 <= "1" when (i4_0_reg_150 = ap_const_lv3_7) else "0";
    icmp_ln139_fu_613_p2 <= "1" when (or_ln139_2_fu_603_p2 = ap_const_lv3_7) else "0";
    icmp_ln215_13_fu_407_p2 <= "1" when (or_ln139_fu_397_p2 = ap_const_lv3_1) else "0";
    icmp_ln215_14_fu_438_p2 <= "1" when (or_ln139_1_fu_428_p2 = ap_const_lv3_2) else "0";
    icmp_ln215_fu_376_p2 <= "1" when (j_0_0_reg_161 = ap_const_lv3_0) else "0";
    mul_ln1352_19_fu_683_p0 <= mul_ln1352_19_fu_683_p00(17 - 1 downto 0);
    mul_ln1352_19_fu_683_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln215_13_fu_413_p3),34));
    mul_ln1352_19_fu_683_p1 <= zext_ln215_25_reg_782(17 - 1 downto 0);
    mul_ln1352_20_fu_688_p0 <= zext_ln215_25_reg_782(17 - 1 downto 0);
    mul_ln1352_20_fu_688_p1 <= mul_ln1352_20_fu_688_p10(17 - 1 downto 0);
    mul_ln1352_20_fu_688_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln215_14_fu_444_p3),34));
    mul_ln1352_21_fu_672_p0 <= zext_ln215_28_reg_741(17 - 1 downto 0);
    mul_ln1352_21_fu_672_p1 <= mul_ln1352_21_fu_672_p10(17 - 1 downto 0);
    mul_ln1352_21_fu_672_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_reg_762),34));
    mul_ln1352_fu_678_p0 <= mul_ln1352_fu_678_p00(17 - 1 downto 0);
    mul_ln1352_fu_678_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln215_fu_382_p3),34));
    mul_ln1352_fu_678_p1 <= zext_ln215_25_reg_782(17 - 1 downto 0);
    or_ln139_1_fu_428_p2 <= (j_0_0_reg_161 or ap_const_lv3_2);
    or_ln139_2_fu_603_p2 <= (j_0_0_reg_161 or ap_const_lv3_3);
    or_ln139_fu_397_p2 <= (j_0_0_reg_161 or ap_const_lv3_1);
    select_ln215_13_fu_413_p3 <= 
        ai_1_V_reg_706 when (icmp_ln215_13_fu_407_p2(0) = '1') else 
        ai_5_V_reg_729;
    select_ln215_14_fu_444_p3 <= 
        ai_2_V_reg_712 when (icmp_ln215_14_fu_438_p2(0) = '1') else 
        ai_6_V_reg_735;
    select_ln215_fu_382_p3 <= 
        ai_0_V_reg_700 when (icmp_ln215_fu_376_p2(0) = '1') else 
        ai_4_V_reg_723;
    select_ln700_51_fu_518_p3 <= 
        sum_V_1_1_reg_184 when (icmp_ln215_13_reg_812(0) = '1') else 
        sum_V_5_1_reg_217;
    select_ln700_54_fu_554_p3 <= 
        sum_V_2_1_reg_195 when (icmp_ln215_14_reg_830(0) = '1') else 
        sum_V_6_1_reg_228;
    select_ln700_fu_482_p3 <= 
        sum_V_0_1_reg_173 when (icmp_ln215_reg_794(0) = '1') else 
        sum_V_4_1_reg_206;
        sext_ln700_1_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1503_1_fu_508_p2),226));

        sext_ln700_2_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1503_2_fu_544_p2),226));

        sext_ln700_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1503_3_fu_640_p2),226));

    shl_ln1503_1_fu_508_p2 <= std_logic_vector(shift_left(unsigned(zext_ln78_1_fu_495_p1),to_integer(unsigned('0' & zext_ln1503_1_fu_504_p1(31-1 downto 0)))));
    shl_ln1503_2_fu_544_p2 <= std_logic_vector(shift_left(unsigned(zext_ln78_2_fu_531_p1),to_integer(unsigned('0' & zext_ln1503_2_fu_540_p1(31-1 downto 0)))));
    shl_ln1503_3_fu_640_p2 <= std_logic_vector(shift_left(unsigned(zext_ln78_reg_789),to_integer(unsigned('0' & zext_ln1503_3_fu_636_p1(31-1 downto 0)))));
    shl_ln1503_fu_472_p2 <= std_logic_vector(shift_left(unsigned(zext_ln142_fu_459_p1),to_integer(unsigned('0' & zext_ln1503_fu_468_p1(31-1 downto 0)))));
    sum_0_V_fu_489_p2 <= std_logic_vector(unsigned(select_ln700_fu_482_p3) + unsigned(zext_ln700_fu_478_p1));
    sum_1_V_fu_525_p2 <= std_logic_vector(unsigned(select_ln700_51_fu_518_p3) + unsigned(sext_ln700_1_fu_514_p1));
    sum_2_V_fu_561_p2 <= std_logic_vector(unsigned(select_ln700_54_fu_554_p3) + unsigned(sext_ln700_2_fu_550_p1));
    sum_3_V_fu_649_p2 <= std_logic_vector(signed(sext_ln700_fu_645_p1) + signed(sum_3_V_7_fu_68));
    sum_4_V_13_fu_567_p3 <= 
        sum_0_V_reg_848 when (icmp_ln215_reg_794(0) = '1') else 
        sum_V_0_1_reg_173;
    sum_4_V_14_fu_573_p3 <= 
        sum_V_4_1_reg_206 when (icmp_ln215_reg_794(0) = '1') else 
        sum_0_V_reg_848;
    sum_5_V_13_fu_579_p3 <= 
        sum_1_V_reg_854 when (icmp_ln215_13_reg_812(0) = '1') else 
        sum_V_1_1_reg_184;
    sum_5_V_14_fu_585_p3 <= 
        sum_V_5_1_reg_217 when (icmp_ln215_13_reg_812(0) = '1') else 
        sum_1_V_reg_854;
    sum_6_V_13_fu_591_p3 <= 
        sum_2_V_reg_860 when (icmp_ln215_14_reg_830(0) = '1') else 
        sum_V_2_1_reg_195;
    sum_6_V_14_fu_597_p3 <= 
        sum_V_6_1_reg_228 when (icmp_ln215_14_reg_830(0) = '1') else 
        sum_2_V_reg_860;
    tmp_fu_296_p4 <= ta_V(112 downto 102);
    xor_ln139_fu_624_p2 <= (j_0_0_reg_161 xor ap_const_lv3_4);
    zext_ln137_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i4_0_reg_150),4));
    zext_ln139_1_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln139_fu_397_p2),4));
    zext_ln139_2_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln139_1_fu_428_p2),4));
    zext_ln139_3_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln139_2_fu_603_p2),4));
    zext_ln139_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_0_reg_161),4));
    zext_ln142_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln1352_reg_801),204));
    zext_ln1503_1_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln142_5_fu_498_p3),224));
    zext_ln1503_2_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln142_6_fu_534_p3),224));
    zext_ln1503_3_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln142_7_fu_630_p3),224));
    zext_ln1503_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln142_4_fu_462_p3),204));
    zext_ln215_25_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_reg_762),34));
    zext_ln215_28_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ai_3_V_fu_266_p4),34));
    zext_ln700_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1503_fu_472_p2),226));
    zext_ln78_1_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln1352_19_reg_819),224));
    zext_ln78_2_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln1352_20_reg_837),224));
    zext_ln78_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln1352_21_fu_672_p2),224));
end behav;
