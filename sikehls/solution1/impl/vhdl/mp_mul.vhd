-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mp_mul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_V : IN STD_LOGIC_VECTOR (447 downto 0);
    b_V : IN STD_LOGIC_VECTOR (447 downto 0);
    c_V : OUT STD_LOGIC_VECTOR (895 downto 0);
    c_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of mp_mul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mp_mul,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.315500,HLS_SYN_LAT=88,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=36,HLS_SYN_FF=71008,HLS_SYN_LUT=74736,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_150 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101010000";
    constant ap_const_lv32_14F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001111";
    constant ap_const_lv32_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110001";
    constant ap_const_lv112_0 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv113_0 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv224_lc_1 : STD_LOGIC_VECTOR (223 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv226_lc_1 : STD_LOGIC_VECTOR (225 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal al_V_fu_126_p1 : STD_LOGIC_VECTOR (223 downto 0);
    signal al_V_reg_374 : STD_LOGIC_VECTOR (223 downto 0);
    signal ah_V_1_reg_379 : STD_LOGIC_VECTOR (111 downto 0);
    signal al_V_3_reg_385 : STD_LOGIC_VECTOR (111 downto 0);
    signal ah_V_2_reg_391 : STD_LOGIC_VECTOR (111 downto 0);
    signal al_V_4_fu_188_p2 : STD_LOGIC_VECTOR (112 downto 0);
    signal al_V_4_reg_397 : STD_LOGIC_VECTOR (112 downto 0);
    signal ahl_V_2_fu_200_p2 : STD_LOGIC_VECTOR (112 downto 0);
    signal ahl_V_2_reg_403 : STD_LOGIC_VECTOR (112 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ahl_V_3_fu_213_p2 : STD_LOGIC_VECTOR (113 downto 0);
    signal ahl_V_3_reg_408 : STD_LOGIC_VECTOR (113 downto 0);
    signal grp_bc_mult_fu_101_ap_return : STD_LOGIC_VECTOR (223 downto 0);
    signal a0_V_reg_413 : STD_LOGIC_VECTOR (223 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_bc_mult_fu_101_ap_ready : STD_LOGIC;
    signal grp_bc_mult_fu_101_ap_done : STD_LOGIC;
    signal grp_bc_mult1_fu_106_ap_ready : STD_LOGIC;
    signal grp_bc_mult1_fu_106_ap_done : STD_LOGIC;
    signal grp_bc_mult_1_fu_91_ap_ready : STD_LOGIC;
    signal grp_bc_mult_1_fu_91_ap_done : STD_LOGIC;
    signal grp_koa_mult_h_1_fu_81_ap_ready : STD_LOGIC;
    signal grp_koa_mult_h_1_fu_81_ap_done : STD_LOGIC;
    signal grp_bc2_mult_fu_111_ap_ready : STD_LOGIC;
    signal grp_bc2_mult_fu_111_ap_done : STD_LOGIC;
    signal grp_bc2_mult_1_fu_96_ap_ready : STD_LOGIC;
    signal grp_bc2_mult_1_fu_96_ap_done : STD_LOGIC;
    signal grp_bc_mult_2_fu_86_ap_ready : STD_LOGIC;
    signal grp_bc_mult_2_fu_86_ap_done : STD_LOGIC;
    signal ap_block_state3_on_subcall_done : BOOLEAN;
    signal grp_bc_mult1_fu_106_ap_return : STD_LOGIC_VECTOR (223 downto 0);
    signal a2_V_reg_419 : STD_LOGIC_VECTOR (223 downto 0);
    signal grp_bc_mult_1_fu_91_ap_return : STD_LOGIC_VECTOR (225 downto 0);
    signal a1_V_reg_425 : STD_LOGIC_VECTOR (225 downto 0);
    signal grp_koa_mult_h_1_fu_81_ap_return : STD_LOGIC_VECTOR (447 downto 0);
    signal a2_V_1_reg_430 : STD_LOGIC_VECTOR (447 downto 0);
    signal grp_bc2_mult_fu_111_ap_return : STD_LOGIC_VECTOR (223 downto 0);
    signal a0_V_2_reg_436 : STD_LOGIC_VECTOR (223 downto 0);
    signal grp_bc2_mult_1_fu_96_ap_return : STD_LOGIC_VECTOR (225 downto 0);
    signal a2_V_2_reg_442 : STD_LOGIC_VECTOR (225 downto 0);
    signal grp_bc_mult_2_fu_86_ap_return : STD_LOGIC_VECTOR (227 downto 0);
    signal a1_V_1_reg_448 : STD_LOGIC_VECTOR (227 downto 0);
    signal ret_V_fu_226_p2 : STD_LOGIC_VECTOR (226 downto 0);
    signal ret_V_reg_453 : STD_LOGIC_VECTOR (226 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ret_V_2_fu_238_p2 : STD_LOGIC_VECTOR (228 downto 0);
    signal ret_V_2_reg_458 : STD_LOGIC_VECTOR (228 downto 0);
    signal ret_V_1_fu_247_p2 : STD_LOGIC_VECTOR (226 downto 0);
    signal ret_V_1_reg_463 : STD_LOGIC_VECTOR (226 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ret_V_3_fu_255_p2 : STD_LOGIC_VECTOR (228 downto 0);
    signal ret_V_3_reg_468 : STD_LOGIC_VECTOR (228 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_303_p2 : STD_LOGIC_VECTOR (447 downto 0);
    signal a0_V_1_reg_513 : STD_LOGIC_VECTOR (447 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_334_p2 : STD_LOGIC_VECTOR (450 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_koa_mult_h_1_fu_81_ap_start : STD_LOGIC;
    signal grp_koa_mult_h_1_fu_81_ap_idle : STD_LOGIC;
    signal grp_bc_mult_2_fu_86_ap_start : STD_LOGIC;
    signal grp_bc_mult_2_fu_86_ap_idle : STD_LOGIC;
    signal grp_bc_mult_1_fu_91_ap_start : STD_LOGIC;
    signal grp_bc_mult_1_fu_91_ap_idle : STD_LOGIC;
    signal grp_bc2_mult_1_fu_96_ap_start : STD_LOGIC;
    signal grp_bc2_mult_1_fu_96_ap_idle : STD_LOGIC;
    signal grp_bc_mult_fu_101_ap_start : STD_LOGIC;
    signal grp_bc_mult_fu_101_ap_idle : STD_LOGIC;
    signal grp_bc_mult1_fu_106_ap_start : STD_LOGIC;
    signal grp_bc_mult1_fu_106_ap_idle : STD_LOGIC;
    signal grp_bc2_mult_fu_111_ap_start : STD_LOGIC;
    signal grp_bc2_mult_fu_111_ap_idle : STD_LOGIC;
    signal grp_koa_mult_h_1_fu_81_ap_start_reg : STD_LOGIC := '0';
    signal grp_bc_mult_2_fu_86_ap_start_reg : STD_LOGIC := '0';
    signal grp_bc_mult_1_fu_91_ap_start_reg : STD_LOGIC := '0';
    signal grp_bc2_mult_1_fu_96_ap_start_reg : STD_LOGIC := '0';
    signal grp_bc_mult_fu_101_ap_start_reg : STD_LOGIC := '0';
    signal grp_bc_mult1_fu_106_ap_start_reg : STD_LOGIC := '0';
    signal grp_bc2_mult_fu_111_ap_start_reg : STD_LOGIC := '0';
    signal grp_fu_367_p2 : STD_LOGIC_VECTOR (895 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ah_V_fu_116_p4 : STD_LOGIC_VECTOR (223 downto 0);
    signal sext_ln68_fu_130_p1 : STD_LOGIC_VECTOR (224 downto 0);
    signal sext_ln68_1_fu_134_p1 : STD_LOGIC_VECTOR (224 downto 0);
    signal ahl_V_fu_152_p2 : STD_LOGIC_VECTOR (224 downto 0);
    signal trunc_ln68_fu_148_p1 : STD_LOGIC_VECTOR (112 downto 0);
    signal tmp_fu_138_p4 : STD_LOGIC_VECTOR (112 downto 0);
    signal sext_ln68_2_fu_194_p1 : STD_LOGIC_VECTOR (112 downto 0);
    signal sext_ln68_3_fu_197_p1 : STD_LOGIC_VECTOR (112 downto 0);
    signal sext_ln68_5_fu_210_p1 : STD_LOGIC_VECTOR (113 downto 0);
    signal sext_ln68_4_fu_207_p1 : STD_LOGIC_VECTOR (113 downto 0);
    signal lhs_V_fu_220_p1 : STD_LOGIC_VECTOR (226 downto 0);
    signal rhs_V_fu_223_p1 : STD_LOGIC_VECTOR (226 downto 0);
    signal lhs_V_1_fu_232_p1 : STD_LOGIC_VECTOR (228 downto 0);
    signal rhs_V_1_fu_235_p1 : STD_LOGIC_VECTOR (228 downto 0);
    signal sext_ln215_fu_244_p1 : STD_LOGIC_VECTOR (226 downto 0);
    signal sext_ln215_3_fu_252_p1 : STD_LOGIC_VECTOR (228 downto 0);
    signal grp_fu_270_p0 : STD_LOGIC_VECTOR (338 downto 0);
    signal grp_fu_270_p1 : STD_LOGIC_VECTOR (338 downto 0);
    signal grp_fu_286_p0 : STD_LOGIC_VECTOR (341 downto 0);
    signal grp_fu_286_p1 : STD_LOGIC_VECTOR (341 downto 0);
    signal grp_fu_270_p2 : STD_LOGIC_VECTOR (338 downto 0);
    signal grp_fu_303_p0 : STD_LOGIC_VECTOR (447 downto 0);
    signal grp_fu_303_p1 : STD_LOGIC_VECTOR (447 downto 0);
    signal grp_fu_286_p2 : STD_LOGIC_VECTOR (341 downto 0);
    signal grp_fu_320_p0 : STD_LOGIC_VECTOR (449 downto 0);
    signal grp_fu_320_p1 : STD_LOGIC_VECTOR (449 downto 0);
    signal grp_fu_320_p2 : STD_LOGIC_VECTOR (449 downto 0);
    signal grp_fu_334_p0 : STD_LOGIC_VECTOR (450 downto 0);
    signal grp_fu_334_p1 : STD_LOGIC_VECTOR (450 downto 0);
    signal grp_fu_343_p1 : STD_LOGIC_VECTOR (450 downto 0);
    signal grp_fu_343_p2 : STD_LOGIC_VECTOR (450 downto 0);
    signal r_V_4_fu_349_p3 : STD_LOGIC_VECTOR (674 downto 0);
    signal grp_fu_367_p0 : STD_LOGIC_VECTOR (895 downto 0);
    signal grp_fu_367_p1 : STD_LOGIC_VECTOR (895 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component koa_mult_h_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_V : IN STD_LOGIC_VECTOR (223 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (447 downto 0) );
    end component;


    component bc_mult_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ta_V : IN STD_LOGIC_VECTOR (113 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (227 downto 0) );
    end component;


    component bc_mult_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ta_V : IN STD_LOGIC_VECTOR (112 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (225 downto 0) );
    end component;


    component bc2_mult_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ta_V : IN STD_LOGIC_VECTOR (112 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (225 downto 0) );
    end component;


    component bc_mult IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_V : IN STD_LOGIC_VECTOR (111 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (223 downto 0) );
    end component;


    component bc_mult1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_V : IN STD_LOGIC_VECTOR (111 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (223 downto 0) );
    end component;


    component bc2_mult IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_V : IN STD_LOGIC_VECTOR (111 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (223 downto 0) );
    end component;


    component mp_mul_add_339ns_g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (338 downto 0);
        din1 : IN STD_LOGIC_VECTOR (338 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (338 downto 0) );
    end component;


    component mp_mul_add_342ns_hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (341 downto 0);
        din1 : IN STD_LOGIC_VECTOR (341 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (341 downto 0) );
    end component;


    component mp_mul_add_448s_4ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (447 downto 0);
        din1 : IN STD_LOGIC_VECTOR (447 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (447 downto 0) );
    end component;


    component mp_mul_add_450s_4jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (449 downto 0);
        din1 : IN STD_LOGIC_VECTOR (449 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (449 downto 0) );
    end component;


    component mp_mul_sub_451ns_kbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (450 downto 0);
        din1 : IN STD_LOGIC_VECTOR (450 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (450 downto 0) );
    end component;


    component mp_mul_add_896ns_lbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (895 downto 0);
        din1 : IN STD_LOGIC_VECTOR (895 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (895 downto 0) );
    end component;



begin
    grp_koa_mult_h_1_fu_81 : component koa_mult_h_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_koa_mult_h_1_fu_81_ap_start,
        ap_done => grp_koa_mult_h_1_fu_81_ap_done,
        ap_idle => grp_koa_mult_h_1_fu_81_ap_idle,
        ap_ready => grp_koa_mult_h_1_fu_81_ap_ready,
        a_V => al_V_reg_374,
        ap_return => grp_koa_mult_h_1_fu_81_ap_return);

    grp_bc_mult_2_fu_86 : component bc_mult_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_bc_mult_2_fu_86_ap_start,
        ap_done => grp_bc_mult_2_fu_86_ap_done,
        ap_idle => grp_bc_mult_2_fu_86_ap_idle,
        ap_ready => grp_bc_mult_2_fu_86_ap_ready,
        ta_V => ahl_V_3_reg_408,
        ap_return => grp_bc_mult_2_fu_86_ap_return);

    grp_bc_mult_1_fu_91 : component bc_mult_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_bc_mult_1_fu_91_ap_start,
        ap_done => grp_bc_mult_1_fu_91_ap_done,
        ap_idle => grp_bc_mult_1_fu_91_ap_idle,
        ap_ready => grp_bc_mult_1_fu_91_ap_ready,
        ta_V => ahl_V_2_reg_403,
        ap_return => grp_bc_mult_1_fu_91_ap_return);

    grp_bc2_mult_1_fu_96 : component bc2_mult_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_bc2_mult_1_fu_96_ap_start,
        ap_done => grp_bc2_mult_1_fu_96_ap_done,
        ap_idle => grp_bc2_mult_1_fu_96_ap_idle,
        ap_ready => grp_bc2_mult_1_fu_96_ap_ready,
        ta_V => al_V_4_reg_397,
        ap_return => grp_bc2_mult_1_fu_96_ap_return);

    grp_bc_mult_fu_101 : component bc_mult
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_bc_mult_fu_101_ap_start,
        ap_done => grp_bc_mult_fu_101_ap_done,
        ap_idle => grp_bc_mult_fu_101_ap_idle,
        ap_ready => grp_bc_mult_fu_101_ap_ready,
        a_V => ah_V_1_reg_379,
        ap_return => grp_bc_mult_fu_101_ap_return);

    grp_bc_mult1_fu_106 : component bc_mult1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_bc_mult1_fu_106_ap_start,
        ap_done => grp_bc_mult1_fu_106_ap_done,
        ap_idle => grp_bc_mult1_fu_106_ap_idle,
        ap_ready => grp_bc_mult1_fu_106_ap_ready,
        a_V => al_V_3_reg_385,
        ap_return => grp_bc_mult1_fu_106_ap_return);

    grp_bc2_mult_fu_111 : component bc2_mult
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_bc2_mult_fu_111_ap_start,
        ap_done => grp_bc2_mult_fu_111_ap_done,
        ap_idle => grp_bc2_mult_fu_111_ap_idle,
        ap_ready => grp_bc2_mult_fu_111_ap_ready,
        a_V => ah_V_2_reg_391,
        ap_return => grp_bc2_mult_fu_111_ap_return);

    mp_mul_add_339ns_g8j_U63 : component mp_mul_add_339ns_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 339,
        din1_WIDTH => 339,
        dout_WIDTH => 339)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_270_p0,
        din1 => grp_fu_270_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_270_p2);

    mp_mul_add_342ns_hbi_U64 : component mp_mul_add_342ns_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 342,
        din1_WIDTH => 342,
        dout_WIDTH => 342)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_286_p0,
        din1 => grp_fu_286_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_286_p2);

    mp_mul_add_448s_4ibs_U65 : component mp_mul_add_448s_4ibs
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 448,
        din1_WIDTH => 448,
        dout_WIDTH => 448)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_303_p0,
        din1 => grp_fu_303_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_303_p2);

    mp_mul_add_450s_4jbC_U66 : component mp_mul_add_450s_4jbC
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 450,
        din1_WIDTH => 450,
        dout_WIDTH => 450)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_320_p0,
        din1 => grp_fu_320_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_320_p2);

    mp_mul_sub_451ns_kbM_U67 : component mp_mul_sub_451ns_kbM
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 451,
        din1_WIDTH => 451,
        dout_WIDTH => 451)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_334_p0,
        din1 => grp_fu_334_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_334_p2);

    mp_mul_sub_451ns_kbM_U68 : component mp_mul_sub_451ns_kbM
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 451,
        din1_WIDTH => 451,
        dout_WIDTH => 451)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_334_p2,
        din1 => grp_fu_343_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_343_p2);

    mp_mul_add_896ns_lbW_U69 : component mp_mul_add_896ns_lbW
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 896,
        din1_WIDTH => 896,
        dout_WIDTH => 896)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_367_p0,
        din1 => grp_fu_367_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_367_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_bc2_mult_1_fu_96_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_bc2_mult_1_fu_96_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_bc2_mult_1_fu_96_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_bc2_mult_1_fu_96_ap_ready = ap_const_logic_1)) then 
                    grp_bc2_mult_1_fu_96_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_bc2_mult_fu_111_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_bc2_mult_fu_111_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_bc2_mult_fu_111_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_bc2_mult_fu_111_ap_ready = ap_const_logic_1)) then 
                    grp_bc2_mult_fu_111_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_bc_mult1_fu_106_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_bc_mult1_fu_106_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_bc_mult1_fu_106_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_bc_mult1_fu_106_ap_ready = ap_const_logic_1)) then 
                    grp_bc_mult1_fu_106_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_bc_mult_1_fu_91_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_bc_mult_1_fu_91_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_bc_mult_1_fu_91_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_bc_mult_1_fu_91_ap_ready = ap_const_logic_1)) then 
                    grp_bc_mult_1_fu_91_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_bc_mult_2_fu_86_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_bc_mult_2_fu_86_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_bc_mult_2_fu_86_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_bc_mult_2_fu_86_ap_ready = ap_const_logic_1)) then 
                    grp_bc_mult_2_fu_86_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_bc_mult_fu_101_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_bc_mult_fu_101_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_bc_mult_fu_101_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_bc_mult_fu_101_ap_ready = ap_const_logic_1)) then 
                    grp_bc_mult_fu_101_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_koa_mult_h_1_fu_81_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_koa_mult_h_1_fu_81_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_koa_mult_h_1_fu_81_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_koa_mult_h_1_fu_81_ap_ready = ap_const_logic_1)) then 
                    grp_koa_mult_h_1_fu_81_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                a0_V_1_reg_513 <= grp_fu_303_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                a0_V_2_reg_436 <= grp_bc2_mult_fu_111_ap_return;
                a0_V_reg_413 <= grp_bc_mult_fu_101_ap_return;
                a1_V_1_reg_448 <= grp_bc_mult_2_fu_86_ap_return;
                a1_V_reg_425 <= grp_bc_mult_1_fu_91_ap_return;
                a2_V_1_reg_430 <= grp_koa_mult_h_1_fu_81_ap_return;
                a2_V_2_reg_442 <= grp_bc2_mult_1_fu_96_ap_return;
                a2_V_reg_419 <= grp_bc_mult1_fu_106_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                ah_V_1_reg_379 <= a_V(447 downto 336);
                ah_V_2_reg_391 <= ahl_V_fu_152_p2(224 downto 113);
                al_V_3_reg_385 <= a_V(335 downto 224);
                al_V_4_reg_397 <= al_V_4_fu_188_p2;
                al_V_reg_374 <= al_V_fu_126_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                ahl_V_2_reg_403 <= ahl_V_2_fu_200_p2;
                ahl_V_3_reg_408 <= ahl_V_3_fu_213_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                ret_V_1_reg_463 <= ret_V_1_fu_247_p2;
                ret_V_3_reg_468 <= ret_V_3_fu_255_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                ret_V_2_reg_458 <= ret_V_2_fu_238_p2;
                ret_V_reg_453 <= ret_V_fu_226_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_block_state3_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ah_V_fu_116_p4 <= a_V(447 downto 224);
    ahl_V_2_fu_200_p2 <= std_logic_vector(signed(sext_ln68_2_fu_194_p1) + signed(sext_ln68_3_fu_197_p1));
    ahl_V_3_fu_213_p2 <= std_logic_vector(signed(sext_ln68_5_fu_210_p1) + signed(sext_ln68_4_fu_207_p1));
    ahl_V_fu_152_p2 <= std_logic_vector(signed(sext_ln68_fu_130_p1) + signed(sext_ln68_1_fu_134_p1));
    al_V_4_fu_188_p2 <= std_logic_vector(unsigned(trunc_ln68_fu_148_p1) + unsigned(tmp_fu_138_p4));
    al_V_fu_126_p1 <= a_V(224 - 1 downto 0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state3_on_subcall_done_assign_proc : process(grp_bc_mult_fu_101_ap_done, grp_bc_mult1_fu_106_ap_done, grp_bc_mult_1_fu_91_ap_done, grp_koa_mult_h_1_fu_81_ap_done, grp_bc2_mult_fu_111_ap_done, grp_bc2_mult_1_fu_96_ap_done, grp_bc_mult_2_fu_86_ap_done)
    begin
                ap_block_state3_on_subcall_done <= ((grp_bc_mult_2_fu_86_ap_done = ap_const_logic_0) or (grp_bc2_mult_1_fu_96_ap_done = ap_const_logic_0) or (grp_bc2_mult_fu_111_ap_done = ap_const_logic_0) or (grp_koa_mult_h_1_fu_81_ap_done = ap_const_logic_0) or (grp_bc_mult_1_fu_91_ap_done = ap_const_logic_0) or (grp_bc_mult1_fu_106_ap_done = ap_const_logic_0) or (grp_bc_mult_fu_101_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_V <= grp_fu_367_p2;

    c_V_ap_vld_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            c_V_ap_vld <= ap_const_logic_1;
        else 
            c_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    grp_bc2_mult_1_fu_96_ap_start <= grp_bc2_mult_1_fu_96_ap_start_reg;
    grp_bc2_mult_fu_111_ap_start <= grp_bc2_mult_fu_111_ap_start_reg;
    grp_bc_mult1_fu_106_ap_start <= grp_bc_mult1_fu_106_ap_start_reg;
    grp_bc_mult_1_fu_91_ap_start <= grp_bc_mult_1_fu_91_ap_start_reg;
    grp_bc_mult_2_fu_86_ap_start <= grp_bc_mult_2_fu_86_ap_start_reg;
    grp_bc_mult_fu_101_ap_start <= grp_bc_mult_fu_101_ap_start_reg;
    grp_fu_270_p0 <= (ret_V_1_reg_463 & ap_const_lv112_0);
        grp_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a2_V_reg_419),339));

    grp_fu_286_p0 <= (ret_V_3_reg_468 & ap_const_lv113_0);
        grp_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a2_V_2_reg_442),342));

        grp_fu_303_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_270_p2),448));

    grp_fu_303_p1 <= (a0_V_reg_413 & ap_const_lv224_lc_1);
        grp_fu_320_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_286_p2),450));

    grp_fu_320_p1 <= (a0_V_2_reg_436 & ap_const_lv226_lc_1);
    grp_fu_334_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_320_p2),451));
    grp_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_303_p2),451));
    grp_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a2_V_1_reg_430),451));
    grp_fu_367_p0 <= (a0_V_1_reg_513 & a2_V_1_reg_430);
        grp_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_4_fu_349_p3),896));

    grp_koa_mult_h_1_fu_81_ap_start <= grp_koa_mult_h_1_fu_81_ap_start_reg;
        lhs_V_1_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a1_V_1_reg_448),229));

        lhs_V_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a1_V_reg_425),227));

    r_V_4_fu_349_p3 <= (grp_fu_343_p2 & ap_const_lv224_lc_1);
    ret_V_1_fu_247_p2 <= std_logic_vector(unsigned(ret_V_reg_453) - unsigned(sext_ln215_fu_244_p1));
    ret_V_2_fu_238_p2 <= std_logic_vector(signed(lhs_V_1_fu_232_p1) - signed(rhs_V_1_fu_235_p1));
    ret_V_3_fu_255_p2 <= std_logic_vector(unsigned(ret_V_2_reg_458) - unsigned(sext_ln215_3_fu_252_p1));
    ret_V_fu_226_p2 <= std_logic_vector(signed(lhs_V_fu_220_p1) - signed(rhs_V_fu_223_p1));
        rhs_V_1_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a0_V_2_reg_436),229));

        rhs_V_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a0_V_reg_413),227));

        sext_ln215_3_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a2_V_2_reg_442),229));

        sext_ln215_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a2_V_reg_419),227));

        sext_ln68_1_fu_134_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(al_V_fu_126_p1),225));

        sext_ln68_2_fu_194_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ah_V_1_reg_379),113));

        sext_ln68_3_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(al_V_3_reg_385),113));

        sext_ln68_4_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ah_V_2_reg_391),114));

        sext_ln68_5_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(al_V_4_reg_397),114));

        sext_ln68_fu_130_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ah_V_fu_116_p4),225));

    tmp_fu_138_p4 <= a_V(336 downto 224);
    trunc_ln68_fu_148_p1 <= a_V(113 - 1 downto 0);
end behav;
