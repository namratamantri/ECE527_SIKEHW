-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bc_mult_448 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_V : IN STD_LOGIC_VECTOR (447 downto 0);
    b_V : IN STD_LOGIC_VECTOR (447 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (834 downto 0) );
end;


architecture behav of bc_mult_448 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv451_lc_1 : STD_LOGIC_VECTOR (450 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv515_lc_1 : STD_LOGIC_VECTOR (514 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv579_lc_1 : STD_LOGIC_VECTOR (578 downto
    constant ap_const_lv643_lc_1 : STD_LOGIC_VECTOR (642 downto
    constant ap_const_lv707_lc_1 : STD_LOGIC_VECTOR (706 downto
    constant ap_const_lv771_lc_1 : STD_LOGIC_VECTOR (770 downto
    constant ap_const_lv835_lc_1 : STD_LOGIC_VECTOR (834 downto
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv192_lc_1 : STD_LOGIC_VECTOR (191 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv320_lc_1 : STD_LOGIC_VECTOR (319 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv384_lc_1 : STD_LOGIC_VECTOR (383 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i7_0_reg_332 : STD_LOGIC_VECTOR (2 downto 0);
    signal i7_0_reg_332_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i7_0_reg_332_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i7_0_reg_332_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i7_0_reg_332_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal bi_0_V_fu_443_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bi_0_V_reg_1737 : STD_LOGIC_VECTOR (63 downto 0);
    signal bi_1_V_reg_1742 : STD_LOGIC_VECTOR (63 downto 0);
    signal bi_2_V_reg_1747 : STD_LOGIC_VECTOR (63 downto 0);
    signal bi_3_V_reg_1752 : STD_LOGIC_VECTOR (63 downto 0);
    signal bi_4_V_reg_1757 : STD_LOGIC_VECTOR (63 downto 0);
    signal bi_5_V_reg_1762 : STD_LOGIC_VECTOR (63 downto 0);
    signal ai_6_V_reg_1767 : STD_LOGIC_VECTOR (63 downto 0);
    signal bi_6_V_reg_1772 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_fu_567_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln215_reg_1777 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln215_2_fu_571_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln215_2_reg_1782 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln215_3_fu_575_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln215_3_reg_1787 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln215_4_fu_579_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln215_4_reg_1792 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln215_5_fu_583_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln215_5_reg_1797 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln215_6_fu_587_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln215_6_reg_1802 : STD_LOGIC_VECTOR (127 downto 0);
    signal icmp_ln28_fu_591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_1807 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_597_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_1811 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_1_fu_603_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_1816 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_1_fu_616_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal i_fu_972_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_1835 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln41_fu_966_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1149_p2 : STD_LOGIC_VECTOR (450 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_1187_p2 : STD_LOGIC_VECTOR (514 downto 0);
    signal grp_fu_1225_p2 : STD_LOGIC_VECTOR (578 downto 0);
    signal grp_fu_1263_p2 : STD_LOGIC_VECTOR (642 downto 0);
    signal grp_fu_1301_p2 : STD_LOGIC_VECTOR (706 downto 0);
    signal grp_fu_1339_p2 : STD_LOGIC_VECTOR (770 downto 0);
    signal grp_fu_1377_p2 : STD_LOGIC_VECTOR (834 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_1395_p2 : STD_LOGIC_VECTOR (578 downto 0);
    signal grp_fu_1407_p2 : STD_LOGIC_VECTOR (834 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_1427_p2 : STD_LOGIC_VECTOR (834 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_phi_mux_i7_0_phi_fu_336_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal sum_V_0_0_reg_344 : STD_LOGIC_VECTOR (450 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal sum_V_1_0_reg_356 : STD_LOGIC_VECTOR (514 downto 0);
    signal sum_V_2_0_reg_368 : STD_LOGIC_VECTOR (578 downto 0);
    signal sum_V_3_0_reg_380 : STD_LOGIC_VECTOR (642 downto 0);
    signal sum_V_4_0_reg_392 : STD_LOGIC_VECTOR (706 downto 0);
    signal sum_V_5_0_reg_404 : STD_LOGIC_VECTOR (770 downto 0);
    signal sum_V_6_0_reg_416 : STD_LOGIC_VECTOR (834 downto 0);
    signal i8_0_reg_428 : STD_LOGIC_VECTOR (2 downto 0);
    signal partial_products_6_s_fu_124 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_0_s_fu_653_p1 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_0_5_fu_128 : STD_LOGIC_VECTOR (447 downto 0);
    signal zext_ln1503_fu_665_p1 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_0_4_fu_132 : STD_LOGIC_VECTOR (447 downto 0);
    signal zext_ln1503_1_fu_677_p1 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_0_3_fu_136 : STD_LOGIC_VECTOR (447 downto 0);
    signal zext_ln1503_2_fu_689_p1 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_0_2_fu_140 : STD_LOGIC_VECTOR (447 downto 0);
    signal zext_ln1503_3_fu_701_p1 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_6_1_fu_144 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_0_9_fu_705_p3 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_6_6_fu_148 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_0_10_fu_713_p3 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_6_7_fu_152 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_1_5_fu_156 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_1_4_fu_160 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_1_3_fu_164 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_1_2_fu_168 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_6_8_fu_172 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_6_9_fu_176 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_6_10_fu_180 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_2_5_fu_184 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_2_4_fu_188 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_2_3_fu_192 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_2_2_fu_196 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_6_11_fu_200 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_6_12_fu_204 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_6_13_fu_208 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_3_5_fu_212 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_3_4_fu_216 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_3_3_fu_220 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_3_2_fu_224 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_6_14_fu_228 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_6_15_fu_232 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_6_16_fu_236 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_4_5_fu_240 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_4_4_fu_244 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_4_3_fu_248 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_4_2_fu_252 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_6_17_fu_256 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_6_18_fu_260 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_6_19_fu_264 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_5_5_fu_268 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_5_4_fu_272 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_5_3_fu_276 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_5_2_fu_280 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_6_20_fu_284 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_6_21_fu_288 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_6_22_fu_292 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_6_5_fu_296 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_6_4_fu_300 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_6_3_fu_304 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_6_2_fu_308 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_6_23_fu_312 : STD_LOGIC_VECTOR (447 downto 0);
    signal partial_products_6_24_fu_316 : STD_LOGIC_VECTOR (447 downto 0);
    signal ai_0_V_fu_439_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ai_1_V_fu_447_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ai_2_V_fu_467_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ai_3_V_fu_487_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ai_4_V_fu_507_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ai_5_V_fu_527_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_619_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_619_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_624_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_624_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_629_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_629_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_634_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_634_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_639_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_639_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_644_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_644_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_619_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_fu_624_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal partial_products_0_1_fu_657_p3 : STD_LOGIC_VECTOR (191 downto 0);
    signal grp_fu_629_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal partial_products_0_6_fu_669_p3 : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_fu_634_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal partial_products_0_7_fu_681_p3 : STD_LOGIC_VECTOR (319 downto 0);
    signal grp_fu_639_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal partial_products_0_8_fu_693_p3 : STD_LOGIC_VECTOR (383 downto 0);
    signal grp_fu_644_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_fu_649_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_1125_p9 : STD_LOGIC_VECTOR (447 downto 0);
    signal grp_fu_1149_p1 : STD_LOGIC_VECTOR (450 downto 0);
    signal tmp_3_fu_1155_p9 : STD_LOGIC_VECTOR (447 downto 0);
    signal shl_ln_fu_1175_p3 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_fu_1187_p1 : STD_LOGIC_VECTOR (514 downto 0);
    signal tmp_4_fu_1193_p9 : STD_LOGIC_VECTOR (447 downto 0);
    signal shl_ln1503_1_fu_1213_p3 : STD_LOGIC_VECTOR (575 downto 0);
    signal grp_fu_1225_p1 : STD_LOGIC_VECTOR (578 downto 0);
    signal tmp_5_fu_1231_p9 : STD_LOGIC_VECTOR (447 downto 0);
    signal shl_ln1503_7_fu_1251_p3 : STD_LOGIC_VECTOR (639 downto 0);
    signal grp_fu_1263_p1 : STD_LOGIC_VECTOR (642 downto 0);
    signal tmp_6_fu_1269_p9 : STD_LOGIC_VECTOR (447 downto 0);
    signal shl_ln1503_8_fu_1289_p3 : STD_LOGIC_VECTOR (703 downto 0);
    signal grp_fu_1301_p1 : STD_LOGIC_VECTOR (706 downto 0);
    signal tmp_7_fu_1307_p9 : STD_LOGIC_VECTOR (447 downto 0);
    signal shl_ln1503_9_fu_1327_p3 : STD_LOGIC_VECTOR (767 downto 0);
    signal grp_fu_1339_p1 : STD_LOGIC_VECTOR (770 downto 0);
    signal tmp_8_fu_1345_p9 : STD_LOGIC_VECTOR (447 downto 0);
    signal shl_ln1503_s_fu_1365_p3 : STD_LOGIC_VECTOR (831 downto 0);
    signal grp_fu_1377_p1 : STD_LOGIC_VECTOR (834 downto 0);
    signal grp_fu_1395_p0 : STD_LOGIC_VECTOR (578 downto 0);
    signal grp_fu_1401_p0 : STD_LOGIC_VECTOR (706 downto 0);
    signal grp_fu_1407_p0 : STD_LOGIC_VECTOR (834 downto 0);
    signal grp_fu_1417_p1 : STD_LOGIC_VECTOR (578 downto 0);
    signal grp_fu_1401_p2 : STD_LOGIC_VECTOR (706 downto 0);
    signal grp_fu_1427_p1 : STD_LOGIC_VECTOR (834 downto 0);
    signal grp_fu_1417_p2 : STD_LOGIC_VECTOR (578 downto 0);
    signal grp_fu_1437_p1 : STD_LOGIC_VECTOR (834 downto 0);
    signal grp_fu_1437_p2 : STD_LOGIC_VECTOR (834 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (834 downto
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component xDBL_mux_73_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (63 downto 0);
        din5 : IN STD_LOGIC_VECTOR (63 downto 0);
        din6 : IN STD_LOGIC_VECTOR (63 downto 0);
        din7 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component xDBL_mul_64ns_64nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component xDBL_mul_64s_64s_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component xDBL_mux_73_448_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (447 downto 0);
        din1 : IN STD_LOGIC_VECTOR (447 downto 0);
        din2 : IN STD_LOGIC_VECTOR (447 downto 0);
        din3 : IN STD_LOGIC_VECTOR (447 downto 0);
        din4 : IN STD_LOGIC_VECTOR (447 downto 0);
        din5 : IN STD_LOGIC_VECTOR (447 downto 0);
        din6 : IN STD_LOGIC_VECTOR (447 downto 0);
        din7 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (447 downto 0) );
    end component;


    component xDBL_add_451ns_45dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (450 downto 0);
        din1 : IN STD_LOGIC_VECTOR (450 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (450 downto 0) );
    end component;


    component xDBL_add_515ns_51eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (514 downto 0);
        din1 : IN STD_LOGIC_VECTOR (514 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (514 downto 0) );
    end component;


    component xDBL_add_579ns_57fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (578 downto 0);
        din1 : IN STD_LOGIC_VECTOR (578 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (578 downto 0) );
    end component;


    component xDBL_add_643ns_64g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (642 downto 0);
        din1 : IN STD_LOGIC_VECTOR (642 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (642 downto 0) );
    end component;


    component xDBL_add_707ns_70hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (706 downto 0);
        din1 : IN STD_LOGIC_VECTOR (706 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (706 downto 0) );
    end component;


    component xDBL_add_771ns_77ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (770 downto 0);
        din1 : IN STD_LOGIC_VECTOR (770 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (770 downto 0) );
    end component;


    component xDBL_add_835ns_83jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (834 downto 0);
        din1 : IN STD_LOGIC_VECTOR (834 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (834 downto 0) );
    end component;



begin
    xDBL_mux_73_64_1_1_U1 : component xDBL_mux_73_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 3,
        dout_WIDTH => 64)
    port map (
        din0 => bi_0_V_reg_1737,
        din1 => bi_1_V_reg_1742,
        din2 => bi_2_V_reg_1747,
        din3 => bi_3_V_reg_1752,
        din4 => bi_4_V_reg_1757,
        din5 => bi_5_V_reg_1762,
        din6 => bi_6_V_reg_1772,
        din7 => ap_phi_mux_i7_0_phi_fu_336_p4,
        dout => tmp_1_fu_603_p9);

    xDBL_mul_64ns_64nbkb_U2 : component xDBL_mul_64ns_64nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 128)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_619_p0,
        din1 => grp_fu_619_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_619_p2);

    xDBL_mul_64ns_64nbkb_U3 : component xDBL_mul_64ns_64nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 128)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_624_p0,
        din1 => grp_fu_624_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_624_p2);

    xDBL_mul_64ns_64nbkb_U4 : component xDBL_mul_64ns_64nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 128)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_629_p0,
        din1 => grp_fu_629_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_629_p2);

    xDBL_mul_64ns_64nbkb_U5 : component xDBL_mul_64ns_64nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 128)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_634_p0,
        din1 => grp_fu_634_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_634_p2);

    xDBL_mul_64ns_64nbkb_U6 : component xDBL_mul_64ns_64nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 128)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_639_p0,
        din1 => grp_fu_639_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_639_p2);

    xDBL_mul_64ns_64nbkb_U7 : component xDBL_mul_64ns_64nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 128)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_644_p0,
        din1 => grp_fu_644_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_644_p2);

    xDBL_mul_64s_64s_cud_U8 : component xDBL_mul_64s_64s_cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ai_6_V_reg_1767,
        din1 => tmp_1_reg_1816,
        ce => ap_const_logic_1,
        dout => grp_fu_649_p2);

    xDBL_mux_73_448_1_1_U9 : component xDBL_mux_73_448_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 448,
        din1_WIDTH => 448,
        din2_WIDTH => 448,
        din3_WIDTH => 448,
        din4_WIDTH => 448,
        din5_WIDTH => 448,
        din6_WIDTH => 448,
        din7_WIDTH => 3,
        dout_WIDTH => 448)
    port map (
        din0 => partial_products_6_s_fu_124,
        din1 => partial_products_0_5_fu_128,
        din2 => partial_products_0_4_fu_132,
        din3 => partial_products_0_3_fu_136,
        din4 => partial_products_0_2_fu_140,
        din5 => partial_products_6_1_fu_144,
        din6 => partial_products_6_6_fu_148,
        din7 => i8_0_reg_428,
        dout => tmp_2_fu_1125_p9);

    xDBL_add_451ns_45dEe_U10 : component xDBL_add_451ns_45dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 451,
        din1_WIDTH => 451,
        dout_WIDTH => 451)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_V_0_0_reg_344,
        din1 => grp_fu_1149_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1149_p2);

    xDBL_mux_73_448_1_1_U11 : component xDBL_mux_73_448_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 448,
        din1_WIDTH => 448,
        din2_WIDTH => 448,
        din3_WIDTH => 448,
        din4_WIDTH => 448,
        din5_WIDTH => 448,
        din6_WIDTH => 448,
        din7_WIDTH => 3,
        dout_WIDTH => 448)
    port map (
        din0 => partial_products_6_7_fu_152,
        din1 => partial_products_1_5_fu_156,
        din2 => partial_products_1_4_fu_160,
        din3 => partial_products_1_3_fu_164,
        din4 => partial_products_1_2_fu_168,
        din5 => partial_products_6_8_fu_172,
        din6 => partial_products_6_9_fu_176,
        din7 => i8_0_reg_428,
        dout => tmp_3_fu_1155_p9);

    xDBL_add_515ns_51eOg_U12 : component xDBL_add_515ns_51eOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 515,
        din1_WIDTH => 515,
        dout_WIDTH => 515)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_V_1_0_reg_356,
        din1 => grp_fu_1187_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1187_p2);

    xDBL_mux_73_448_1_1_U13 : component xDBL_mux_73_448_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 448,
        din1_WIDTH => 448,
        din2_WIDTH => 448,
        din3_WIDTH => 448,
        din4_WIDTH => 448,
        din5_WIDTH => 448,
        din6_WIDTH => 448,
        din7_WIDTH => 3,
        dout_WIDTH => 448)
    port map (
        din0 => partial_products_6_10_fu_180,
        din1 => partial_products_2_5_fu_184,
        din2 => partial_products_2_4_fu_188,
        din3 => partial_products_2_3_fu_192,
        din4 => partial_products_2_2_fu_196,
        din5 => partial_products_6_11_fu_200,
        din6 => partial_products_6_12_fu_204,
        din7 => i8_0_reg_428,
        dout => tmp_4_fu_1193_p9);

    xDBL_add_579ns_57fYi_U14 : component xDBL_add_579ns_57fYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 579,
        din1_WIDTH => 579,
        dout_WIDTH => 579)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_V_2_0_reg_368,
        din1 => grp_fu_1225_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1225_p2);

    xDBL_mux_73_448_1_1_U15 : component xDBL_mux_73_448_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 448,
        din1_WIDTH => 448,
        din2_WIDTH => 448,
        din3_WIDTH => 448,
        din4_WIDTH => 448,
        din5_WIDTH => 448,
        din6_WIDTH => 448,
        din7_WIDTH => 3,
        dout_WIDTH => 448)
    port map (
        din0 => partial_products_6_13_fu_208,
        din1 => partial_products_3_5_fu_212,
        din2 => partial_products_3_4_fu_216,
        din3 => partial_products_3_3_fu_220,
        din4 => partial_products_3_2_fu_224,
        din5 => partial_products_6_14_fu_228,
        din6 => partial_products_6_15_fu_232,
        din7 => i8_0_reg_428,
        dout => tmp_5_fu_1231_p9);

    xDBL_add_643ns_64g8j_U16 : component xDBL_add_643ns_64g8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 643,
        din1_WIDTH => 643,
        dout_WIDTH => 643)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_V_3_0_reg_380,
        din1 => grp_fu_1263_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1263_p2);

    xDBL_mux_73_448_1_1_U17 : component xDBL_mux_73_448_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 448,
        din1_WIDTH => 448,
        din2_WIDTH => 448,
        din3_WIDTH => 448,
        din4_WIDTH => 448,
        din5_WIDTH => 448,
        din6_WIDTH => 448,
        din7_WIDTH => 3,
        dout_WIDTH => 448)
    port map (
        din0 => partial_products_6_16_fu_236,
        din1 => partial_products_4_5_fu_240,
        din2 => partial_products_4_4_fu_244,
        din3 => partial_products_4_3_fu_248,
        din4 => partial_products_4_2_fu_252,
        din5 => partial_products_6_17_fu_256,
        din6 => partial_products_6_18_fu_260,
        din7 => i8_0_reg_428,
        dout => tmp_6_fu_1269_p9);

    xDBL_add_707ns_70hbi_U18 : component xDBL_add_707ns_70hbi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 707,
        din1_WIDTH => 707,
        dout_WIDTH => 707)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_V_4_0_reg_392,
        din1 => grp_fu_1301_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1301_p2);

    xDBL_mux_73_448_1_1_U19 : component xDBL_mux_73_448_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 448,
        din1_WIDTH => 448,
        din2_WIDTH => 448,
        din3_WIDTH => 448,
        din4_WIDTH => 448,
        din5_WIDTH => 448,
        din6_WIDTH => 448,
        din7_WIDTH => 3,
        dout_WIDTH => 448)
    port map (
        din0 => partial_products_6_19_fu_264,
        din1 => partial_products_5_5_fu_268,
        din2 => partial_products_5_4_fu_272,
        din3 => partial_products_5_3_fu_276,
        din4 => partial_products_5_2_fu_280,
        din5 => partial_products_6_20_fu_284,
        din6 => partial_products_6_21_fu_288,
        din7 => i8_0_reg_428,
        dout => tmp_7_fu_1307_p9);

    xDBL_add_771ns_77ibs_U20 : component xDBL_add_771ns_77ibs
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 771,
        din1_WIDTH => 771,
        dout_WIDTH => 771)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_V_5_0_reg_404,
        din1 => grp_fu_1339_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1339_p2);

    xDBL_mux_73_448_1_1_U21 : component xDBL_mux_73_448_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 448,
        din1_WIDTH => 448,
        din2_WIDTH => 448,
        din3_WIDTH => 448,
        din4_WIDTH => 448,
        din5_WIDTH => 448,
        din6_WIDTH => 448,
        din7_WIDTH => 3,
        dout_WIDTH => 448)
    port map (
        din0 => partial_products_6_22_fu_292,
        din1 => partial_products_6_5_fu_296,
        din2 => partial_products_6_4_fu_300,
        din3 => partial_products_6_3_fu_304,
        din4 => partial_products_6_2_fu_308,
        din5 => partial_products_6_23_fu_312,
        din6 => partial_products_6_24_fu_316,
        din7 => i8_0_reg_428,
        dout => tmp_8_fu_1345_p9);

    xDBL_add_835ns_83jbC_U22 : component xDBL_add_835ns_83jbC
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 835,
        din1_WIDTH => 835,
        dout_WIDTH => 835)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_V_6_0_reg_416,
        din1 => grp_fu_1377_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1377_p2);

    xDBL_add_579ns_57fYi_U23 : component xDBL_add_579ns_57fYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 579,
        din1_WIDTH => 579,
        dout_WIDTH => 579)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1395_p0,
        din1 => sum_V_2_0_reg_368,
        ce => ap_const_logic_1,
        dout => grp_fu_1395_p2);

    xDBL_add_707ns_70hbi_U24 : component xDBL_add_707ns_70hbi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 707,
        din1_WIDTH => 707,
        dout_WIDTH => 707)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1401_p0,
        din1 => sum_V_4_0_reg_392,
        ce => ap_const_logic_1,
        dout => grp_fu_1401_p2);

    xDBL_add_835ns_83jbC_U25 : component xDBL_add_835ns_83jbC
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 835,
        din1_WIDTH => 835,
        dout_WIDTH => 835)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1407_p0,
        din1 => sum_V_6_0_reg_416,
        ce => ap_const_logic_1,
        dout => grp_fu_1407_p2);

    xDBL_add_579ns_57fYi_U26 : component xDBL_add_579ns_57fYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 579,
        din1_WIDTH => 579,
        dout_WIDTH => 579)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1395_p2,
        din1 => grp_fu_1417_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1417_p2);

    xDBL_add_835ns_83jbC_U27 : component xDBL_add_835ns_83jbC
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 835,
        din1_WIDTH => 835,
        dout_WIDTH => 835)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1407_p2,
        din1 => grp_fu_1427_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1427_p2);

    xDBL_add_835ns_83jbC_U28 : component xDBL_add_835ns_83jbC
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 835,
        din1_WIDTH => 835,
        dout_WIDTH => 835)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1427_p2,
        din1 => grp_fu_1437_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1437_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv835_lc_1;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_return_preg <= grp_fu_1437_p2;
                end if; 
            end if;
        end if;
    end process;


    i7_0_reg_332_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln28_reg_1807 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i7_0_reg_332 <= i_1_reg_1811;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i7_0_reg_332 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i8_0_reg_428_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i8_0_reg_428 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i8_0_reg_428 <= i_reg_1835;
            end if; 
        end if;
    end process;

    sum_V_0_0_reg_344_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                sum_V_0_0_reg_344 <= ap_const_lv451_lc_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                sum_V_0_0_reg_344 <= grp_fu_1149_p2;
            end if; 
        end if;
    end process;

    sum_V_1_0_reg_356_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                sum_V_1_0_reg_356 <= ap_const_lv515_lc_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                sum_V_1_0_reg_356 <= grp_fu_1187_p2;
            end if; 
        end if;
    end process;

    sum_V_2_0_reg_368_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                sum_V_2_0_reg_368 <= ap_const_lv579_lc_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                sum_V_2_0_reg_368 <= grp_fu_1225_p2;
            end if; 
        end if;
    end process;

    sum_V_3_0_reg_380_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                sum_V_3_0_reg_380 <= ap_const_lv643_lc_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                sum_V_3_0_reg_380 <= grp_fu_1263_p2;
            end if; 
        end if;
    end process;

    sum_V_4_0_reg_392_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                sum_V_4_0_reg_392 <= ap_const_lv707_lc_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                sum_V_4_0_reg_392 <= grp_fu_1301_p2;
            end if; 
        end if;
    end process;

    sum_V_5_0_reg_404_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                sum_V_5_0_reg_404 <= ap_const_lv771_lc_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                sum_V_5_0_reg_404 <= grp_fu_1339_p2;
            end if; 
        end if;
    end process;

    sum_V_6_0_reg_416_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                sum_V_6_0_reg_416 <= ap_const_lv835_lc_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                sum_V_6_0_reg_416 <= grp_fu_1377_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                ai_6_V_reg_1767 <= a_V(447 downto 384);
                bi_0_V_reg_1737 <= bi_0_V_fu_443_p1;
                bi_1_V_reg_1742 <= b_V(127 downto 64);
                bi_2_V_reg_1747 <= b_V(191 downto 128);
                bi_3_V_reg_1752 <= b_V(255 downto 192);
                bi_4_V_reg_1757 <= b_V(319 downto 256);
                bi_5_V_reg_1762 <= b_V(383 downto 320);
                bi_6_V_reg_1772 <= b_V(447 downto 384);
                    zext_ln215_2_reg_1782(63 downto 0) <= zext_ln215_2_fu_571_p1(63 downto 0);
                    zext_ln215_3_reg_1787(63 downto 0) <= zext_ln215_3_fu_575_p1(63 downto 0);
                    zext_ln215_4_reg_1792(63 downto 0) <= zext_ln215_4_fu_579_p1(63 downto 0);
                    zext_ln215_5_reg_1797(63 downto 0) <= zext_ln215_5_fu_583_p1(63 downto 0);
                    zext_ln215_6_reg_1802(63 downto 0) <= zext_ln215_6_fu_587_p1(63 downto 0);
                    zext_ln215_reg_1777(63 downto 0) <= zext_ln215_fu_567_p1(63 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                ap_return <= grp_fu_1437_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i7_0_reg_332_pp0_iter1_reg <= i7_0_reg_332;
                icmp_ln28_reg_1807 <= icmp_ln28_fu_591_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                i7_0_reg_332_pp0_iter2_reg <= i7_0_reg_332_pp0_iter1_reg;
                i7_0_reg_332_pp0_iter3_reg <= i7_0_reg_332_pp0_iter2_reg;
                i7_0_reg_332_pp0_iter4_reg <= i7_0_reg_332_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_1_reg_1811 <= i_1_fu_597_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                i_reg_1835 <= i_fu_972_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i7_0_reg_332_pp0_iter4_reg = ap_const_lv3_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                    partial_products_0_2_fu_140(383 downto 256) <= zext_ln1503_3_fu_701_p1(383 downto 256);
                    partial_products_0_3_fu_136(319 downto 192) <= zext_ln1503_2_fu_689_p1(319 downto 192);
                    partial_products_0_4_fu_132(255 downto 128) <= zext_ln1503_1_fu_677_p1(255 downto 128);
                    partial_products_0_5_fu_128(191 downto 64) <= zext_ln1503_fu_665_p1(191 downto 64);
                    partial_products_6_1_fu_144(447 downto 320) <= partial_products_0_9_fu_705_p3(447 downto 320);
                    partial_products_6_6_fu_148(447 downto 384) <= partial_products_0_10_fu_713_p3(447 downto 384);
                    partial_products_6_s_fu_124(127 downto 0) <= partial_products_0_s_fu_653_p1(127 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i7_0_reg_332_pp0_iter4_reg = ap_const_lv3_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                    partial_products_1_2_fu_168(383 downto 256) <= zext_ln1503_3_fu_701_p1(383 downto 256);
                    partial_products_1_3_fu_164(319 downto 192) <= zext_ln1503_2_fu_689_p1(319 downto 192);
                    partial_products_1_4_fu_160(255 downto 128) <= zext_ln1503_1_fu_677_p1(255 downto 128);
                    partial_products_1_5_fu_156(191 downto 64) <= zext_ln1503_fu_665_p1(191 downto 64);
                    partial_products_6_7_fu_152(127 downto 0) <= partial_products_0_s_fu_653_p1(127 downto 0);
                    partial_products_6_8_fu_172(447 downto 320) <= partial_products_0_9_fu_705_p3(447 downto 320);
                    partial_products_6_9_fu_176(447 downto 384) <= partial_products_0_10_fu_713_p3(447 downto 384);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i7_0_reg_332_pp0_iter4_reg = ap_const_lv3_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                    partial_products_2_2_fu_196(383 downto 256) <= zext_ln1503_3_fu_701_p1(383 downto 256);
                    partial_products_2_3_fu_192(319 downto 192) <= zext_ln1503_2_fu_689_p1(319 downto 192);
                    partial_products_2_4_fu_188(255 downto 128) <= zext_ln1503_1_fu_677_p1(255 downto 128);
                    partial_products_2_5_fu_184(191 downto 64) <= zext_ln1503_fu_665_p1(191 downto 64);
                    partial_products_6_10_fu_180(127 downto 0) <= partial_products_0_s_fu_653_p1(127 downto 0);
                    partial_products_6_11_fu_200(447 downto 320) <= partial_products_0_9_fu_705_p3(447 downto 320);
                    partial_products_6_12_fu_204(447 downto 384) <= partial_products_0_10_fu_713_p3(447 downto 384);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i7_0_reg_332_pp0_iter4_reg = ap_const_lv3_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                    partial_products_3_2_fu_224(383 downto 256) <= zext_ln1503_3_fu_701_p1(383 downto 256);
                    partial_products_3_3_fu_220(319 downto 192) <= zext_ln1503_2_fu_689_p1(319 downto 192);
                    partial_products_3_4_fu_216(255 downto 128) <= zext_ln1503_1_fu_677_p1(255 downto 128);
                    partial_products_3_5_fu_212(191 downto 64) <= zext_ln1503_fu_665_p1(191 downto 64);
                    partial_products_6_13_fu_208(127 downto 0) <= partial_products_0_s_fu_653_p1(127 downto 0);
                    partial_products_6_14_fu_228(447 downto 320) <= partial_products_0_9_fu_705_p3(447 downto 320);
                    partial_products_6_15_fu_232(447 downto 384) <= partial_products_0_10_fu_713_p3(447 downto 384);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i7_0_reg_332_pp0_iter4_reg = ap_const_lv3_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                    partial_products_4_2_fu_252(383 downto 256) <= zext_ln1503_3_fu_701_p1(383 downto 256);
                    partial_products_4_3_fu_248(319 downto 192) <= zext_ln1503_2_fu_689_p1(319 downto 192);
                    partial_products_4_4_fu_244(255 downto 128) <= zext_ln1503_1_fu_677_p1(255 downto 128);
                    partial_products_4_5_fu_240(191 downto 64) <= zext_ln1503_fu_665_p1(191 downto 64);
                    partial_products_6_16_fu_236(127 downto 0) <= partial_products_0_s_fu_653_p1(127 downto 0);
                    partial_products_6_17_fu_256(447 downto 320) <= partial_products_0_9_fu_705_p3(447 downto 320);
                    partial_products_6_18_fu_260(447 downto 384) <= partial_products_0_10_fu_713_p3(447 downto 384);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i7_0_reg_332_pp0_iter4_reg = ap_const_lv3_5) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                    partial_products_5_2_fu_280(383 downto 256) <= zext_ln1503_3_fu_701_p1(383 downto 256);
                    partial_products_5_3_fu_276(319 downto 192) <= zext_ln1503_2_fu_689_p1(319 downto 192);
                    partial_products_5_4_fu_272(255 downto 128) <= zext_ln1503_1_fu_677_p1(255 downto 128);
                    partial_products_5_5_fu_268(191 downto 64) <= zext_ln1503_fu_665_p1(191 downto 64);
                    partial_products_6_19_fu_264(127 downto 0) <= partial_products_0_s_fu_653_p1(127 downto 0);
                    partial_products_6_20_fu_284(447 downto 320) <= partial_products_0_9_fu_705_p3(447 downto 320);
                    partial_products_6_21_fu_288(447 downto 384) <= partial_products_0_10_fu_713_p3(447 downto 384);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and ((i7_0_reg_332_pp0_iter4_reg = ap_const_lv3_6) or (i7_0_reg_332_pp0_iter4_reg = ap_const_lv3_7)))) then
                    partial_products_6_22_fu_292(127 downto 0) <= partial_products_0_s_fu_653_p1(127 downto 0);
                    partial_products_6_23_fu_312(447 downto 320) <= partial_products_0_9_fu_705_p3(447 downto 320);
                    partial_products_6_24_fu_316(447 downto 384) <= partial_products_0_10_fu_713_p3(447 downto 384);
                    partial_products_6_2_fu_308(383 downto 256) <= zext_ln1503_3_fu_701_p1(383 downto 256);
                    partial_products_6_3_fu_304(319 downto 192) <= zext_ln1503_2_fu_689_p1(319 downto 192);
                    partial_products_6_4_fu_300(255 downto 128) <= zext_ln1503_1_fu_677_p1(255 downto 128);
                    partial_products_6_5_fu_296(191 downto 64) <= zext_ln1503_fu_665_p1(191 downto 64);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln28_fu_591_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_1_reg_1816 <= tmp_1_fu_603_p9;
            end if;
        end if;
    end process;
    zext_ln215_reg_1777(127 downto 64) <= "0000000000000000000000000000000000000000000000000000000000000000";
    zext_ln215_2_reg_1782(127 downto 64) <= "0000000000000000000000000000000000000000000000000000000000000000";
    zext_ln215_3_reg_1787(127 downto 64) <= "0000000000000000000000000000000000000000000000000000000000000000";
    zext_ln215_4_reg_1792(127 downto 64) <= "0000000000000000000000000000000000000000000000000000000000000000";
    zext_ln215_5_reg_1797(127 downto 64) <= "0000000000000000000000000000000000000000000000000000000000000000";
    zext_ln215_6_reg_1802(127 downto 64) <= "0000000000000000000000000000000000000000000000000000000000000000";
    partial_products_6_s_fu_124(447 downto 128) <= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_0_5_fu_128(63 downto 0) <= "0000000000000000000000000000000000000000000000000000000000000000";
    partial_products_0_5_fu_128(447 downto 192) <= "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_0_4_fu_132(127 downto 0) <= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_0_4_fu_132(447 downto 256) <= "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_0_3_fu_136(191 downto 0) <= "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_0_3_fu_136(447 downto 320) <= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_0_2_fu_140(255 downto 0) <= "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_0_2_fu_140(447 downto 384) <= "0000000000000000000000000000000000000000000000000000000000000000";
    partial_products_6_1_fu_144(319 downto 0) <= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_6_6_fu_148(383 downto 0) <= "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_6_7_fu_152(447 downto 128) <= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_1_5_fu_156(63 downto 0) <= "0000000000000000000000000000000000000000000000000000000000000000";
    partial_products_1_5_fu_156(447 downto 192) <= "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_1_4_fu_160(127 downto 0) <= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_1_4_fu_160(447 downto 256) <= "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_1_3_fu_164(191 downto 0) <= "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_1_3_fu_164(447 downto 320) <= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_1_2_fu_168(255 downto 0) <= "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_1_2_fu_168(447 downto 384) <= "0000000000000000000000000000000000000000000000000000000000000000";
    partial_products_6_8_fu_172(319 downto 0) <= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_6_9_fu_176(383 downto 0) <= "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_6_10_fu_180(447 downto 128) <= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_2_5_fu_184(63 downto 0) <= "0000000000000000000000000000000000000000000000000000000000000000";
    partial_products_2_5_fu_184(447 downto 192) <= "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_2_4_fu_188(127 downto 0) <= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_2_4_fu_188(447 downto 256) <= "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_2_3_fu_192(191 downto 0) <= "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_2_3_fu_192(447 downto 320) <= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_2_2_fu_196(255 downto 0) <= "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_2_2_fu_196(447 downto 384) <= "0000000000000000000000000000000000000000000000000000000000000000";
    partial_products_6_11_fu_200(319 downto 0) <= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_6_12_fu_204(383 downto 0) <= "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_6_13_fu_208(447 downto 128) <= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_3_5_fu_212(63 downto 0) <= "0000000000000000000000000000000000000000000000000000000000000000";
    partial_products_3_5_fu_212(447 downto 192) <= "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_3_4_fu_216(127 downto 0) <= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_3_4_fu_216(447 downto 256) <= "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_3_3_fu_220(191 downto 0) <= "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_3_3_fu_220(447 downto 320) <= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_3_2_fu_224(255 downto 0) <= "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_3_2_fu_224(447 downto 384) <= "0000000000000000000000000000000000000000000000000000000000000000";
    partial_products_6_14_fu_228(319 downto 0) <= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_6_15_fu_232(383 downto 0) <= "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_6_16_fu_236(447 downto 128) <= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_4_5_fu_240(63 downto 0) <= "0000000000000000000000000000000000000000000000000000000000000000";
    partial_products_4_5_fu_240(447 downto 192) <= "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_4_4_fu_244(127 downto 0) <= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_4_4_fu_244(447 downto 256) <= "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_4_3_fu_248(191 downto 0) <= "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_4_3_fu_248(447 downto 320) <= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_4_2_fu_252(255 downto 0) <= "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_4_2_fu_252(447 downto 384) <= "0000000000000000000000000000000000000000000000000000000000000000";
    partial_products_6_17_fu_256(319 downto 0) <= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_6_18_fu_260(383 downto 0) <= "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_6_19_fu_264(447 downto 128) <= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_5_5_fu_268(63 downto 0) <= "0000000000000000000000000000000000000000000000000000000000000000";
    partial_products_5_5_fu_268(447 downto 192) <= "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_5_4_fu_272(127 downto 0) <= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_5_4_fu_272(447 downto 256) <= "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_5_3_fu_276(191 downto 0) <= "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_5_3_fu_276(447 downto 320) <= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_5_2_fu_280(255 downto 0) <= "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_5_2_fu_280(447 downto 384) <= "0000000000000000000000000000000000000000000000000000000000000000";
    partial_products_6_20_fu_284(319 downto 0) <= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_6_21_fu_288(383 downto 0) <= "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_6_22_fu_292(447 downto 128) <= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_6_5_fu_296(63 downto 0) <= "0000000000000000000000000000000000000000000000000000000000000000";
    partial_products_6_5_fu_296(447 downto 192) <= "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_6_4_fu_300(127 downto 0) <= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_6_4_fu_300(447 downto 256) <= "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_6_3_fu_304(191 downto 0) <= "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_6_3_fu_304(447 downto 320) <= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_6_2_fu_308(255 downto 0) <= "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_6_2_fu_308(447 downto 384) <= "0000000000000000000000000000000000000000000000000000000000000000";
    partial_products_6_23_fu_312(319 downto 0) <= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    partial_products_6_24_fu_316(383 downto 0) <= "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln28_fu_591_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state9, icmp_ln41_fu_966_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln28_fu_591_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln28_fu_591_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln41_fu_966_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ai_0_V_fu_439_p1 <= a_V(64 - 1 downto 0);
    ai_1_V_fu_447_p4 <= a_V(127 downto 64);
    ai_2_V_fu_467_p4 <= a_V(191 downto 128);
    ai_3_V_fu_487_p4 <= a_V(255 downto 192);
    ai_4_V_fu_507_p4 <= a_V(319 downto 256);
    ai_5_V_fu_527_p4 <= a_V(383 downto 320);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(4);
    ap_CS_fsm_state11 <= ap_CS_fsm(5);
    ap_CS_fsm_state12 <= ap_CS_fsm(6);
    ap_CS_fsm_state13 <= ap_CS_fsm(7);
    ap_CS_fsm_state8 <= ap_CS_fsm(2);
    ap_CS_fsm_state9 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln28_fu_591_p2)
    begin
        if ((icmp_ln28_fu_591_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i7_0_phi_fu_336_p4_assign_proc : process(i7_0_reg_332, ap_CS_fsm_pp0_stage0, icmp_ln28_reg_1807, i_1_reg_1811, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln28_reg_1807 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i7_0_phi_fu_336_p4 <= i_1_reg_1811;
        else 
            ap_phi_mux_i7_0_phi_fu_336_p4 <= i7_0_reg_332;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bi_0_V_fu_443_p1 <= b_V(64 - 1 downto 0);
    grp_fu_1149_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_1125_p9),451));
    grp_fu_1187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_1175_p3),515));
    grp_fu_1225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1503_1_fu_1213_p3),579));
    grp_fu_1263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1503_7_fu_1251_p3),643));
    grp_fu_1301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1503_8_fu_1289_p3),707));
    grp_fu_1339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1503_9_fu_1327_p3),771));
    grp_fu_1377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1503_s_fu_1365_p3),835));
    grp_fu_1395_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_V_0_0_reg_344),579));
    grp_fu_1401_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_V_3_0_reg_380),707));
    grp_fu_1407_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_V_5_0_reg_404),835));
    grp_fu_1417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_V_1_0_reg_356),579));
    grp_fu_1427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1401_p2),835));
    grp_fu_1437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1417_p2),835));
    grp_fu_619_p0 <= zext_ln215_reg_1777(64 - 1 downto 0);
    grp_fu_619_p1 <= zext_ln215_1_fu_616_p1(64 - 1 downto 0);
    grp_fu_624_p0 <= zext_ln215_2_reg_1782(64 - 1 downto 0);
    grp_fu_624_p1 <= zext_ln215_1_fu_616_p1(64 - 1 downto 0);
    grp_fu_629_p0 <= zext_ln215_3_reg_1787(64 - 1 downto 0);
    grp_fu_629_p1 <= zext_ln215_1_fu_616_p1(64 - 1 downto 0);
    grp_fu_634_p0 <= zext_ln215_4_reg_1792(64 - 1 downto 0);
    grp_fu_634_p1 <= zext_ln215_1_fu_616_p1(64 - 1 downto 0);
    grp_fu_639_p0 <= zext_ln215_5_reg_1797(64 - 1 downto 0);
    grp_fu_639_p1 <= zext_ln215_1_fu_616_p1(64 - 1 downto 0);
    grp_fu_644_p0 <= zext_ln215_6_reg_1802(64 - 1 downto 0);
    grp_fu_644_p1 <= zext_ln215_1_fu_616_p1(64 - 1 downto 0);
    i_1_fu_597_p2 <= std_logic_vector(unsigned(ap_phi_mux_i7_0_phi_fu_336_p4) + unsigned(ap_const_lv3_1));
    i_fu_972_p2 <= std_logic_vector(unsigned(i8_0_reg_428) + unsigned(ap_const_lv3_1));
    icmp_ln28_fu_591_p2 <= "1" when (ap_phi_mux_i7_0_phi_fu_336_p4 = ap_const_lv3_7) else "0";
    icmp_ln41_fu_966_p2 <= "1" when (i8_0_reg_428 = ap_const_lv3_7) else "0";
    partial_products_0_10_fu_713_p3 <= (grp_fu_649_p2 & ap_const_lv384_lc_1);
    partial_products_0_1_fu_657_p3 <= (grp_fu_624_p2 & ap_const_lv64_0);
    partial_products_0_6_fu_669_p3 <= (grp_fu_629_p2 & ap_const_lv128_lc_1);
    partial_products_0_7_fu_681_p3 <= (grp_fu_634_p2 & ap_const_lv192_lc_1);
    partial_products_0_8_fu_693_p3 <= (grp_fu_639_p2 & ap_const_lv256_lc_1);
    partial_products_0_9_fu_705_p3 <= (grp_fu_644_p2 & ap_const_lv320_lc_1);
    partial_products_0_s_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_619_p2),448));
    shl_ln1503_1_fu_1213_p3 <= (tmp_4_fu_1193_p9 & ap_const_lv128_lc_1);
    shl_ln1503_7_fu_1251_p3 <= (tmp_5_fu_1231_p9 & ap_const_lv192_lc_1);
    shl_ln1503_8_fu_1289_p3 <= (tmp_6_fu_1269_p9 & ap_const_lv256_lc_1);
    shl_ln1503_9_fu_1327_p3 <= (tmp_7_fu_1307_p9 & ap_const_lv320_lc_1);
    shl_ln1503_s_fu_1365_p3 <= (tmp_8_fu_1345_p9 & ap_const_lv384_lc_1);
    shl_ln_fu_1175_p3 <= (tmp_3_fu_1155_p9 & ap_const_lv64_0);
    zext_ln1503_1_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(partial_products_0_6_fu_669_p3),448));
    zext_ln1503_2_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(partial_products_0_7_fu_681_p3),448));
    zext_ln1503_3_fu_701_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(partial_products_0_8_fu_693_p3),448));
    zext_ln1503_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(partial_products_0_1_fu_657_p3),448));
    zext_ln215_1_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_reg_1816),128));
    zext_ln215_2_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ai_1_V_fu_447_p4),128));
    zext_ln215_3_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ai_2_V_fu_467_p4),128));
    zext_ln215_4_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ai_3_V_fu_487_p4),128));
    zext_ln215_5_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ai_4_V_fu_507_p4),128));
    zext_ln215_6_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ai_5_V_fu_527_p4),128));
    zext_ln215_fu_567_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ai_0_V_fu_439_p1),128));
end behav;
